// Copyright (c) 2004-2018 SIL International
// This software is licensed under the LGPL, version 2.1 or later
// (http://www.gnu.org/licenses/lgpl-2.1.html)

using System;
using System.Collections.Generic;
using NUnit.Framework;
using SIL.LCModel;
using SIL.LCModel.DomainServices;
using SIL.LCModel.Core.Scripture;
using SIL.LCModel.Core.Text;
using SIL.LCModel.Core.KernelInterfaces;
using SIL.LCModel.Utils;

namespace ParatextImport
{
	/// ----------------------------------------------------------------------------------------
	/// <summary>
	/// Tests for the <see cref="BookMerger"/> class.
	/// </summary>
	/// ----------------------------------------------------------------------------------------
	[TestFixture]
	public class BookMergerTests : BookMergerTestsBase
	{
		#region DetectDifferences -Basics
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the current book and
		/// the revision are identical.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_Identical()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("2", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And the earth was formless and void... ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("3", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And God said, 'Let there be light...' ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.CreateParagraph(sectionCur.ContentOA);

			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("2", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And the earth was formless and void... ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("3", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And God said, 'Let there be light...' ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// MoveFirst should return null because there are no diffs.
			Assert.IsNull(m_bookMerger.Differences.MoveFirst());
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the current book and
		/// the revision are identical. TE-9102
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_Identical_BridgeFollowingChapterNumber()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("1-2", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("The earth was formless and void.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.CreateParagraph(sectionCur.ContentOA);
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("And it was all good.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.CreateParagraph(sectionCur.ContentOA);

			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("1-2", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("The earth was formless and void.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.CreateParagraph(sectionRev.ContentOA);
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("And it was all good.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// MoveFirst should return null because there are no diffs.
			Assert.IsNull(m_bookMerger.Differences.MoveFirst());
		}
		#endregion

		#region DetectDifferences -Empty book(s), paragraph(s), etc.
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the current book and
		/// the revision are both empty.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_EmptyBooks()
		{
			// Set up two empty sections with empty headings and contents
			IScrSection sectionCur = CreateSection(m_genesis, "");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "");
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.CreateParagraph(sectionCur.ContentOA);
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Find the diffs
			m_bookMerger.DetectDifferences(null);

			// MoveFirst should return null because there are no diffs.
			Assert.AreEqual(null, m_bookMerger.Differences.MoveFirst());
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the current book
		/// has an empty content paragraph added at the beginning.
		/// This is a regression test for bug TE-2853.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_EmptyParaAddedAtBeg()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			// The first Current paragraph is a stanza break.
			AddEmptyPara(sectionCur, ScrStyleNames.StanzaBreak);
			IScrTxtPara para2Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Cur, 1, 0, "In the beginning, God created the heavens and the earth. ");
			int ichLimCur = para2Cur.Contents.Length;

			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 1, 0, "In the beginning, God created the heavens and the earth. ");
			int ichMinV2Rev = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 2, "And the earth was formless and void... ");
			int ichLimRev = para1Rev.Contents.Length;

			// Find the diffs for Genesis
			// We expect that the empty paragraph will be skipped.
			m_bookMerger.DetectDifferences(null);

			// Verify that differences are correct
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// Verify that the current begins with an empty paragraph.
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyStanzaBreakAddedDiff(diff, 01001001, DifferenceType.StanzaBreakAddedToCurrent,
				(IScrTxtPara)sectionCur.ContentOA[0],
				(IScrTxtPara)sectionRev.ContentOA[0], 0);
			// verify verse 2 missing in current
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, 01001002, DifferenceType.VerseMissingInCurrent,
										  (IScrTxtPara)sectionCur.ContentOA[1], ichLimCur, ichLimCur,
										  (IScrTxtPara)sectionRev.ContentOA[0], ichMinV2Rev, ichLimRev);

			// MoveNext should return null because there are no more diffs.
			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences
		/// method when the current book has an empty content paragraph added at the end of the book.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_EmptyParaAddedAtEnd()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 1, 0, "In the beginning, God created the heavens and the earth. ");
			AddEmptyPara(sectionCur, ScrStyleNames.StanzaBreak);

			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// Create Revision paragraph with text.
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 1, 0, "In the beginning, God created the heavens and the earth. ");
			int ichMinV2Rev = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 2, "And the earth was formless and void... ");

			// Find the diffs for Genesis
			// We expect that the empty paragraph will be skipped.
			m_bookMerger.DetectDifferences(null);

			// Verify that differences are correct
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// verify added paragraph at end of current
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyStanzaBreakAddedDiff(diff1, 01001001, DifferenceType.StanzaBreakAddedToCurrent,
				(IScrTxtPara)sectionCur.ContentOA[1],
				(IScrTxtPara)sectionRev.ContentOA[0], ichMinV2Rev);

			// verify verse 2 missing in current
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff2, 01001002, DifferenceType.VerseMissingInCurrent,
					(IScrTxtPara)sectionCur.ContentOA[1], 0, 0,
					(IScrTxtPara)sectionRev.ContentOA[0], ichMinV2Rev, para1Rev.Contents.Length);

			// MoveNext should return null because there are no more diffs.
			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the current book
		/// has an empty section heading.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_EmptyHeading()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("2", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And the earth was formless and void... ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("2", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And the earth was formless and void... ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify that differences are correct
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// Verify section head differences
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefEnd);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(sectionCur.HeadingOA[0], diff.ParaCurr);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(0, diff.IchLimCurr);
			Assert.AreEqual(sectionRev.HeadingOA[0], diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(15, diff.IchLimRev);

			// MoveNext should return null because there is only one diff.
			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}
		#endregion

		#region DetectDifferences in Verses and Text
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the current book and
		/// the revision have a single difference in the verse text of one verse.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_SimpleVerseTextDifference()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("2", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			int ichMinCurr = paraBldr.Length + 8; // at the start of "earth was..."
			paraBldr.AppendRun("And the earth was formless and void... ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimCurr = paraBldr.Length - 4;	// at the end of "...and void"
			paraBldr.AppendRun("3", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And God said, 'Let there be light...'",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("2", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			int ichMinRev = paraBldr.Length + 8;	// at the start of "world was..."
			paraBldr.AppendRun("And the world was formless and null... ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimRev = paraBldr.Length - 4;	// at the end of "...and null"
			paraBldr.AppendRun("3", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And God said, 'Let there be light...'",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Detect differences
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis

			// Verify that differences are correct
			Assert.AreEqual(1, m_bookMerger.OriginalNumberOfDifferences);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001002, diff.RefStart);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(sectionCur.ContentOA[0], diff.ParaCurr);
			Assert.AreEqual(sectionRev.ContentOA[0], diff.ParaRev);
			Assert.AreEqual(ichMinCurr, diff.IchMinCurr);
			Assert.AreEqual(ichLimCurr, diff.IchLimCurr);
			Assert.AreEqual(ichMinRev, diff.IchMinRev);
			Assert.AreEqual(ichLimRev, diff.IchLimRev);

			// MoveNext should return null because there is only one diff.
			Assert.IsNull(m_bookMerger.Differences.MoveNext());
			// MoveNext should not have advanced the iterator;
			// the one diff is still current, and MovePrev should also return null.
			Assert.IsNull(m_bookMerger.Differences.MovePrev());
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences
		/// method when the revision has a different character style applied to the verse text.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_DifferentCharacterStyle()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// create a paragraph with the Key word style for the current section
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			int ichMinCurr = paraBldr.Length;
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth.",
				StyleUtils.CharStyleTextProps("Key Word", Cache.DefaultVernWs));
			int ichLimCurr = paraBldr.Length;
			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			// create a paragraph with the Emphasis style for the rev section
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			int ichMinRev = paraBldr.Length;
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth.",
				StyleUtils.CharStyleTextProps("Emphasis", Cache.DefaultVernWs));
			int ichLimRev = paraBldr.Length;
			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Detect differences and verify that they are correct
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(DifferenceType.CharStyleDifference, diff.DiffType);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(ichMinCurr, diff.IchMinCurr);
			Assert.AreEqual(ichLimCurr, diff.IchLimCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(ichMinRev, diff.IchMinRev);
			Assert.AreEqual(ichLimRev, diff.IchLimRev);
			Assert.AreEqual("Key Word", diff.StyleNameCurr);
			Assert.AreEqual("Emphasis", diff.StyleNameRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences
		/// method when the revision has a different writing system applied to the verse text.
		/// </summary>
		/// Jira issue is TE-7726.
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_DifferentWritingSystem()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// create a paragraph with the Key word style for the current section
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			int ichMinCurr = paraBldr.Length;
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimCurr = paraBldr.Length;
			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			// create a paragraph with the Emphasis style for the rev section
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			int ichMinRev = paraBldr.Length;
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultAnalWs));
			int ichLimRev = paraBldr.Length;
			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Detect differences and verify that they are correct
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(DifferenceType.WritingSystemDifference, diff.DiffType);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(ichMinCurr, diff.IchMinCurr);
			Assert.AreEqual(ichLimCurr, diff.IchLimCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(ichMinRev, diff.IchMinRev);
			Assert.AreEqual(ichLimRev, diff.IchLimRev);
			Assert.AreEqual(Cache.ServiceLocator.WritingSystems.DefaultVernacularWritingSystem.DisplayLabel,
				diff.WsNameCurr);
			Assert.AreEqual(Cache.ServiceLocator.WritingSystems.DefaultAnalysisWritingSystem.DisplayLabel,
				diff.WsNameRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences
		/// method when the revision has a different character style and writing system applied
		/// to the verse text.
		/// Jira issue is TE-7726.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_DifferentWritingSystemAndCharacterStyle()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// create a paragraph with the Key word style for the current section
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			int ichMinCurr = paraBldr.Length;
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth.",
				StyleUtils.CharStyleTextProps("Key Word", Cache.DefaultVernWs));
			int ichLimCurr = paraBldr.Length;
			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			// create a paragraph with the Emphasis style for the rev section
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			int ichMinRev = paraBldr.Length;
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth.",
				StyleUtils.CharStyleTextProps("Emphasis", Cache.DefaultAnalWs));
			int ichLimRev = paraBldr.Length;
			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Detect differences and verify that they are correct
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(DifferenceType.CharStyleDifference | DifferenceType.WritingSystemDifference,
				diff.DiffType);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(ichMinCurr, diff.IchMinCurr);
			Assert.AreEqual(ichLimCurr, diff.IchLimCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(ichMinRev, diff.IchMinRev);
			Assert.AreEqual(ichLimRev, diff.IchLimRev);
			Assert.AreEqual("Key Word", diff.StyleNameCurr);
			Assert.AreEqual("Emphasis", diff.StyleNameRev);
			Assert.AreEqual(Cache.ServiceLocator.WritingSystems.DefaultVernacularWritingSystem.DisplayLabel,
				diff.WsNameCurr);
			Assert.AreEqual(Cache.ServiceLocator.WritingSystems.DefaultAnalysisWritingSystem.DisplayLabel,
				diff.WsNameRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the revision has
		/// white space before the start of the verse.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_KeepWhiteSpaceBeforeVerse()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// create a paragraph without the second verse for the current section
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichMinCurr = paraBldr.Length;
			int ichLimCurr = paraBldr.Length;
			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			// create a paragraph with verse two for the revision section
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichMinRev = paraBldr.Length - 1;
			int ichLimRev = paraBldr.Length;
			paraBldr.AppendRun("2",
				StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber, Cache.DefaultVernWs));
			paraBldr.AppendRun("This is verse two",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimRev2 = paraBldr.Length;
			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Detect differences and verify that they are correct
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(ichMinCurr, diff.IchMinCurr);
			Assert.AreEqual(ichLimCurr, diff.IchLimCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(ichMinRev, diff.IchMinRev);
			Assert.AreEqual(ichLimRev, diff.IchLimRev);

			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001002, diff.RefStart);
			Assert.AreEqual(DifferenceType.VerseMissingInCurrent, diff.DiffType);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(ichMinCurr, diff.IchMinCurr);
			Assert.AreEqual(ichLimCurr, diff.IchLimCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(ichLimRev, diff.IchMinRev);
			Assert.AreEqual(ichLimRev2, diff.IchLimRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the revision has
		/// verses deleted in the middle of a paragraph.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_DeletedVersesInMiddle()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichMinCurr = paraBldr.Length;
			paraBldr.AppendRun("2", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And the earth was formless and void... ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("3", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And God said, 'Let there be light...' ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimCurr = paraBldr.Length;
			paraBldr.AppendRun("4", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And there was light ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichEndV1Rev = paraBldr.Length;
			paraBldr.AppendRun("4", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And there was light ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001002, diff.RefStart);
			Assert.AreEqual(01001003, diff.RefEnd);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(ichMinCurr, diff.IchMinCurr);
			Assert.AreEqual(ichLimCurr, diff.IchLimCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(ichEndV1Rev, diff.IchMinRev);
			Assert.AreEqual(ichEndV1Rev, diff.IchLimRev);
			Assert.AreEqual(DifferenceType.VerseAddedToCurrent, diff.DiffType);
			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the revision has
		/// verses added in the middle of the text that are not in the current.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_AddedVersesInMiddleOfPara()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichEndV1Curr = paraBldr.Length;
			paraBldr.AppendRun("4", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And there was light ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichMinRev = paraBldr.Length;
			paraBldr.AppendRun("2", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And the earth was formless and void... ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("3", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And God said, 'Let there be light...' ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimRev = paraBldr.Length;
			paraBldr.AppendRun("4", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And there was light ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001002, diff.RefStart);
			Assert.AreEqual(01001003, diff.RefEnd);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(ichMinRev, diff.IchMinRev);
			Assert.AreEqual(ichLimRev, diff.IchLimRev);
			Assert.AreEqual(DifferenceType.VerseMissingInCurrent, diff.DiffType);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(ichEndV1Curr, diff.IchMinCurr);
			Assert.AreEqual(ichEndV1Curr, diff.IchLimCurr);
			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences
		/// method when two verses added in the revision span a paragraph break.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		[Ignore("TE-YYYY Verse missing difference should reference the second paragraph here. " +
			"The revert would put verse 3 at the end of the first para instead of the start " +
			"of the second para")]
		public void DetectDifferences_AddedVersesAcrossParagraphs()
		{
			// build current, verses 1 and 4
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 0, 1, "In the beginning, God created the heavens and the earth. ");
			int ichEndV1Curr = para1Curr.Contents.Length;
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 4, "And there was light ");

			// build revision, verses 1,2 and 3,4
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 0, 1, "In the beginning, God created the heavens and the earth. ");
			int ichMinRevV2 = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 2, "And the earth was formless and void... ");
			int ichLimRevV2 = para1Rev.Contents.Length;
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 3, "And God said, 'Let there be light...' ");
			int ichLimRevV3 = para2Rev.Contents.Length;
			AddVerse(para2Rev, 0, 4, "And there was light ");

			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis

			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, new BCVRef(01001002), DifferenceType.VerseMissingInCurrent,
				para1Curr, para1Curr.Contents.Length, para1Curr.Contents.Length,
				para1Rev, ichMinRevV2, ichLimRevV2);

// The diff is created as the end of the current first para for missing verse 3. It should
// be the second paragraph.
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff2, new BCVRef(01001003), DifferenceType.VerseMissingInCurrent,
				para2Curr,0, 0,
				para2Rev, 0, ichLimRevV3);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the revision has
		/// an added word that is missing in the current.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_WordAddedInVerse()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			// "the" is missing
			int ichMinCurr = paraBldr.Length + 3; // at the start of "beginning..."
			int ichLimCurr = ichMinCurr;
			paraBldr.AppendRun("In beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			int ichMinRev = paraBldr.Length + 3;	// at the start of "the beginning..."
			int ichLimRev = ichMinRev + 4;			// at the start of "beginning..."
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Detect differences and verify that they are correct
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(ichMinCurr, diff.IchMinCurr);
			Assert.AreEqual(ichLimCurr, diff.IchLimCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(ichMinRev, diff.IchMinRev);
			Assert.AreEqual(ichLimRev, diff.IchLimRev);
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the revision has
		/// a word that is repeated.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_WordRepeatedInVerse()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			// "the" is missing
			int ichMinCurr = paraBldr.Length + 22; // at the start of "created the..."
			int ichLimCurr = ichMinCurr;
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			int ichMinRev = paraBldr.Length + 22;	// at the start of "God God created..."
			int ichLimRev = ichMinRev + 8;			// at the start of "created..."
			paraBldr.AppendRun("In the beginning, God God God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Detect differences and verify that they are correct
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(ichMinCurr, diff.IchMinCurr);
			Assert.AreEqual(ichLimCurr, diff.IchLimCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(ichMinRev, diff.IchMinRev);
			Assert.AreEqual(ichLimRev, diff.IchLimRev);
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the revision has
		/// a character that is repeated.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_CharacterRepeatedInVerse()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("ABC",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("ABBC",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Detect differences and verify that they are correct
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(3, diff.IchMinCurr);
			Assert.AreEqual(3, diff.IchLimCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(3, diff.IchMinRev);
			Assert.AreEqual(4, diff.IchLimRev);
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the revision has
		/// a character that is repeated.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_CharacterRepeatedInVerse2()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("ABBC",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("ABC",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Detect differences and verify that they are correct
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(3, diff.IchMinCurr);
			Assert.AreEqual(4, diff.IchLimCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(3, diff.IchMinRev);
			Assert.AreEqual(3, diff.IchLimRev);
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the revision has
		/// a character that is repeated.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_CharacterRepeatedInVerse3()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("ABC ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("ABC  ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Detect differences and verify that they are correct
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(5, diff.IchMinCurr);
			Assert.AreEqual(5, diff.IchLimCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(5, diff.IchMinRev);
			Assert.AreEqual(6, diff.IchLimRev);
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when several verses have
		/// been deleted at the end of a paragraph (and section) in the revision.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_DeletedVersesAtEnd()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("2", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And the world was formless and void... ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("3", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And God said, 'Let there be light...' ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.CreateParagraph(sectionCur.ContentOA);

			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichEndV1Rev = paraBldr.Length;
			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001002, diff.RefStart);
			Assert.AreEqual(01001003, diff.RefEnd);
			Assert.AreEqual(DifferenceType.VerseAddedToCurrent, diff.DiffType);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(ichEndV1Rev, diff.IchMinRev);
			Assert.AreEqual(ichEndV1Rev, diff.IchLimRev);
			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}


		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the current book has
		/// a verse not in the revision, and the revision has an adjacent verse not in the
		/// current. And these are not at the end of a paragraph.
		/// This is a regression test for bug TE-2888</summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_ExclusiveVerses()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichEndV1Cur = paraBldr.Length;
			//note: verse 4, at the end of the para, will match in current and revision
			paraBldr.AppendRun("4", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And God saw that it was good... ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.CreateParagraph(sectionCur.ContentOA);

			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("2", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And the world was formless and void... ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("3", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And God said, 'Let there be light...' ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichEndV3Rev = paraBldr.Length;
			paraBldr.AppendRun("4", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And God saw that it was good... ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the diffs
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// verse 1 is missing in the revision
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefEnd);
			Assert.AreEqual(DifferenceType.VerseAddedToCurrent, diff.DiffType);
			Assert.AreEqual(sectionCur.ContentOA[0], diff.ParaCurr);
			Assert.AreEqual(sectionRev.ContentOA[0], diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(ichEndV1Cur, diff.IchLimCurr);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(0, diff.IchLimRev);

			// verses 2-3 are missing in current
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001002, diff.RefStart);
			Assert.AreEqual(01001003, diff.RefEnd);
			Assert.AreEqual(DifferenceType.VerseMissingInCurrent, diff.DiffType);
			Assert.AreEqual(sectionCur.ContentOA[0], diff.ParaCurr);
			Assert.AreEqual(sectionRev.ContentOA[0], diff.ParaRev);
			Assert.AreEqual(ichEndV1Cur, diff.IchMinCurr);
			Assert.AreEqual(ichEndV1Cur, diff.IchLimCurr);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(ichEndV3Rev, diff.IchLimRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the current book has
		/// a verse not in the revision, and the revision has an adjacent verse not in the
		/// current, both at the end of the verse iterator.
		/// This is a regression test for bug TE-2888</summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_ExclusiveVersesAtEnd()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichEndV1Cur = paraBldr.Length;
			paraBldr.AppendRun("2", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And the world was formless and void... ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichEndV2Cur = paraBldr.Length;
			paraBldr.CreateParagraph(sectionCur.ContentOA);

			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichEndV1Rev = paraBldr.Length;
			paraBldr.AppendRun("3", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And God said, 'Let there be light...' ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichEndV3Rev = paraBldr.Length;
			paraBldr.CreateParagraph(sectionRev.ContentOA);

			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis

			// Verify the diffs
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// verse 2 is missing in the revision
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001002, diff.RefStart);
			Assert.AreEqual(01001002, diff.RefEnd);
			Assert.AreEqual(DifferenceType.VerseAddedToCurrent, diff.DiffType);
			Assert.AreEqual(sectionCur.ContentOA[0], diff.ParaCurr);
			Assert.AreEqual(sectionRev.ContentOA[0], diff.ParaRev);
			Assert.AreEqual(ichEndV1Cur, diff.IchMinCurr);
			Assert.AreEqual(ichEndV2Cur, diff.IchLimCurr);
			Assert.AreEqual(ichEndV1Rev, diff.IchMinRev);
			Assert.AreEqual(ichEndV1Rev, diff.IchLimRev);

			// verse 3 is missing in current
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001003, diff.RefStart);
			Assert.AreEqual(01001003, diff.RefEnd);
			Assert.AreEqual(DifferenceType.VerseMissingInCurrent, diff.DiffType);
			Assert.AreEqual(sectionCur.ContentOA[0], diff.ParaCurr);
			Assert.AreEqual(sectionRev.ContentOA[0], diff.ParaRev);
			Assert.AreEqual(ichEndV2Cur, diff.IchMinCurr);
			Assert.AreEqual(ichEndV2Cur, diff.IchLimCurr);
			Assert.AreEqual(ichEndV1Rev, diff.IchMinRev);
			Assert.AreEqual(ichEndV3Rev, diff.IchLimRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the revision book has
		/// an additional verse at the beginning that is not in the current.
		/// This invokes the correlation of sections with "close" refs.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_AddedVerseAtBeginning_Close()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("2", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("Verse2",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("3", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("Verse3",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("Verse1",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichMinRev = paraBldr.Length;
			paraBldr.AppendRun("2", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("Verse2",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("3", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("Verse3",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// verify the differences found
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			// note: sections heads should be a match, even though they have different refs

			// verse 1 missing in current
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefEnd);
			Assert.AreEqual(DifferenceType.VerseMissingInCurrent, diff.DiffType);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(0, diff.IchLimCurr);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(7, diff.IchLimRev);
			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the revision has
		/// additional verses at the end of of a paragraph. In addition, the revision has
		/// additional paragraphs.
		/// This invokes the correlation of sections with "close" refs.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_AddedVerseAtEnd_AddedParasToo_Close()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// create Current, para 1
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichEndV1Curr = paraBldr.Length;
			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			// create Revision, para 1
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichMinRev = paraBldr.Length;
			paraBldr.AppendRun("2", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And the world was formless and void... ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("3", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And God said, 'Let there be light...' ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimRev = paraBldr.Length;
			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// create Revision, para 2
			paraBldr.AppendRun("4", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("Another added paragraph and verse",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimRevPara2 = paraBldr.Length;
			IScrTxtPara hvoRevPara2 = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// create Revision, para 3
			paraBldr.AppendRun("5", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And yet another added paragraph and verse",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimRevPara3 = paraBldr.Length;
			IScrTxtPara hvoRevPara3 = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// verify the differences found
			Assert.AreEqual(3, m_bookMerger.Differences.Count);

			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001002, diff.RefStart);
			Assert.AreEqual(01001003, diff.RefEnd);
			Assert.AreEqual(DifferenceType.VerseMissingInCurrent, diff.DiffType);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(ichEndV1Curr, diff.IchMinCurr);
			Assert.AreEqual(ichEndV1Curr, diff.IchLimCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(ichLimRev, diff.IchLimRev);
			Assert.AreEqual(ichMinRev, diff.IchMinRev);

			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001004, diff.RefStart);
			Assert.AreEqual(01001004, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff.DiffType);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(ichEndV1Curr, diff.IchMinCurr);
			Assert.AreEqual(ichEndV1Curr, diff.IchLimCurr);
			Assert.AreEqual(hvoRevPara2, diff.ParaRev);
			Assert.AreEqual(ichLimRevPara2, diff.IchLimRev);
			Assert.AreEqual(0, diff.IchMinRev);

			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001005, diff.RefStart);
			Assert.AreEqual(01001005, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff.DiffType);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(ichEndV1Curr, diff.IchMinCurr);
			Assert.AreEqual(ichEndV1Curr, diff.IchLimCurr);
			Assert.AreEqual(hvoRevPara3, diff.ParaRev);
			Assert.AreEqual(ichLimRevPara3, diff.IchLimRev);
			Assert.AreEqual(0, diff.IchMinRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the current book and
		/// the revision have multiple differences in the verse text.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_MultipleVerseTextDifferences()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God made the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("2", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("The earth was formless and void... ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("3", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And God said, 'Let there be brilliance...' ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("2", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And the world was formless and null... ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("3", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And God said, 'Let there be light...' ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefEnd);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);

			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001002, diff.RefStart);
			Assert.AreEqual(01001002, diff.RefEnd);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);

			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001003, diff.RefStart);
			Assert.AreEqual(01001003, diff.RefEnd);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the current book and
		/// the revision have multiple differences in different paragraphs.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_MultipleParagraphDifferences()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God made the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("2", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("The earth was formless and void... ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoCurr1 = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);
			paraBldr.AppendRun("3", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And God said, 'Let there be brilliance...' ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoCurr2 = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA, 1);

			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("2", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And the world was formless and null... ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoRev1 = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);
			paraBldr.AppendRun("3", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And God said, 'Let there be light...' ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoRev2 = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA, 1);

			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefEnd);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(hvoCurr1, diff.ParaCurr);
			Assert.AreEqual(hvoRev1, diff.ParaRev);

			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001002, diff.RefStart);
			Assert.AreEqual(01001002, diff.RefEnd);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(hvoCurr1, diff.ParaCurr);
			Assert.AreEqual(hvoRev1, diff.ParaRev);

			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001003, diff.RefStart);
			Assert.AreEqual(01001003, diff.RefEnd);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(hvoCurr2, diff.ParaCurr);
			Assert.AreEqual(hvoRev2, diff.ParaRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences
		/// method when the current book and the revision have multiple differences in different Sections.
		/// TE-6889 may change the expected results.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_MultipleSectionDifferences()
		{
			// Create data for the Current: two sections containing two paragraphs each.
			// Section 1, Para 1 Curr
			IScrSection section1Cur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara paraA1Curr = AddParaToMockedSectionContent(section1Cur, ScrStyleNames.NormalParagraph);
			AddVerse(paraA1Curr, 1, 0, "In the beginning, God made the heavens and the earth. ");
			int ichV2Cur = paraA1Curr.Contents.Length;
			AddVerse(paraA1Curr, 0, 2, "The earth was formless and void... ");
			// Section 1, Para 2 Curr
			IScrTxtPara paraA2Curr = AddParaToMockedSectionContent(section1Cur, ScrStyleNames.NormalParagraph);
			AddVerse(paraA2Curr, 0, 3, "And God said, 'Let there be light...' ");

			// Section 2, Para 1 Curr
			IScrSection section2Cur = CreateSection(m_genesis, "My aching behind!");
			IScrTxtPara paraB1Curr = AddParaToMockedSectionContent(section2Cur, ScrStyleNames.NormalParagraph);
			AddVerse(paraB1Curr, 0, "4-5", "And God saw the light, that it was good: " +
				"and God divided the light from the darkness. And God called the light Day, " +
				"and the darkness he called Night. And the evening and the morning were the first day. ");

			// Section 2, Para 2 Curr
			IScrTxtPara paraB2Curr = AddParaToMockedSectionContent(section2Cur, ScrStyleNames.NormalParagraph);
			AddVerse(paraB2Curr, 0, 6, "And God said, Let there be a firmament in the midst of the waters," +
				" and let it divide the waters from the waters. ");
			AddVerse(paraB2Curr, 0, 7, "And God made the firmament, and ");
			int ichTxtChgV7Curr = paraB2Curr.Contents.Length;
			AddVerse(paraB2Curr, 0, 0, "divided the waters which were under the firmament from the waters " +
				"which were above the firmament: and it was so. ");

			// Create data for the Revision: two sections containing two paragraphs each.
			// Section 1, Para 1 Rev
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara paraA1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(paraA1Rev, 1, 0, "In the beginning, God created the heavens and the earth. ");
			// Section 1, Para2 Rev
			IScrTxtPara paraA2Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(paraA2Rev, 0, 2, "And the world was formless and null... ");
			int ichV3Rev = paraA2Rev.Contents.Length;
			AddVerse(paraA2Rev, 0, 3, "And God said, 'Let there be light...' ");

			// Section 2, Para 1 Rev
			IScrSection section2Rev = CreateSection(m_genesisRevision, "My aching behind!");
			IScrTxtPara paraB1Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddVerse(paraB1Rev, 0, "4-5", "And God saw the brilliance, that it was awesome: and God " +
				"divided the light from the darkness. And God called the light Day, and the darkness " +
				"he called Night. And the evening and the morning were the first day. ");
			// Section 2, Para 2 Rev
			IScrTxtPara paraB2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddVerse(paraB2Rev, 0, 6, "And God said, Let there be a firmament in the midst of the waters, " +
				"and let it divide the waters from the waters. ");
			AddVerse(paraB2Rev, 0, 7, "And God made the firmament, and ");
			int ichTxtChgV7Rev = paraB2Rev.Contents.Length;
			AddVerse(paraB2Rev, 0, 0, "split the waters which were under the firmament from the waters " +
				"which were above the firmament: and it was so. ");

			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis

			Assert.AreEqual(6, m_bookMerger.Differences.Count);

			// a text difference in verse 1
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff, 01001001, DifferenceType.TextDifference, paraA1Curr, 23, 27,
				paraA1Rev, 23, 30);

			// verse 2 moved to para A1Curr
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff, 01001001, DifferenceType.ParagraphMergedInCurrent);
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.NoDifference,
				paraA1Curr, ichV2Cur, ichV2Cur,
				paraA1Rev, paraA1Rev.Contents.Length, paraA1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.NoDifference,
				null, 0, 0, paraA2Rev, 0, 0);

			// a text difference in verse 2
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, 01001002, DifferenceType.TextDifference,
				paraA1Curr, ichV2Cur + 1, paraA1Curr.Contents.Length - 4,
				paraA2Rev, 1, ichV3Rev - 4);

			// verse 3 split from verse 2
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff, 01001002, DifferenceType.ParagraphSplitInCurrent);
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.NoDifference,
				paraA1Curr, paraA1Curr.Contents.Length, paraA1Curr.Contents.Length,
				paraA2Rev, ichV3Rev, ichV3Rev);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.NoDifference,
				paraA2Curr, 0, 0, null, 0, 0);

			// verse 4-5 has text difference
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, 01001004, 01001005, DifferenceType.TextDifference,
				paraB1Curr, 19, 42, paraB1Rev, 19, 50);

			// verse 7 has a text difference
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, 01001007, DifferenceType.TextDifference,
				paraB2Curr, ichTxtChgV7Curr, ichTxtChgV7Curr + 7,
				paraB2Rev, ichTxtChgV7Rev, ichTxtChgV7Rev + 5);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the current book and
		/// the revision have verse bridges that are exteremly out of sync with each other.
		/// </summary>
		/// <remarks>Here is an outline of the data we will construct.
		///
		/// *********************** Current ******************************
		/// My aching head!
		///     1One. 2-3Two. Three. 4Four. 5-8Five. Six. Seven. Eight. 9Nine. 10Ten.
		///
		/// *********************** Revision ******************************
		/// My aching head!
		///     1One. 2-4Two. Three. Four. 5Five. 6-7Six. Seven. 8-9Eight. Nine. 10Ten.
		/// </remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_VerseBridgesComplexOverlap()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("One. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichMinV2Curr = paraBldr.Length;
			paraBldr.AppendRun("2-3", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("Two. Three. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("4", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("Four. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichEndV4Curr = paraBldr.Length;
			paraBldr.AppendRun("5-8", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("Five. Six. Seven. Eight. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("9", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("Nine. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichEndV9Curr = paraBldr.Length;
			paraBldr.AppendRun("10", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("Ten. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.CreateParagraph(sectionCur.ContentOA);

			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("One. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichMinV2Rev = paraBldr.Length;
			paraBldr.AppendRun("2-4", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("Two. Three. Four. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichEndV4Rev = paraBldr.Length;
			paraBldr.AppendRun("5", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("Five. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("6-7", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("Six. Seven. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("8-9", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("Eight. Nine. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichEndV9Rev = paraBldr.Length;
			paraBldr.AppendRun("10", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("Ten. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.CreateParagraph(sectionRev.ContentOA);

			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis

			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// Verify verse 2-4 text difference
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001002, diff.RefStart);
			Assert.AreEqual(01001004, diff.RefEnd);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(ichMinV2Curr, diff.IchMinCurr);
			Assert.AreEqual(ichEndV4Curr, diff.IchLimCurr);
			Assert.AreEqual(ichMinV2Rev, diff.IchMinRev);
			Assert.AreEqual(ichEndV4Rev, diff.IchLimRev);

			// Verify verse 5-9 text difference
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001005, diff.RefStart);
			Assert.AreEqual(01001009, diff.RefEnd);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(ichEndV4Curr, diff.IchMinCurr);
			Assert.AreEqual(ichEndV9Curr, diff.IchLimCurr);
			Assert.AreEqual(ichEndV4Rev, diff.IchMinRev);
			Assert.AreEqual(ichEndV9Rev, diff.IchLimRev);
		}
		}
		#endregion

		#region DetectDifferences in Footnotes
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences
		/// method when the current book and the revision are identical and both contain an equivalent footnote.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_IdenticalWithFootnote()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("2", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And the earth was formless and void... ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("3", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And God said, 'Let there be light...' ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			ITsStrBldr tsBldr = paraBldr.StringBuilder;
			IScrFootnote footnote = m_genesis.InsertFootnoteAt(0, tsBldr, tsBldr.Length);
			paraBldr.CreateParagraph(sectionCur.ContentOA);
			paraBldr.ParaStyleName = ScrStyleNames.NormalFootnoteParagraph;
			paraBldr.AppendRun("Footnote in book", StyleUtils.CharStyleTextProps(null,
				Cache.DefaultVernWs));
			paraBldr.CreateParagraph(footnote);

			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("2", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And the earth was formless and void... ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("3", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And God said, 'Let there be light...' ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			tsBldr = paraBldr.StringBuilder;
			// Footnote marker is not part of the comparison for footnotes, so difference in
			// markers should be ignored.
			footnote = m_genesis.InsertFootnoteAt(0, tsBldr, tsBldr.Length);
			paraBldr.CreateParagraph(sectionRev.ContentOA);
			paraBldr.ParaStyleName = ScrStyleNames.NormalFootnoteParagraph;
			paraBldr.AppendRun("Footnote in book", StyleUtils.CharStyleTextProps(null,
				Cache.DefaultVernWs));
			paraBldr.CreateParagraph(footnote);

			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}

		#region Detect Differences with missing and added footnotes
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test DetectDifferences when a footnote is missing in the current
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_FootnoteMissingInCurrent()
		{
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara paraCur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraCur, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(paraCur, "Hello.", Cache.DefaultVernWs);

			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara paraRev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraRev, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(paraRev, "Hello.", Cache.DefaultVernWs);
			int footnotePos = 1;
			string footnoteText = "Footnote in Book";
			IScrFootnote footnote1 = AddFootnote(m_genesisRevision, paraRev, footnotePos, footnoteText);

			// find the diffs
			m_bookMerger.DetectDifferences(null);

			// verify the differences
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefEnd);
			Assert.AreEqual(DifferenceType.FootnoteMissingInCurrent, diff.DiffType);
			Assert.AreEqual(paraCur, diff.ParaCurr);
			Assert.AreEqual(footnotePos, diff.IchMinCurr);
			Assert.AreEqual(footnotePos, diff.IchLimCurr);
			Assert.AreEqual(paraRev, diff.ParaRev);
			Assert.AreEqual(footnotePos, diff.IchMinRev);
			Assert.AreEqual(footnotePos + 1, diff.IchLimRev);

			Assert.AreEqual(1, diff.SubDiffsForORCs.Count, "One footnote 'added' to the revision");
			Difference footnoteDiff = diff.SubDiffsForORCs[0];
			Assert.AreEqual(DifferenceType.NoDifference, footnoteDiff.DiffType);
			Assert.AreEqual(null, footnoteDiff.ParaCurr);
			Assert.AreEqual(0, footnoteDiff.IchMinCurr);
			Assert.AreEqual(0, footnoteDiff.IchLimCurr);
			Assert.AreEqual(footnote1[0], footnoteDiff.ParaRev);
			Assert.AreEqual(0, footnoteDiff.IchMinRev);
			Assert.AreEqual(footnoteText.Length, footnoteDiff.IchLimRev);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when a footnote is
		/// missing in the current, and the footnote in the revision is at the end of a
		/// the book.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_FootnoteAtEndOfRevision()
		{
			// setup current
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara paraCur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraCur, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(paraCur, "ABCDEF", Cache.DefaultVernWs);

			// setup revision
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara paraRev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraRev, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(paraRev, "ABCDEF", Cache.DefaultVernWs);
			IScrFootnote footnote1 = AddFootnote(m_genesisRevision, paraRev, 7, "Footnote");

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// verify the diffs
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefEnd);
			Assert.AreEqual(DifferenceType.FootnoteMissingInCurrent, diff.DiffType);

			Assert.AreEqual(paraCur, diff.ParaCurr);
			Assert.AreEqual(7, diff.IchMinCurr);
			Assert.AreEqual(7, diff.IchLimCurr);
			Assert.AreEqual(paraRev, diff.ParaRev);
			Assert.AreEqual(7, diff.IchMinRev);
			Assert.AreEqual(8, diff.IchLimRev);

			Assert.AreEqual(1, diff.SubDiffsForORCs.Count, "One footnote 'added' to the revision");
			Difference footnoteDiff = diff.SubDiffsForORCs[0];
			Assert.AreEqual(DifferenceType.NoDifference, footnoteDiff.DiffType);
			Assert.AreEqual(null, footnoteDiff.ParaCurr); //no info for Curr
			Assert.AreEqual(footnote1[0], footnoteDiff.ParaRev);
			Assert.AreEqual(0, footnoteDiff.IchMinRev);
			Assert.AreEqual(8, footnoteDiff.IchLimRev);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test DetectDifferences when a footnote is added to the current
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_FootnoteAddedToCurrent()
		{
			// create Current section
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara paraCur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraCur, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(paraCur, "Hello.", Cache.DefaultVernWs);
			int footnotePos = 1;
			string footnoteText = "Footnote in Book";
			IScrFootnote footnote1 = AddFootnote(m_genesis, paraCur, footnotePos, footnoteText);

			// create Revision section
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara paraRev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraRev, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(paraRev, "Hello.", Cache.DefaultVernWs);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// verify the differences
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff, 01001001, DifferenceType.FootnoteAddedToCurrent,
				paraCur, footnotePos, footnotePos + 1,
				paraRev, footnotePos, footnotePos);

			Assert.AreEqual(1, diff.SubDiffsForORCs.Count, "One footnote 'added' to the current");
			Difference subDiff = diff.SubDiffsForORCs[0];
			Assert.AreEqual(DifferenceType.NoDifference, subDiff.DiffType);
			Assert.AreEqual(footnote1[0], subDiff.ParaCurr);
			Assert.AreEqual(0, subDiff.IchMinCurr);
			Assert.AreEqual(footnoteText.Length, subDiff.IchLimCurr);
			Assert.AreEqual(null, subDiff.ParaRev);
			Assert.AreEqual(0, subDiff.IchMinRev);
			Assert.AreEqual(0, subDiff.IchLimRev);
			//DiffTestHelper.DiffTestHelper.VerifySubDiffFootnoteCurr(diff, subDiff,
			//    footnote1[0], 0, footnoteText.Length);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the revision book
		/// has no footnotes, but the current has four added.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_FootnoteMultipleAddedInCurrent()
		{
			// setup current
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara paraCur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraCur, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(paraCur, "ABCDEF", Cache.DefaultVernWs);
			IScrFootnote footnote1 = AddFootnote(m_genesis, paraCur, 3, "Footnote A");
			IScrFootnote footnote2 = AddFootnote(m_genesis, paraCur, 5, "Footnote B");
			IScrFootnote footnote3 = AddFootnote(m_genesis, paraCur, 7, "Footnote C");
			IScrFootnote footnote4 = AddFootnote(m_genesis, paraCur, 8, "Footnote D");

			// setup revision
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara paraRev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraRev, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(paraRev, "ABCDEF", Cache.DefaultVernWs);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// verify the diffs
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefEnd);
			Assert.AreEqual(DifferenceType.FootnoteAddedToCurrent | DifferenceType.TextDifference, diff.DiffType);

			Assert.AreEqual(paraCur, diff.ParaCurr);
			Assert.AreEqual(3, diff.IchMinCurr);
			Assert.AreEqual(9, diff.IchLimCurr);
			Assert.AreEqual(paraRev, diff.ParaRev);
			Assert.AreEqual(3, diff.IchMinRev);
			Assert.AreEqual(5, diff.IchLimRev);

			Assert.AreEqual(4, diff.SubDiffsForORCs.Count, "Four footnotes 'added' to the current");

			// We expect the subdiffs to be in the same order as the footnotes they represent.
			Difference footnoteDiff = diff.SubDiffsForORCs[0];
			Assert.AreEqual(DifferenceType.NoDifference, footnoteDiff.DiffType);
			Assert.AreEqual(footnote1[0], footnoteDiff.ParaCurr);
			Assert.AreEqual(0, footnoteDiff.IchMinCurr);
			Assert.AreEqual(10, footnoteDiff.IchLimCurr);
			Assert.AreEqual(null, footnoteDiff.ParaRev);

			footnoteDiff = diff.SubDiffsForORCs[1];
			Assert.AreEqual(DifferenceType.NoDifference, footnoteDiff.DiffType);
			Assert.AreEqual(footnote2[0], footnoteDiff.ParaCurr);
			Assert.AreEqual(0, footnoteDiff.IchMinCurr);
			Assert.AreEqual(10, footnoteDiff.IchLimCurr);
			Assert.AreEqual(null, footnoteDiff.ParaRev);

			footnoteDiff = diff.SubDiffsForORCs[2];
			Assert.AreEqual(DifferenceType.NoDifference, footnoteDiff.DiffType);
			Assert.AreEqual(footnote3[0], footnoteDiff.ParaCurr);

			footnoteDiff = diff.SubDiffsForORCs[3];
			Assert.AreEqual(DifferenceType.NoDifference, footnoteDiff.DiffType);
			Assert.AreEqual(footnote4[0], footnoteDiff.ParaCurr);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the revision book
		/// has no footnotes, but the current has four added.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_Footnote_MultipleOnCurrent_OnePair()
		{
			// setup current
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara paraCur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraCur, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(paraCur, "ABCDEF", Cache.DefaultVernWs);
			IScrFootnote footnote1 = AddFootnote(m_genesis, paraCur, 3, "Footnote A");
			IScrFootnote footnote2 = AddFootnote(m_genesis, paraCur, 5, "Footnote B");
			IScrFootnote footnote3 = AddFootnote(m_genesis, paraCur, 7, "Footnote C");
			IScrFootnote footnote4 = AddFootnote(m_genesis, paraCur, 8, "Footnote D");

			// setup revision
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara paraRev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraRev, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(paraRev, "ABCDEF", Cache.DefaultVernWs);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// verify the diffs
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefEnd);
			Assert.AreEqual(DifferenceType.FootnoteAddedToCurrent | DifferenceType.TextDifference, diff.DiffType);

			Assert.AreEqual(paraCur, diff.ParaCurr);
			Assert.AreEqual(3, diff.IchMinCurr);
			Assert.AreEqual(9, diff.IchLimCurr);
			Assert.AreEqual(paraRev, diff.ParaRev);
			Assert.AreEqual(3, diff.IchMinRev);
			Assert.AreEqual(5, diff.IchLimRev);

			Assert.AreEqual(4, diff.SubDiffsForORCs.Count, "Four footnotes 'added' to the current");

			// We expect the subdiffs to be in the same order as the footnotes they represent.
			Difference footnoteDiff = diff.SubDiffsForORCs[0];
			Assert.AreEqual(DifferenceType.NoDifference, footnoteDiff.DiffType);
			Assert.AreEqual(footnote1[0], footnoteDiff.ParaCurr);
			Assert.AreEqual(0, footnoteDiff.IchMinCurr);
			Assert.AreEqual(10, footnoteDiff.IchLimCurr);
			Assert.AreEqual(null, footnoteDiff.ParaRev);

			footnoteDiff = diff.SubDiffsForORCs[1];
			Assert.AreEqual(DifferenceType.NoDifference, footnoteDiff.DiffType);
			Assert.AreEqual(footnote2[0], footnoteDiff.ParaCurr);
			Assert.AreEqual(0, footnoteDiff.IchMinCurr);
			Assert.AreEqual(10, footnoteDiff.IchLimCurr);
			Assert.AreEqual(null, footnoteDiff.ParaRev);

			footnoteDiff = diff.SubDiffsForORCs[2];
			Assert.AreEqual(DifferenceType.NoDifference, footnoteDiff.DiffType);
			Assert.AreEqual(footnote3[0], footnoteDiff.ParaCurr);

			footnoteDiff = diff.SubDiffsForORCs[3];
			Assert.AreEqual(DifferenceType.NoDifference, footnoteDiff.DiffType);
			Assert.AreEqual(footnote4[0], footnoteDiff.ParaCurr);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the revision and
		/// current book have footnotes in two different places of the last verse.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_FootnoteMovedToDifferentIch()
		{
			// setup revision
			IStText revTitle = AddTitleToMockedBook(m_genesisRevision, "Genesis");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara paraRev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraRev, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(paraRev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(paraRev, "ABC DEF", Cache.DefaultVernWs);
			IScrFootnote footnote = AddFootnote(m_genesisRevision, paraRev, 5, "footnote");

			// setup current
			IStText curTitle = AddTitleToMockedBook(m_genesis, "Genesis");
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara paraCur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraCur, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(paraCur, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(paraCur, "ABC DEF", Cache.DefaultVernWs);
			IScrFootnote newFootnote = AddFootnote(m_genesis, paraCur, 9, "footnote");

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			m_bookMerger.ReplaceCurrentWithRevision(diff);

			// TE-3371: Orphan footnote was created with this scenario.
			// Verify that there is only one footnote remaining in current.
			Assert.AreEqual(1, m_genesis.FootnotesOS.Count);

			// verify the diffs existance
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefEnd);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);

			// verify the diff references
			Assert.AreEqual(paraCur, diff.ParaCurr);
			Assert.AreEqual(5, diff.IchMinCurr);
			Assert.AreEqual(10, diff.IchLimCurr);
			Assert.AreEqual(paraRev, diff.ParaRev);
			Assert.AreEqual(5, diff.IchMinRev);
			Assert.AreEqual(10, diff.IchLimRev);

			Assert.AreEqual(2, diff.SubDiffsForORCs.Count, "One footnote added to, and another removed from, current");
			//TODO: Verify subdiff details
		}
		#endregion

		#region Detect Differences Within Footnotes
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the current book and
		/// the revision have different text in a footnote.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_FootnoteTextDifference()
		{
			string paraText = "In the beginning, God created the heavens and the earth. ";

			// setup current
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara paraCur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraCur, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(paraCur, paraText, Cache.DefaultVernWs);
			int footnotePos = paraCur.Contents.Length;
			IScrFootnote footnote1 = AddFootnote(m_genesis, paraCur, footnotePos, "Footnote in Book");

			// setup revision
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara paraRev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraRev, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(paraRev, paraText, Cache.DefaultVernWs);
			IScrFootnote footnote2 = AddFootnote(m_genesisRevision, paraRev, footnotePos, "Footnote in revision");

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// verify the differences
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefEnd);
			Assert.AreEqual(DifferenceType.FootnoteDifference, diff.DiffType);
			Assert.AreEqual(paraCur, diff.ParaCurr);
			Assert.AreEqual(footnotePos, diff.IchMinCurr);
			Assert.AreEqual(footnotePos + 1, diff.IchLimCurr);
			Assert.AreEqual(paraRev, diff.ParaRev);
			Assert.AreEqual(footnotePos, diff.IchMinRev);
			Assert.AreEqual(footnotePos + 1, diff.IchLimRev);

			Assert.AreEqual(1, diff.SubDiffsForORCs.Count, "Should have one object difference");
			Difference footnoteDiff = diff.SubDiffsForORCs[0];
			Assert.AreEqual(DifferenceType.TextDifference, footnoteDiff.DiffType);
			Assert.AreEqual(footnote1[0], footnoteDiff.ParaCurr);
			Assert.AreEqual(12, footnoteDiff.IchMinCurr);
			Assert.AreEqual(16, footnoteDiff.IchLimCurr);
			Assert.AreEqual(footnote2[0], footnoteDiff.ParaRev);
			Assert.AreEqual(12, footnoteDiff.IchMinRev);
			Assert.AreEqual(20, footnoteDiff.IchLimRev);
		}

		//TODO:
		///// ------------------------------------------------------------------------------------
		///// <summary>
		///// Test the BookMerger.DetectDifferences method when the current book and
		///// the revision have a different char style in a footnote.
		///// </summary>
		///// ------------------------------------------------------------------------------------
		//[Test]
		//public void DetectDifferences_FootnoteCharStyleDifference()

		#endregion

		#region Detect Differences Where Footnote ORCs Are Adjacent To Other Diffs
		//		/// ------------------------------------------------------------------------------------
//		/// <summary>
//		/// Test the BookMerger.DetectDifferences method when the current book has
//		/// a footnote and the revision has a picture (what are the odds of that?).
//		/// </summary>
//		/// ------------------------------------------------------------------------------------
//		[Test]
//		public void DetectDifferences_FootnoteVsPictureDifference()
//		{
//			CheckDisposed();
//
//			// Create a section for both the current version of Genesis and the stored revision.
//			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
//			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
//
//			// setup current
//			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
//			{
//			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
//			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
//				Cache.DefaultVernWs));
//			paraBldr.AppendRun("ABC",
//				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
//
//			ITsStrBldr tsBldr = paraBldr.StringBuilder;
//			IScrFootnote footnote = ScrFootnote.InsertFootnoteAt(m_genesis, 0, tsBldr, tsBldr.Length, "a", false);
//
//			paraBldr.AppendRun("DEF",
//				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
//
//			IScrTxtPara paraCur = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);
//
//			paraBldr.ParaStyleName = ScrStyleNames.NormalFootnoteParagraph;
//			paraBldr.AppendRun("Footnote", StyleUtils.CharStyleTextProps(null,
//				Cache.DefaultVernWs));
//			paraBldr.CreateParagraph(footnote);
//			int hvoFootnoteParaCur = footnote[0];
//
//			// setup revision
//			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
//			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
//				Cache.DefaultVernWs));
//			paraBldr.AppendRun("ABC",
//				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
//
//			string internalPath = null;
//			try
//			{
//				using (DummyFileMaker filemaker = new DummyFileMaker("junk.jpg", true))
//				{
//					CmPicture pict = new CmPicture(Cache, filemaker.Filename, "Test picture",
//						StringUtils.LocalPictures);
//					Assert.IsNotNull(pict);
//					internalPath = pict.PictureFileRA.AbsoluteInternalPath;
//
//					pict.AppendPicture(Cache.DefaultVernWs, paraBldr.StringBuilder);
//
//					paraBldr.AppendRun("DEF",
//						StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
//
//					IScrTxtPara paraRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);
//
//
//					m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
//
//					Difference diff = m_bookMerger.Differences.MoveNext();
//					Assert.IsNotNull(diff, "Should have one diff");
//					Assert.AreEqual(01001001, diff.RefStart);
//					Assert.AreEqual(01001001, diff.RefEnd);
//					// TODO: Difference should also include PictureMissingInCurrent
//					Assert.AreEqual(DifferenceType.FootnoteAddedToCurrent, diff.DiffType);
//
//					Assert.AreEqual(paraCur, diff.ParaCurr);
//					Assert.AreEqual(4, diff.IchMinCurr);
//					Assert.AreEqual(5, diff.IchLimCurr);
//					Assert.AreEqual(paraRev, diff.ParaRev);
//					Assert.AreEqual(4, diff.IchMinRev);
//					Assert.AreEqual(5, diff.IchLimRev);
//
//					// TODO: Also should have a subdiff for the picture
//					Assert.AreEqual(1, diff.SubDifferences.Count, "Should have one object difference (just the footnote for now)");
//					Difference footnoteDiff = diff.SubDifferences[0];
//					Assert.AreEqual(DifferenceType.NoDifference, footnoteDiff.DiffType);
//					Assert.AreEqual(hvoFootnoteParaCur, footnoteDiff.ParaCurr);
//					Assert.AreEqual(0, footnoteDiff.IchMinCurr);
//					Assert.AreEqual(8, footnoteDiff.IchLimCurr);
//					Assert.AreEqual(null, footnoteDiff.ParaRev);
//
//					Assert.IsNull(m_bookMerger.Differences.MoveNext(), "Should only have one diff");
//				}
//			}
//			}
//			catch (FileNotFoundException)
//			{
//			}
//			finally
//			{
//				if (internalPath != null)
//					File.Delete(internalPath);
//			}
//		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the current book and
		/// the revision both have footnotes, located between two character style differences.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_FootnoteBetweenTwoCharStyleDifferences()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// setup current
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("ABC",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));

			ITsStrBldr tsBldr = paraBldr.StringBuilder;
			IScrFootnote footnote = m_genesis.InsertFootnoteAt(0, tsBldr, tsBldr.Length);

			paraBldr.AppendRun("DEF",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));

			IScrTxtPara paraCur = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			paraBldr.ParaStyleName = ScrStyleNames.NormalFootnoteParagraph;
			paraBldr.AppendRun("Footnote", StyleUtils.CharStyleTextProps(null,
				Cache.DefaultVernWs));
			paraBldr.CreateParagraph(footnote);
			IScrTxtPara footnoteParaCur = (IScrTxtPara)footnote[0];

			// setup revision
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("ABC",
				StyleUtils.CharStyleTextProps("Key Word", Cache.DefaultVernWs));

			tsBldr = paraBldr.StringBuilder;
			footnote = m_genesisRevision.InsertFootnoteAt(0, tsBldr, tsBldr.Length);

			paraBldr.AppendRun("DEF",
				StyleUtils.CharStyleTextProps("Key Word", Cache.DefaultVernWs));

			IScrTxtPara paraRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			paraBldr.ParaStyleName = ScrStyleNames.NormalFootnoteParagraph;
			paraBldr.AppendRun("Footnote", StyleUtils.CharStyleTextProps(null,
				Cache.DefaultVernWs));
			paraBldr.CreateParagraph(footnote);
			IScrTxtPara footnoteParaRev = (IScrTxtPara)footnote[0];

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// verify the diffs
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.IsNotNull(diff, "Should have one diff");

			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefEnd);
			Assert.AreEqual(DifferenceType.MultipleCharStyleDifferences, diff.DiffType);
			Assert.AreEqual(paraCur, diff.ParaCurr);
			Assert.AreEqual(1, diff.IchMinCurr);
			Assert.AreEqual(8, diff.IchLimCurr);
			Assert.AreEqual(paraRev, diff.ParaRev);
			Assert.AreEqual(1, diff.IchMinRev);
			Assert.AreEqual(8, diff.IchLimRev);

			Assert.AreEqual(2, diff.SubDiffsForORCs.Count, "One footnote 'added', and one 'removed' (even though they look the same to the untrained eye)");
			Difference footnoteDiff = diff.SubDiffsForORCs[0];
			Assert.AreEqual(DifferenceType.NoDifference, footnoteDiff.DiffType);
			Assert.AreEqual(footnoteParaCur, footnoteDiff.ParaCurr);
			Assert.AreEqual(0, footnoteDiff.IchMinCurr);
			Assert.AreEqual(8, footnoteDiff.IchLimCurr);
			Assert.AreEqual(null, footnoteDiff.ParaRev);

			footnoteDiff = diff.SubDiffsForORCs[1];
			Assert.AreEqual(DifferenceType.NoDifference, footnoteDiff.DiffType);
			Assert.AreEqual(null, footnoteDiff.ParaCurr);
			Assert.AreEqual(footnoteParaRev, footnoteDiff.ParaRev);
			Assert.AreEqual(0, footnoteDiff.IchMinRev);
			Assert.AreEqual(8, footnoteDiff.IchLimRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext(), "Should only have one diff");
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the current book has
		/// a footnote, located between a character style difference and a text difference.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_FootnoteBetweenCharStyleDifferenceAndTextDifference()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// setup current
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("AB",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("CDQF",
				StyleUtils.CharStyleTextProps("Key Word", Cache.DefaultVernWs));


			// Insert a footnote between the C & D
			ITsStrBldr tsBldr = paraBldr.StringBuilder;
			IScrFootnote footnote = m_genesis.InsertFootnoteAt(0, tsBldr, 4);
			IScrTxtPara paraCur = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);
			paraBldr.ParaStyleName = ScrStyleNames.NormalFootnoteParagraph;
			paraBldr.AppendRun("Footnote", StyleUtils.CharStyleTextProps(null,
				Cache.DefaultVernWs));
			paraBldr.CreateParagraph(footnote);
			IScrTxtPara footnoteParaCur = (IScrTxtPara) footnote[0];


			// setup revision
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("ABCDEF",
				StyleUtils.CharStyleTextProps("Key Word", Cache.DefaultVernWs));
			IScrTxtPara paraRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// verify the diffs
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.IsNotNull(diff, "Should have one diff");

			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefEnd);
			Assert.AreEqual(DifferenceType.CharStyleDifference | DifferenceType.TextDifference |
				DifferenceType.FootnoteAddedToCurrent, diff.DiffType);
			Assert.AreEqual(paraCur, diff.ParaCurr);
			Assert.AreEqual(1, diff.IchMinCurr);
			Assert.AreEqual(7, diff.IchLimCurr);
			Assert.AreEqual(paraRev, diff.ParaRev);
			Assert.AreEqual(1, diff.IchMinRev);
			Assert.AreEqual(6, diff.IchLimRev);

			Assert.AreEqual(1, diff.SubDiffsForORCs.Count, "One footnote 'added'");
			Difference footnoteDiff = diff.SubDiffsForORCs[0];
			Assert.AreEqual(DifferenceType.NoDifference, footnoteDiff.DiffType);
			Assert.AreEqual(footnoteParaCur, footnoteDiff.ParaCurr);
			Assert.AreEqual(0, footnoteDiff.IchMinCurr);
			Assert.AreEqual(8, footnoteDiff.IchLimCurr);
			Assert.AreEqual(null, footnoteDiff.ParaRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext(), "Should only have one diff");
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the current book has
		/// a footnote, located between a text difference and a character style difference.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_FootnoteBetweenTextDifferenceAndCharStyleDifference()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// setup current
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("AWCD",
				StyleUtils.CharStyleTextProps("Key Word", Cache.DefaultVernWs));
			paraBldr.AppendRun("EF",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));

			// Insert a footnote After the verse number
			ITsStrBldr tsBldr = paraBldr.StringBuilder;
			IScrFootnote footnoteCurA = m_genesis.InsertFootnoteAt(0, tsBldr, 1);
			// Insert a footnote between the C & D
			IScrFootnote footnoteCurB = m_genesis.InsertFootnoteAt(0, tsBldr, 5);
			IScrTxtPara paraCur = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			paraBldr.ParaStyleName = ScrStyleNames.NormalFootnoteParagraph;
			paraBldr.AppendRun("Unchanged Footnote", StyleUtils.CharStyleTextProps(null,
				Cache.DefaultVernWs));
			paraBldr.CreateParagraph(footnoteCurA);
			paraBldr.AppendRun("Footnote", StyleUtils.CharStyleTextProps(null,
				Cache.DefaultVernWs));
			paraBldr.CreateParagraph(footnoteCurB);
			IScrTxtPara footnoteParaCur = (IScrTxtPara)footnoteCurB[0];


			// setup revision
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("ABCDEF",
				StyleUtils.CharStyleTextProps("Key Word", Cache.DefaultVernWs));

			// Insert a footnote After the verse number
			tsBldr = paraBldr.StringBuilder;
			IScrFootnote footnoteRevA = m_genesis.InsertFootnoteAt(0, tsBldr, 1);
			// Insert a footnote between the C & D
			IScrFootnote footnoteRevB = m_genesis.InsertFootnoteAt(0, tsBldr, 5);
			IScrTxtPara paraRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			paraBldr.ParaStyleName = ScrStyleNames.NormalFootnoteParagraph;
			paraBldr.AppendRun("Unchanged Footnote", StyleUtils.CharStyleTextProps(null,
				Cache.DefaultVernWs));
			paraBldr.CreateParagraph(footnoteRevA);
			paraBldr.AppendRun("Footnote", StyleUtils.CharStyleTextProps(null,
				Cache.DefaultVernWs));
			paraBldr.CreateParagraph(footnoteRevB);
			IScrTxtPara footnoteParaRev = (IScrTxtPara)footnoteRevB[0];


			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// verify the diffs
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.IsNotNull(diff, "Should have one diff");
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefEnd);
			Assert.AreEqual(DifferenceType.CharStyleDifference | DifferenceType.TextDifference, diff.DiffType);

			Assert.AreEqual(paraCur, diff.ParaCurr);
			Assert.AreEqual(3, diff.IchMinCurr);
			Assert.AreEqual(9, diff.IchLimCurr);
			Assert.AreEqual(paraRev, diff.ParaRev);
			Assert.AreEqual(3, diff.IchMinRev);
			Assert.AreEqual(9, diff.IchLimRev);

			Assert.AreEqual(2, diff.SubDiffsForORCs.Count, "One footnote 'added' and one 'removed'");
			Difference footnoteDiff = diff.SubDiffsForORCs[0];
			Assert.AreEqual(DifferenceType.NoDifference, footnoteDiff.DiffType);
			Assert.AreEqual(footnoteParaCur, footnoteDiff.ParaCurr);
			Assert.AreEqual(0, footnoteDiff.IchMinCurr);
			Assert.AreEqual(8, footnoteDiff.IchLimCurr);
			Assert.AreEqual(null, footnoteDiff.ParaRev);

			footnoteDiff = diff.SubDiffsForORCs[1];
			Assert.AreEqual(DifferenceType.NoDifference, footnoteDiff.DiffType);
			Assert.AreEqual(null, footnoteDiff.ParaCurr);
			Assert.AreEqual(footnoteParaRev, footnoteDiff.ParaRev);
			Assert.AreEqual(0, footnoteDiff.IchMinRev);
			Assert.AreEqual(8, footnoteDiff.IchLimRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext(), "Should only have one diff");
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when a character is
		/// added in a verse that has footnotes.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_Footnote_CharacterAddedInVerse()
		{
			// setup current
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara paraCur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraCur, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(paraCur, "ABCDE", Cache.DefaultVernWs);
			IScrFootnote footnote1 = AddFootnote(m_genesis, paraCur, 1, "FootnoteA");
			IScrFootnote footnote2 = AddFootnote(m_genesis, paraCur, 2, "FootnoteB");

			// setup revision
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara paraRev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraRev, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(paraRev, "ABCQDE", Cache.DefaultVernWs);
			IScrFootnote footnote3 = AddFootnote(m_genesisRevision, paraRev, 1, "FootnoteA");
			IScrFootnote footnote4 = AddFootnote(m_genesisRevision, paraRev, 2, "FootnoteB");

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the diffs
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefEnd);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);

			Assert.AreEqual(paraCur, diff.ParaCurr);
			Assert.AreEqual(6, diff.IchMinCurr);
			Assert.AreEqual(6, diff.IchLimCurr);
			Assert.AreEqual(paraRev, diff.ParaRev);
			Assert.AreEqual(6, diff.IchMinRev);
			Assert.AreEqual(7, diff.IchLimRev);

			Assert.AreEqual(0, diff.SubDiffsForORCs.Count, "Should be no footnote sub-diffs");
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the current has an
		/// added footnote, followed by a character style difference.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_FootnoteAndCharStyleDifference()
		{
			// setup current
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara paraCur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraCur, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(paraCur, "ABCD", Cache.DefaultVernWs);
			AddRunToMockedPara(paraCur, "EFG", "Emphasis");
			AddRunToMockedPara(paraCur, "H", Cache.DefaultVernWs);
			IScrFootnote footnote1 = AddFootnote(m_genesis, paraCur, 4, "Footnote");

			// setup revision
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara paraRev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraRev, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(paraRev, "ABCDEFGH", Cache.DefaultVernWs);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// verify the diffs
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefEnd);
			Assert.AreEqual(DifferenceType.FootnoteAddedToCurrent | DifferenceType.CharStyleDifference,
				diff.DiffType);

			Assert.AreEqual(paraCur, diff.ParaCurr);
			Assert.AreEqual(4, diff.IchMinCurr);
			Assert.AreEqual(9, diff.IchLimCurr);
			Assert.AreEqual(paraRev, diff.ParaRev);
			Assert.AreEqual(4, diff.IchMinRev);
			Assert.AreEqual(8, diff.IchLimRev);
			Assert.AreEqual("Emphasis", diff.StyleNameCurr);
			Assert.AreEqual("Default Paragraph Characters", diff.StyleNameRev);

			Assert.AreEqual(1, diff.SubDiffsForORCs.Count, "One footnote 'added' to the current");
			Difference footnoteDiff = diff.SubDiffsForORCs[0];
			Assert.AreEqual(DifferenceType.NoDifference, footnoteDiff.DiffType);
			Assert.AreEqual(footnote1[0], footnoteDiff.ParaCurr);
			Assert.AreEqual(0, footnoteDiff.IchMinCurr);
			Assert.AreEqual(8, footnoteDiff.IchLimCurr);
			Assert.AreEqual(null, footnoteDiff.ParaRev);
		}
		#endregion
		#endregion

		#region DetectDifferences: Styles
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the currrent and
		/// revision both have a character style run that is sandwiched between text differences.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_TextDifferenceInVerseWithEmbeddedIdenticalCharacterStyle()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// create a paragraph with the Key word style for the current section
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("ABC",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("DEF",
				StyleUtils.CharStyleTextProps("Key Word", Cache.DefaultVernWs));
			paraBldr.AppendRun("GHI",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			// create a paragraph with the Emphasis style for the rev section
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("AZZZC",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("DEF",
				StyleUtils.CharStyleTextProps("Key Word", Cache.DefaultVernWs));
			paraBldr.AppendRun("GYYYI",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Detect differences and verify that they are correct
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(2, diff.IchMinCurr);
			Assert.AreEqual(9, diff.IchLimCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(2, diff.IchMinRev);
			Assert.AreEqual(13, diff.IchLimRev);
			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the revision has
		/// a different character style than the current.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_TextRemovedAtBeginningOfVerse()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// create a paragraph with the Key word style for the current section
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("CD",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("X",
				StyleUtils.CharStyleTextProps("Key Word", Cache.DefaultVernWs));
			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			// create a paragraph with the Emphasis style for the rev section
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("ABCD",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("X",
				StyleUtils.CharStyleTextProps("Key Word", Cache.DefaultVernWs));
			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Detect differences and verify that they are correct
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(1, diff.IchMinCurr);
			Assert.AreEqual(1, diff.IchLimCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(1, diff.IchMinRev);
			Assert.AreEqual(3, diff.IchLimRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the revision has
		/// a character style run that extends longer than the style run in the current.
		/// Jira number is TE-2991.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_CharStyleRunLengthDifference()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// create a paragraph with the Key word style for the current section
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("heavens",
				StyleUtils.CharStyleTextProps("Key Word", Cache.DefaultVernWs));
			int ichMinCurr = paraBldr.Length;
			int ichMinRev = ichMinCurr;
			paraBldr.AppendRun(" and the earth.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimCurr = paraBldr.Length - 1;
			int ichLimRev = ichLimCurr;
			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			// create a paragraph with the Emphasis style for the rev section
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("heavens and the earth",
				StyleUtils.CharStyleTextProps("Key Word", Cache.DefaultVernWs));
			paraBldr.AppendRun(".",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Detect differences and verify that they are correct
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(DifferenceType.CharStyleDifference, diff.DiffType);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(ichMinCurr, diff.IchMinCurr);
			Assert.AreEqual(ichLimCurr, diff.IchLimCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(ichMinRev, diff.IchMinRev);
			Assert.AreEqual(ichLimRev, diff.IchLimRev);
			Assert.AreEqual("Default Paragraph Characters", diff.StyleNameCurr);
			Assert.AreEqual("Key Word", diff.StyleNameRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the revision and
		/// current have multiple runs with character style differences, in the same verse.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_MultipleCharStyleDifferencessInVerse()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// create a paragraph with the Key word style for the current section
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			int ichMinCurr = paraBldr.Length;
			paraBldr.AppendRun("In the beginning,", StyleUtils.CharStyleTextProps("Key Word",
				Cache.DefaultVernWs));
			paraBldr.AppendRun(" God created", StyleUtils.CharStyleTextProps(null,
				Cache.DefaultVernWs));
			paraBldr.AppendRun(" the heavens and the earth.",
				StyleUtils.CharStyleTextProps("Emphasis", Cache.DefaultVernWs));
			int ichLimCurr = paraBldr.Length;
			paraBldr.AppendRun(" More text", StyleUtils.CharStyleTextProps(null,
				Cache.DefaultVernWs));
			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			// create a paragraph with the Emphasis style for the rev section
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			int ichMinRev = paraBldr.Length;
			paraBldr.AppendRun(
				"In the beginning, God created the heavens and the earth. More text",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Detect differences and verify that they are correct
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(DifferenceType.MultipleCharStyleDifferences, diff.DiffType);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(ichMinCurr, diff.IchMinCurr);
			Assert.AreEqual(ichLimCurr, diff.IchLimCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(ichMinRev, diff.IchMinRev);
			Assert.AreEqual(ichLimCurr, diff.IchLimRev);
			Assert.IsNull(diff.StyleNameCurr);
			Assert.IsNull(diff.StyleNameRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences
		/// method when the revision and current have multiple runs with writing system
		/// differences, in the same verse.
		/// </summary>
		/// Jira issue is TE-7726.
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_MultipleWritingSystemDifferencesInVerse()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// create a paragraph with the Key word style for the current section
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning,", StyleUtils.CharStyleTextProps(null,
				Cache.DefaultVernWs));
			int ichMinDiff = paraBldr.Length;
			paraBldr.AppendRun(" God created", StyleUtils.CharStyleTextProps(null,
				Cache.DefaultAnalWs));
			paraBldr.AppendRun(" the heavens and the earth.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun(" More text", StyleUtils.CharStyleTextProps(null,
				Cache.DefaultAnalWs));
			int ichLimDiff = paraBldr.Length;
			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			// create a paragraph with the Emphasis style for the rev section
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun(
				"In the beginning, God created the heavens and the earth. More text",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Detect differences and verify that they are correct
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(DifferenceType.MultipleWritingSystemDifferences, diff.DiffType);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(ichMinDiff, diff.IchMinCurr);
			Assert.AreEqual(ichLimDiff, diff.IchLimCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(ichMinDiff, diff.IchMinRev);
			Assert.AreEqual(ichLimDiff, diff.IchLimRev);
			Assert.IsNull(diff.WsNameCurr);
			Assert.IsNull(diff.WsNameRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences
		/// method when the revision and current have multiple runs with a mix of writing system
		/// differences and character style differences, in the same verse.
		/// Jira issue is TE-7726.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		[Ignore("This is the test for TE-7726")]
		public void DetectDifferences_WritingSystemAndCharStyleDifferencesInVerse()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// create a paragraph with the Key word style for the current section
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning,", StyleUtils.CharStyleTextProps(null,
				Cache.DefaultVernWs));
			int ichMinDiff = paraBldr.Length;
			paraBldr.AppendRun(" God created", StyleUtils.CharStyleTextProps(null,
				Cache.DefaultAnalWs));
			paraBldr.AppendRun(" the heavens and the earth.",
				StyleUtils.CharStyleTextProps("Emphasis", Cache.DefaultAnalWs));
			paraBldr.AppendRun(" More text", StyleUtils.CharStyleTextProps(null,
				Cache.DefaultAnalWs));
			int ichLimDiff = paraBldr.Length;
			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			// create a paragraph with the Emphasis style for the rev section
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun(
				"In the beginning, God created the heavens and the earth. More text",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Detect differences and verify that they are correct
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(DifferenceType.MultipleWritingSystemDifferences | DifferenceType.MultipleCharStyleDifferences,
				diff.DiffType, "Technically, there's only one character style difference in the verse, but it doesn't cover the entire difference.");
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(ichMinDiff, diff.IchMinCurr);
			Assert.AreEqual(ichLimDiff, diff.IchLimCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(ichMinDiff, diff.IchMinRev);
			Assert.AreEqual(ichLimDiff, diff.IchLimRev);
			Assert.IsNull(diff.WsNameCurr);
			Assert.IsNull(diff.WsNameRev);
			Assert.IsNull(diff.StyleNameCurr);
			Assert.IsNull(diff.StyleNameRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the revision and
		/// current have a different style as well as different text, in the same run.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_CharStyleAndTextDifference_InSameRunInVerse()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// create a paragraph with the Key word style for the current section with a
			//  spelling error.
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens ",
				StyleUtils.CharStyleTextProps("Emphasis", Cache.DefaultVernWs));
			int ichMinCurr = paraBldr.Length;
			paraBldr.AppendRun("and the arth.",
				StyleUtils.CharStyleTextProps("Key Word", Cache.DefaultVernWs));
			int ichLimCurr = paraBldr.Length;
			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			// create a paragraph with the Emphasis style for the rev section with the
			//  correct spelling of earth.
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth.",
				StyleUtils.CharStyleTextProps("Emphasis", Cache.DefaultVernWs));
			int ichLimRev = paraBldr.Length;
			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Detect differences and verify that they are correct
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefEnd);
			Assert.AreEqual(DifferenceType.CharStyleDifference | DifferenceType.TextDifference,
				diff.DiffType);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(ichMinCurr, diff.IchMinCurr);
			Assert.AreEqual(ichLimCurr, diff.IchLimCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(ichMinCurr, diff.IchMinRev);
			Assert.AreEqual(ichLimRev, diff.IchLimRev);
			Assert.AreEqual("Key Word", diff.StyleNameCurr);
			Assert.AreEqual("Emphasis", diff.StyleNameRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the revision and
		/// current have a different style as well as different text, in different runs within
		/// the same verse.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_CharStyleAndTextDifference_InDiffRunsInVerse()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// create a paragraph with the Key word style for the current section with a
			//  spelling error.
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God reated the heavens ",
				StyleUtils.CharStyleTextProps("Emphasis", Cache.DefaultVernWs));
			paraBldr.AppendRun("and the earth.",
				StyleUtils.CharStyleTextProps("Key Word", Cache.DefaultVernWs));
			int ichLimCurr = paraBldr.Length;
			paraBldr.AppendRun(" More text at the end.",
				StyleUtils.CharStyleTextProps("Emphasis", Cache.DefaultVernWs));
			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			// create a paragraph with the Emphasis style for the rev section with the
			//  correct spelling of earth.
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun(
				"In the beginning, God created the heavens and the earth. More text at the end.",
				StyleUtils.CharStyleTextProps("Emphasis", Cache.DefaultVernWs));
			int ichLimRev = paraBldr.Length - 22;
			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Detect differences and verify that they are correct
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefEnd);
			Assert.AreEqual(DifferenceType.CharStyleDifference | DifferenceType.TextDifference,
				diff.DiffType);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(23, diff.IchMinCurr);
			Assert.AreEqual(ichLimCurr, diff.IchLimCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(23, diff.IchMinRev);
			Assert.AreEqual(ichLimRev, diff.IchLimRev);
			Assert.AreEqual("Key Word", diff.StyleNameCurr);
			Assert.AreEqual("Emphasis", diff.StyleNameRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the revision has
		/// completely different text and a mix of two, character styles, one of which was not
		/// in the current.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_TextChangedCompletelyWithStyles()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// create a paragraph with the Key word style for the current section
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("JK",
				StyleUtils.CharStyleTextProps("Key Word", Cache.DefaultVernWs));
			paraBldr.AppendRun("LM",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			// create a paragraph with the Emphasis style for the rev section
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("ABCD",
				StyleUtils.CharStyleTextProps("Key Word", Cache.DefaultVernWs));
			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Detect differences and verify that they are correct
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(1, diff.IchMinCurr);
			Assert.AreEqual(5, diff.IchLimCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(1, diff.IchMinRev);
			Assert.AreEqual(5, diff.IchLimRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when a paragraph in the
		/// revision has a different paragraph style than the paragraph in the current.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_ParagraphStyleDifferent()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// create a paragraph with the Refrain paragraph style for the current section
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = "Refrain";
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimCurr = paraBldr.Length;
			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			// create a paragraph with the Normal paragraph style for the rev section
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimRev = paraBldr.Length;
			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Detect differences and verify that they are correct
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.IsNotNull(diff);
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphStyleDifference, diff.DiffType);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(ichLimCurr, diff.IchLimCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(ichLimRev, diff.IchLimRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the revision and
		/// current have a different paragraph style and a different character style.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_ParagraphStyleAndCharStyleDifferent()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// create a paragraph with the Key word character style and refrain paragraph style
			//  for the current section
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = "Refrain";
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			int ichMinCurr = paraBldr.Length;
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth.",
				StyleUtils.CharStyleTextProps("Key Word", Cache.DefaultVernWs));
			int ichLimCurr = paraBldr.Length;
			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			// create a paragraph with the Emphasis character style and normal paragraph style
			//  for the rev section
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			int ichMinRev = paraBldr.Length;
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth.",
				StyleUtils.CharStyleTextProps("Emphasis", Cache.DefaultVernWs));
			int ichLimRev = paraBldr.Length;
			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Detect differences and verify that they are correct
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis

			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(DifferenceType.ParagraphStyleDifference, diff.DiffType);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(ichLimCurr, diff.IchLimCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(ichLimRev, diff.IchLimRev);

			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(DifferenceType.CharStyleDifference, diff.DiffType);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(1, diff.IchMinCurr);
			Assert.AreEqual(ichLimCurr, diff.IchLimCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(1, diff.IchMinRev);
			Assert.AreEqual(ichLimRev, diff.IchLimRev);
			Assert.AreEqual("Key Word", diff.StyleNameCurr);
			Assert.AreEqual("Emphasis", diff.StyleNameRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the revision and
		/// current have a different paragraph style and a different character style.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_ParagraphStyleAndTextDifferent()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// create a paragraph with the Refrain paragraph style for the current section
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = "Refrain";
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God reated the heavens and the earth.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimCurr = paraBldr.Length;
			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			// create a paragraph with the Normal paragraph style for the rev section
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimRev = paraBldr.Length;
			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Detect differences and verify that they are correct
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis

			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphStyleDifference, diff.DiffType);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(ichLimCurr, diff.IchLimCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(ichLimRev, diff.IchLimRev);

			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefEnd);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(23, diff.IchMinCurr);
			Assert.AreEqual(23, diff.IchLimCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(23, diff.IchMinRev);
			Assert.AreEqual(24, diff.IchLimRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when a paragraph in the
		/// revision has a different style than the paragraph in the current.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_ParagraphStyleDifference_AfterDeletedParagraph()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// Current para 1
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimP1Curr = paraBldr.Length;
			paraBldr.CreateParagraph(sectionCur.ContentOA);

			// Current para 2: verse 2 with Refrain para style
			paraBldr.ParaStyleName = "Refrain";
			paraBldr.AppendRun("2", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimP2Curr = paraBldr.Length;
			paraBldr.CreateParagraph(sectionCur.ContentOA);

			// Revision para 1: verse 2 with typical paragraph style
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("2", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimP1Rev = paraBldr.Length;
			paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Detect differences
			m_bookMerger.DetectDifferences(null);

			// verify paragraph zero missing in revision
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff.DiffType);
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefEnd);
			Assert.AreEqual(sectionCur.ContentOA[0], diff.ParaCurr);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(ichLimP1Curr, diff.IchLimCurr);
			Assert.AreEqual(sectionRev.ContentOA[0], diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(0, diff.IchLimRev);

			// verify paragraph style different in verse two
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001002, diff.RefStart);
			Assert.AreEqual(01001002, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphStyleDifference, diff.DiffType);
			Assert.AreEqual(sectionCur.ContentOA[1], diff.ParaCurr);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(ichLimP2Curr, diff.IchLimCurr);
			Assert.AreEqual(sectionRev.ContentOA[0], diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(ichLimP1Rev, diff.IchLimRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences
		/// method when a verse in Current is split between two paragraphs in the Revision, and
		/// Revision paragraph styles are different from Current.
		/// </summary>
		/// <remarks>verifies fix to TE-2974</remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_ParagraphStyleDifference_ParaMergeMidVerse()
		{
			// init text of the verses
			string verse2a = "And the earth was formless... ";
			string verse2b = "And the Spirit of God was hovering...'";

			// Current para: complete verse 2 with normal para style
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara paraCurr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(paraCurr, 0, 2, verse2a);
			int ichLimV2aCurr = paraCurr.Contents.Length;
			AddVerse(paraCurr, 0, 0, verse2b);
			int ichLimCurr = paraCurr.Contents.Length;

			// Revision para 1: verse 2a with Refrain para style
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, "Refrain");
			AddVerse(para1Rev, 0, 2, verse2a);
			int ichLimP1Rev = para1Rev.Contents.Length;

			// Revision para 2: verse 2b with Refrain paragraph style
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, "Line 1");
			AddVerse(para2Rev, 0, 0, verse2b);
			int ichLimP2Rev = para2Rev.Contents.Length;

			// Detect differences
			m_bookMerger.DetectDifferences(null);

			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			//  paragraph style and merged difference
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, 01001002, DifferenceType.ParagraphMergedInCurrent);
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.ParagraphStyleDifference,
				paraCurr, ichLimV2aCurr, ichLimV2aCurr, para1Rev, ichLimP1Rev, ichLimP1Rev);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.ParagraphStyleDifference,
				null, 0, 0, para2Rev, 0, 0);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences
		/// method when a bridge of verses in Current is split between two paragraphs in the
		/// Revision, and a Revision paragraph style is different from Current.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_ParagraphStyleDifference_SplitBridge()
		{
			// init text of the verses
			// note: verse 2 will win the correlation contest, and be correlated to the verse 2-3 bridge
			string verse2 = "And the earth was formless and void with little or no definition (HDTV was not yet invented)... ";
			string verse3 = "And God said, 'Let there be light...'";

			// Current para 1: bridge verse 2-3
			IScrSection sectionCurr = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 0, "2-3", verse2 + verse3);
			int ichTxtChgMin = 1;
			int ichTxtChgLim = verse2.Length + 3;

			// Revision para 1
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 0, 2, verse2);

			// Revision para 2: verse 3 with Refrain paragraph style
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, "Refrain");
			AddVerse(para2Rev, 0, 3, verse3);

			// Detect differences
			m_bookMerger.DetectDifferences(null);

			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			//  paragraph style and paragraph merge difference
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, 01001002, 01001003, DifferenceType.ParagraphMergedInCurrent);
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.TextDifference,
				para1Curr, ichTxtChgMin, ichTxtChgLim,
				para1Rev, ichTxtChgMin, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.TextDifference | DifferenceType.ParagraphStyleDifference,
				null, 0, 0, para2Rev, 0, 1);
		}
		#endregion

		#region DetectDifferences: Verse added/missing
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences
		/// method when the current book is missing a verse number at the start of a paragraph (TE-2111).
		/// </summary>
		/// <remarks>This is a regression test for a bug. Here is a readable version of the
		/// test data we will construct:
		///
		/// *********************** Current ******************************
		/// My aching head!
		///     1 In the beginning, God created the heavens and the earth. 2 The earth had no
		/// form or substance.
		///     And God said, 'Let there be light...' 4 God saw that the light was good.
		///
		/// *********************** Revision ******************************
		/// My aching head!
		///     1 In the beginning, God created the heavens and the earth. 2 The earth had no
		/// form or substance.
		///     3 And God said, 'Let there be light...' 4 God saw that the light was good.
		/// </remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		[Ignore("TE-3999: follow expectations described in TE-2111 MDL--BW")]
		public void DetectDifferences_VerseNumMissingAtStartOfParaCurr()
		{
			// Create the "Current" paragraphs
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 0, 1, "In the beginning, God created the heavens and the earth. ");
			AddVerse(para1Curr, 0, 2, "The earth had no form or substance.");

			//Note: verse number 3 is missing, but the verse 3 text is here.
			// DetectDifferences will process this as verse 2b
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 0, "And God said, 'Let there be light...' ");
			int ichLimCurr2b = para2Curr.Contents.Length;
			AddVerse(para2Curr, 0, 4, "God saw that the light was good.");

			// Create the Revision paragraphs
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 0, 1, "In the beginning, God created the heavens and the earth. ");
			AddVerse(para1Rev, 0, 2, "The earth had no form or substance.");
			int ichLimRevV2 = para1Rev.Contents.Length;

			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 3, "And God said, 'Let there be light...' ");
			int ichLimRevV3 = para2Rev.Contents.Length;
			AddVerse(para2Rev, 0, 4, "God saw that the light was good.");

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001002, diff.RefStart);
			Assert.AreEqual(01001002, diff.RefEnd);
			Assert.AreEqual(DifferenceType.VerseAddedToCurrent, diff.DiffType);
			Assert.AreEqual(para1Curr, diff.ParaCurr);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(ichLimCurr2b, diff.IchLimCurr);
			Assert.AreEqual(para1Rev, diff.ParaRev);
			Assert.AreEqual(ichLimRevV2, diff.IchMinRev);
			Assert.AreEqual(ichLimRevV2, diff.IchLimRev);

			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001003, diff.RefStart);
			Assert.AreEqual(01001003, diff.RefEnd);
			Assert.AreEqual(DifferenceType.VerseMissingInCurrent, diff.DiffType);
			Assert.AreEqual(para1Curr, diff.ParaCurr);
			Assert.AreEqual(ichLimCurr2b, diff.IchMinCurr);
			Assert.AreEqual(ichLimCurr2b, diff.IchLimCurr);
			Assert.AreEqual(para2Rev, diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(ichLimRevV3, diff.IchLimRev);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences
		/// method when the revision book is missing a verse number at the start of a paragraph
		/// (see TE-2111).
		/// </summary>
		/// <remarks>This is a regression test for a bug. Here is a readable version of the
		/// test data we will construct:
		///
		/// *********************** Current ******************************
		/// My aching head!
		///     1 In the beginning, God created the heavens and the earth. 2 The earth had no
		/// form or substance.
		///     3 And God said, 'Let there be light...' 4 God saw that the light was good.
		///
		/// *********************** Revision ******************************
		/// My aching head!
		///     1 In the beginning, God created the heavens and the earth. 2 The earth had no
		/// form or substance.
		///     And God said, 'Let there be light...' 4 God saw that the light was good.
		/// </remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		[Ignore("TODO: merge para--follow expectations described in TE-2111 MDL--BW")]
		public void DetectDifferences_VerseNumMissingAtStartOfParaRev()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// Create the "Current" paragraphs
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("2", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("The earth had no form or substance.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimCurrV2 = paraBldr.Length;
			IScrTxtPara hvoCurr0 = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			paraBldr.AppendRun("3", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And God said, 'Let there be light...' ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimCurrV3 = paraBldr.Length;
			paraBldr.AppendRun("4", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("God saw that the light was good.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara paraCurr1 = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA, 1);

			// Create the Revision paragraphs
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("2", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("The earth had no form or substance.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimRevV2 = paraBldr.Length;
			IScrTxtPara hvoRev0 = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			//Note: verse number 3 is missing, but the verse 3 text is here.
			// DetectDifferences will process this as verse 2b
			paraBldr.AppendRun("And God said, 'Let there be light...' ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimRevV2b = paraBldr.Length;
			paraBldr.AppendRun("4", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("God saw that the light was good.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara paraRev1 = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA, 1);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001002, diff.RefStart);
			Assert.AreEqual(01001002, diff.RefEnd);
			Assert.AreEqual(DifferenceType.VerseMissingInCurrent, diff.DiffType);
			Assert.AreEqual(hvoCurr0, diff.ParaCurr);
			Assert.AreEqual(ichLimCurrV2, diff.IchMinCurr);
			Assert.AreEqual(ichLimCurrV2, diff.IchLimCurr);
			Assert.AreEqual(paraRev1, diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(ichLimRevV2b, diff.IchLimRev);

			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001003, diff.RefStart);
			Assert.AreEqual(01001003, diff.RefEnd);
			Assert.AreEqual(DifferenceType.VerseAddedToCurrent, diff.DiffType);
			Assert.AreEqual(paraCurr1, diff.ParaCurr);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(ichLimCurrV3, diff.IchLimCurr);
			Assert.AreEqual(paraRev1, diff.ParaRev);
			Assert.AreEqual(ichLimRevV2b, diff.IchMinRev);
			Assert.AreEqual(ichLimRevV2b, diff.IchLimRev);
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences
		/// method when the Current has a verse added followed by overlapping verse bridge references.
		/// </summary>
		/// <remarks>
		///
		/// *********************** Current ******************************
		/// My aching head!
		///     1 verse one. 2 verse two.  3-4 Verse three and four.
		///
		/// *********************** Revision ******************************
		/// My aching head!
		///     1 verse one. 3 Verse three.
		/// </remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_VerseAddedBeforeOverlapping()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// Create the "Current" paragraphs
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("verse one.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimCurrV1 = paraBldr.Length;
			paraBldr.AppendRun("2", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("verse two.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimCurrV2 = paraBldr.Length;
			paraBldr.AppendRun("3-4", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("verse three and four.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimCurrV34 = paraBldr.Length;
			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			// Create the Revision paragraphs
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("verse one.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimRevV1 = paraBldr.Length;
			paraBldr.AppendRun("3", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("verse three",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimRevV3 = paraBldr.Length;
			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the results
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// verify verse 2 missing in revision
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001002, diff.RefStart);
			Assert.AreEqual(01001002, diff.RefEnd);
			Assert.AreEqual(DifferenceType.VerseAddedToCurrent, diff.DiffType);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(ichLimCurrV1, diff.IchMinCurr);
			Assert.AreEqual(ichLimCurrV2, diff.IchLimCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(ichLimRevV1, diff.IchMinRev);
			Assert.AreEqual(ichLimRevV1, diff.IchLimRev);

			// verify verse 3-4 text difference
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001003, diff.RefStart);
			Assert.AreEqual(01001004, diff.RefEnd);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(ichLimCurrV2, diff.IchMinCurr);
			Assert.AreEqual(ichLimCurrV34, diff.IchLimCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(ichLimRevV1, diff.IchMinRev);
			Assert.AreEqual(ichLimRevV3, diff.IchLimRev);
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences
		/// method when the Current has a verse added followed by complex overlapping verse bridge references.
		/// </summary>
		/// <remarks>
		///
		/// *********************** Current ******************************
		/// My aching head!
		///     1 verse one. 2 verse two.  3-5 Verse three to five.
		///
		/// *********************** Revision ******************************
		/// My aching head!
		///     1 verse one. 4-6 Verse four to six.
		/// </remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_VerseAddedBeforeComplexOverlapping()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// Create the "Current" paragraphs
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("verse one.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimCurrV1 = paraBldr.Length;
			paraBldr.AppendRun("2", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("verse two.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimCurrV2 = paraBldr.Length;
			paraBldr.AppendRun("3-5", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("verse three to five.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimCurrV35 = paraBldr.Length;
			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			// Create the Revision paragraphs
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("verse one.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimRevV1 = paraBldr.Length;
			paraBldr.AppendRun("4-6", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("verse four to six",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimRevV46 = paraBldr.Length;
			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001002, diff.RefStart);
			Assert.AreEqual(01001002, diff.RefEnd);
			Assert.AreEqual(DifferenceType.VerseAddedToCurrent, diff.DiffType);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(ichLimCurrV1, diff.IchMinCurr);
			Assert.AreEqual(ichLimCurrV2, diff.IchLimCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(ichLimRevV1, diff.IchMinRev);
			Assert.AreEqual(ichLimRevV1, diff.IchLimRev);

			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001003, diff.RefStart);
			Assert.AreEqual(01001006, diff.RefEnd);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(ichLimCurrV2, diff.IchMinCurr);
			Assert.AreEqual(ichLimCurrV35, diff.IchLimCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(ichLimRevV1, diff.IchMinRev);
			Assert.AreEqual(ichLimRevV46, diff.IchLimRev);
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the current book and
		/// the revision have a single difference in the verse text of one verse.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_ImplicitVerseOneMissingInCurrent()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));

			int ichMinCurr = paraBldr.Length;
			int ichLimCurr = paraBldr.Length;

			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));

			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			// Revision
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			int ichMinRev = paraBldr.Length;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			int ichLimRev = paraBldr.Length;

			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));

			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Detect differences
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis

			// Verify that differences are correct
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(sectionCur.ContentOA[0], diff.ParaCurr);
			Assert.AreEqual(sectionRev.ContentOA[0], diff.ParaRev);
			Assert.AreEqual(ichMinCurr, diff.IchMinCurr);
			Assert.AreEqual(ichLimCurr, diff.IchLimCurr);
			Assert.AreEqual(ichMinRev, diff.IchMinRev);
			Assert.AreEqual(ichLimRev, diff.IchLimRev);

			// MoveNext should return null because there is only one diff.
			Assert.IsNull(m_bookMerger.Differences.MoveNext());
			// MoveNext should not have advanced the iterator;
			// the one diff is still current, and MovePrev should also return null.
			Assert.IsNull(m_bookMerger.Differences.MovePrev());
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the current book and
		/// the revision have a single difference in the verse text of one verse.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_ImplicitVerseOneMissingInRevision()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			int ichMinCurr = paraBldr.Length;

			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));

			int ichLimCurr = paraBldr.Length;

			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));

			IScrTxtPara hvoCurr = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur.ContentOA);

			// Revision
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			int ichMinRev = paraBldr.Length;
			int ichLimRev = paraBldr.Length;

			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));

			IScrTxtPara hvoRev = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Detect differences
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis

			// Verify that differences are correct
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(hvoCurr, diff.ParaCurr);
			Assert.AreEqual(hvoRev, diff.ParaRev);
			Assert.AreEqual(sectionCur.ContentOA[0], diff.ParaCurr);
			Assert.AreEqual(sectionRev.ContentOA[0], diff.ParaRev);
			Assert.AreEqual(ichMinCurr, diff.IchMinCurr);
			Assert.AreEqual(ichLimCurr, diff.IchLimCurr);
			Assert.AreEqual(ichMinRev, diff.IchMinRev);
			Assert.AreEqual(ichLimRev, diff.IchLimRev);

			// MoveNext should return null because there is only one diff.
			Assert.IsNull(m_bookMerger.Differences.MoveNext());
			// MoveNext should not have advanced the iterator;
			// the one diff is still current, and MovePrev should also return null.
			Assert.IsNull(m_bookMerger.Differences.MovePrev());
		}
		}
		#endregion

		#region DetectDifferences: Scripture Paragraphs added/missing
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when paragraphs are added in the current.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_ParaAddedInCurrent()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verse");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verse");

			// Build up the "current" paragraphs
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);

			AddRunToMockedPara(para1Curr, "6", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "Here is the text of verse 6", ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "7", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "And some more text for verse seven.", ScrStyleNames.NormalParagraph);

			AddRunToMockedPara(para2Curr, "8", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "Look at my verse eight!", ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "9", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "Verse nine does is simple.", ScrStyleNames.NormalParagraph);

			AddRunToMockedPara(para3Curr, "10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3Curr, "verse ten stands alone!", ScrStyleNames.NormalParagraph);

			// Build up the "revision" paragraphs
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);

			AddRunToMockedPara(para1Rev, "8", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "Google at my verse eight!", ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "9", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "Verse nine does is simple.", ScrStyleNames.NormalParagraph);

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(3, m_bookMerger.Differences.Count);

			// the first curr para is added in current
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001006, diff.RefStart);
			Assert.AreEqual(01001007, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff.DiffType);
			Assert.AreEqual(para1Curr, diff.ParaCurr);
			Assert.AreEqual(para1Rev, diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(para1Curr.Contents.Length, diff.IchLimCurr);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(0, diff.IchLimRev);

			// text difference: the first word after the verse number has changed
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001008, diff.RefStart);
			Assert.AreEqual(01001008, diff.RefEnd);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(para2Curr, diff.ParaCurr);
			Assert.AreEqual(para1Rev, diff.ParaRev);
			Assert.AreEqual(1, diff.IchMinCurr);
			Assert.AreEqual(5, diff.IchLimCurr);
			Assert.AreEqual(1, diff.IchMinRev);
			Assert.AreEqual(7, diff.IchLimRev);

			// the last difference is another paragraph added in current
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001010, diff.RefStart);
			Assert.AreEqual(01001010, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff.DiffType);
			Assert.AreEqual(para3Curr, diff.ParaCurr);
			Assert.AreEqual(para1Rev, diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(para3Curr.Contents.Length, diff.IchLimCurr);
			Assert.AreEqual(para1Rev.Contents.Length, diff.IchMinRev);
			Assert.AreEqual(para1Rev.Contents.Length, diff.IchLimRev);

			// MoveNext should return null because there are no more differences
			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when paragraphs are missing in the current.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_ParaMissingInCurrent()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCurr = CreateSection(m_genesis, "My Beautiful Verse");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verse");

			// Build up the "revision" paragraphs
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);

			AddRunToMockedPara(para1Rev, "6", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "Here is the text of verse 6", ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "7", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "And some more text for verse seven.", ScrStyleNames.NormalParagraph);

			AddRunToMockedPara(para2Rev, "8", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "Look at my verse eight!", ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "9", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "Verse nine does is simple.", ScrStyleNames.NormalParagraph);

			AddRunToMockedPara(para3Rev, "10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3Rev, "verse ten stands alone!", ScrStyleNames.NormalParagraph);

			// Build up the "current" paragraphs
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);

			AddRunToMockedPara(para1Curr, "8", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "Google at my verse eight!", ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "9", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "Verse nine does is simple.", ScrStyleNames.NormalParagraph);

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(3, m_bookMerger.Differences.Count);

			// the first rev para is missing in current
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001006, diff.RefStart);
			Assert.AreEqual(01001007, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff.DiffType);
			Assert.AreEqual(para1Curr, diff.ParaCurr);
			Assert.AreEqual(para1Rev, diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(0, diff.IchLimCurr);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(para1Rev.Contents.Length, diff.IchLimRev);

			// text difference: the first word after the verse number has changed
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001008, diff.RefStart);
			Assert.AreEqual(01001008, diff.RefEnd);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(para1Curr, diff.ParaCurr);
			Assert.AreEqual(para2Rev, diff.ParaRev);
			Assert.AreEqual(1, diff.IchMinCurr);
			Assert.AreEqual(7, diff.IchLimCurr);
			Assert.AreEqual(1, diff.IchMinRev);
			Assert.AreEqual(5, diff.IchLimRev);

			// the last difference is another paragraph missing in current
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001010, diff.RefStart);
			Assert.AreEqual(01001010, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff.DiffType);
			Assert.AreEqual(para1Curr, diff.ParaCurr);
			Assert.AreEqual(para3Rev, diff.ParaRev);
			Assert.AreEqual(para1Curr.Contents.Length, diff.IchMinCurr);
			Assert.AreEqual(para1Curr.Contents.Length, diff.IchLimCurr);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(para3Rev.Contents.Length, diff.IchLimRev);

			// MoveNext should return null because there are no more differences
			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		#endregion

		#region Scripture Paragraph Split/Merge

		#region DetectDiffs: Paragraph Split At Verse Start (boundary)
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when one paragraph is split into two.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_ParaSplitAtVerseStart()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraphs
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 20, 6, "Now I know that the LORD saves his anointed king. "); // space before split
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 7, "He will answer him from his holy heaven. ");
			AddVerse(para2Curr, 0, 8, "and rescue him by his great power.");

			// Build up the "revision" paragraph
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 20, 6, "Now I know that the LORD saves his anointed king. ");
			int iSplitPara = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 7, "He will answer him from his holy heaven. ");
			AddVerse(para1Rev, 0, 8, "and rescue him by his great power.");

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// Verify diff
			// Verses 6, 7, and 8 should be in the same paragraph in the revision,
			// but in separate paragraphs in the current version
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01020006), DifferenceType.ParagraphSplitInCurrent);
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.NoDifference,
				para1Curr, diff.IchMinCurr, diff.IchLimCurr,
				para1Rev, iSplitPara, iSplitPara);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.NoDifference,
				para2Curr, 0, 0, null, 0, 0);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when one paragraph is split into two at a verse boundary and
		/// there is no space before the paragraph split (so there will be a white space
		/// difference when the current and revision are compared).
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_ParaSplitAtVerseStart_WhiteSpace()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraphs
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 20, 6, "Now I know that the LORD saves his anointed king."); // no space before split
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 7, "He will answer him from his holy heaven. ");
			AddVerse(para2Curr, 0, 8, "and rescue him by his great power.");

			// Build up the "revision" paragraph
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 20, 6, "Now I know that the LORD saves his anointed king. ");
			int iSplitPara = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 7, "He will answer him from his holy heaven. ");
			AddVerse(para1Rev, 0, 8, "and rescue him by his great power.");

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// Verify diff
			// Verses 6, 7, and 8 should be in the same paragraph in the revision,
			// but in separate paragraphs in the current version

			// For now, we expect the white space difference to be detected as a root TextDifference.
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff, new BCVRef(01020006), DifferenceType.TextDifference,
				para1Curr, para1Curr.Contents.Length, para1Curr.Contents.Length,
				para1Rev, iSplitPara - 1, iSplitPara);

			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01020006), DifferenceType.ParagraphSplitInCurrent);
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.NoDifference,
				para1Curr, diff.IchMinCurr, diff.IchLimCurr,
				para1Rev, iSplitPara, iSplitPara);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.NoDifference,
				para2Curr, 0, 0, null, 0, 0);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when one paragraph is split into two after the second verse.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_ParaSplitAfterSecondVerse()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraphs
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 20, 6, "Verse 6.");
			AddVerse(para1Curr, 0, 7, "Verse 7.");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 8, "Verse 8.");

			// Build up the "revision" paragraph
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 20, 6, "Verse 6.");
			AddVerse(para1Rev, 0, 7, "Verse 7.");
			int iSplitPara = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 8, "Verse 8.");

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// Verify diff
			// Verses 6, 7, and 8 should be in the same paragraph in the revision,
			// but in separate paragraphs in the current version
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff, new BCVRef(01020007), DifferenceType.ParagraphSplitInCurrent,
				para1Curr, para1Curr.Contents.Length, para1Curr.Contents.Length,
				para1Rev, iSplitPara, iSplitPara);
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.NoDifference,
				para1Curr, diff.IchMinCurr, diff.IchLimCurr,
				para1Rev, diff.IchMinRev, diff.IchLimRev);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.NoDifference,
				para2Curr, 0, 0, null, 0, 0);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when the current has a new paragraph split at a verse boundary.
		/// There are text changes in the ScrVerses before and after the new paragraph split
		/// and an additional paragraph is missing.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_ParaSplitAtVerseStart_AdjacentChanges()
		{
			IScrTxtPara para1Curr;
			IScrTxtPara para2Curr;
			IScrTxtPara para1Rev;
			IScrTxtPara para2Rev;
			CreateData_ParaSplitAtVerseStart_AdjacentChanges(out para1Curr, out para2Curr, out para1Rev, out para2Rev);

			CheckDiffs_ParaSplitAtVerseStart_AdjacentChanges(para1Curr, para2Curr, para1Rev, para2Rev);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Creates the current and revision Scripture data so that there are differences in
		/// adjacent verses.
		/// </summary>
		/// <param name="para1Curr">The first current para.</param>
		/// <param name="para2Curr">The second current para.</param>
		/// <param name="para1Rev">The first revision para.</param>
		/// <param name="para2Rev">The second revision para.</param>
		/// ------------------------------------------------------------------------------------
		private void CreateData_ParaSplitAtVerseStart_AdjacentChanges(out IScrTxtPara para1Curr,
			out IScrTxtPara para2Curr, out IScrTxtPara para1Rev, out IScrTxtPara para2Rev)
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Create the "current" paragraphs
			para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 20, 1, "The disciples were all together. ");//unusual trailing space
			para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 2, "Suddenly there was a strong wind noise. ");
			AddVerse(para2Curr, 0, 3, "They saw tongues of fire. ");

			// Build up the "revision" paragraph
			para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 20, 1, "They were all together. ");
			AddVerse(para1Rev, 0, 2, "Suddenly there was a violent wind sound. ");
			AddVerse(para1Rev, 0, 3, "They saw tongues of fire. ");
			para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 4, "They were filled with the Holy Spirit and spoke in tongues.");
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Checks the diffs in adjacent verses.
		/// </summary>
		/// <param name="para1Curr">The first current para.</param>
		/// <param name="para2Curr">The second current para.</param>
		/// <param name="para1Rev">The first revision para.</param>
		/// <param name="para2Rev">The second revision para.</param>
		/// ------------------------------------------------------------------------------------
		private void CheckDiffs_ParaSplitAtVerseStart_AdjacentChanges(IScrTxtPara para1Curr, IScrTxtPara para2Curr,
			IScrTxtPara para1Rev, IScrTxtPara para2Rev)
		{
			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(4, m_bookMerger.Differences.Count);

			// text difference in verse 1
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff, new BCVRef(01020001), DifferenceType.TextDifference,
				para1Curr, 6, 16, para1Rev, 6, 7);

			// para split at start of verse 2
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01020001), DifferenceType.ParagraphSplitInCurrent);
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.NoDifference,
				para1Curr, para1Curr.Contents.Length, para1Curr.Contents.Length, para1Rev, 27, 27);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.NoDifference,
				para2Curr, 0, 0, null, 0, 0);

			// text difference in verse 2
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, new BCVRef(01020002), DifferenceType.TextDifference,
				para2Curr, 22, 39, para1Rev, 49, 67);

			// verse 4 paragraph is missing in Current
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, new BCVRef(01020004), DifferenceType.ParagraphMissingInCurrent,
				para2Curr, 68, 68, para2Rev, 0, 60);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Creates the Current and revision Scripture data so that there are differences in
		/// adjacent verses. The Current has three paragraphs and the revision has only one.
		/// </summary>
		/// <param name="para1Curr">The first current para.</param>
		/// <param name="para2Curr">The second current para.</param>
		/// <param name="para3Curr">The third current para.</param>
		/// <param name="para1Rev">The first revision para.</param>
		/// <param name="para2Rev">The second revision para.</param>
		/// ------------------------------------------------------------------------------------
		private void CreateData_ParaSplitsAtTwoVerseStarts_AdjacentChanges(
			out IScrTxtPara para1Curr, out IScrTxtPara para2Curr, out IScrTxtPara para3Curr,
			out IScrTxtPara para1Rev, out IScrTxtPara para2Rev)
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Create the "current" paragraphs
			para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 20, 1, "The disciples were all together. ");//unusual trailing space
			para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 2, "Suddenly there was a strong wind noise. ");
			para3Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para3Curr, 0, 3, "They saw tongues of fire. ");

			// Build up the "revision" paragraph
			para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 20, 1, "They were all together. ");
			AddVerse(para1Rev, 0, 2, "Suddenly there was a violent wind sound. ");
			AddVerse(para1Rev, 0, 3, "They saw fire. ");
			para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 4, "They were filled with the Holy Spirit and spoke in tongues.");
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when one paragraph is split into two within a verse and there is
		/// a footnote added in the second part of the verse.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_ParaSplitAtVerseStart_FootnotesAdded()
		{
			// Build up the "current" paragraphs in one section
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 20, 1, "They were all together.");
			// Add footnote after "together" in para1Curr
			AddFootnote(m_genesis, para1Curr, para1Curr.Contents.Text.Length - 1, "First footnote");

			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 2, "Suddenly there was a violent wind sound. ");
			AddVerse(para2Curr, 0, 3, "They saw tongues of fire. ");
			AddVerse(para2Curr, 0, 4, "They were filled with the Holy Spirit and spoke in tongues.");
			// Add footnote after "sound" in para2Curr
			AddFootnote(m_genesis, para2Curr, 40, "Second footnote");

			// Build up the "revision" paragraph
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 20, 1, "They were all together. ");
			int ichSplitPara = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 2, "Suddenly there was a violent wind sound. ");
			int iFootnote = para1Rev.Contents.Length - 2;
			AddVerse(para1Rev, 0, 3, "They saw tongues of fire. ");
			AddVerse(para1Rev, 0, 4, "They were filled with the Holy Spirit and spoke in tongues.");

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(3, m_bookMerger.Differences.Count);

			// Verify diffs
			// First diff is TextDifference | FootnoteAddedToCurrent in verse 1
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff, new BCVRef(01020001),
				DifferenceType.FootnoteAddedToCurrent | DifferenceType.TextDifference,
				para1Curr, 25, 27, para1Rev, 25, 27);

			// ParagraphSplitInCurrent between verse 1 and 2
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01020001), DifferenceType.ParagraphSplitInCurrent);
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.NoDifference,
				para1Curr, para1Curr.Contents.Length, para1Curr.Contents.Length,
				para1Rev, ichSplitPara, ichSplitPara);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.NoDifference,
				para2Curr, 0, 0, null, 0, 0);

			// FootnoteAddedToCurrent in verse 2
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, new BCVRef(01020002), DifferenceType.FootnoteAddedToCurrent,
				para2Curr, 40, 41, para1Rev, iFootnote, iFootnote);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when one paragraph is split into two at a verse boundary when
		/// there are footnotes before and after the split.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_ParaSplitAtVerseStart_Footnotes()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraphs with footnotes.
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 20, 1, "They were all together. ");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 2, "Suddenly there was a violent wind sound. ");
			IScrFootnote footnote1Curr = AddFootnote(m_genesis, para1Curr,
				para1Curr.Contents.Text.Length - 2, "First footnote");
			IScrFootnote footnote2Curr = AddFootnote(m_genesis, para2Curr,
				para2Curr.Contents.Text.Length - 2, "Second footnote");

			// Build up the "revision" paragraph with footnotes.
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 20, 1, "They were all together. ");
			int iSplitPara = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 2, "Suddenly there was a violent wind sound. ");
			IScrFootnote footnote1Rev = AddFootnote(m_genesisRevision, para1Rev, 25, "First footnote");
			IScrFootnote footnote2Rev = AddFootnote(m_genesisRevision, para1Rev,
				para1Rev.Contents.Text.Length - 2, "Second footnote");

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff, new BCVRef(01020001), DifferenceType.ParagraphSplitInCurrent,
				para1Curr, para1Curr.Contents.Text.Length, para1Curr.Contents.Text.Length,
				para1Rev, 28);
		}
		#endregion

		#region Revert: Paragraph split at verse start (boundary)
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// current book has a paragraph split at a verse boundary.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaSplitAtVerseStart()
		{
			// Build Current section - two paragraphs with verses 1, 2 and 3 and split after verse 1
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 0, 1, "verse one. "); //has space; no text difference
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 2, "verse two. ");
			AddVerse(para2Curr, 0, 3, "verse three.");

			// Build Revision section - a single para with three verses
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara paraRev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(paraRev, 0, 1, "verse one. ");
			AddVerse(paraRev, 0, 2, "verse two. ");
			AddVerse(paraRev, 0, 3, "verse three.");

			// Detect differences
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// Get the first difference, verify it, and do a ReplaceCurrentWithRevision
			// to simulate clicking the "revert to old" button
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.ParagraphSplitInCurrent, diff.DiffType);
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			Assert.AreEqual(01001001, diff.RefStart);

			m_bookMerger.ReplaceCurrentWithRevision(diff); // we expect this to merge the current paras
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			para1Curr = (IScrTxtPara)sectionCur.ContentOA[0];
			Assert.AreEqual("1verse one. 2verse two. 3verse three.", para1Curr.Contents.Text);
			Assert.AreEqual(01001001, sectionCur.VerseRefStart);
			Assert.AreEqual(01001003, sectionCur.VerseRefEnd);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// current book has a paragraph split. There is no space before the paragraph split,
		/// which is more typical. There will be a white space difference before the split.
		/// See TE-6879.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		[Ignore("TE-6879: TODO handle lack of whitespace before para split.")]
		public void ReplaceCurWithRev_ParaSplitAtVerseStart_WhiteSpace()
		{
			// Build Current section - two paragraphs with verses 1, 2 and 3 and split after verse 1
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 0, 1, "verse one."); //no trailing space; typical
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 2, "verse two. ");
			AddVerse(para2Curr, 0, 3, "verse three.");

			// Build Revision section - a single para with three verses
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara paraRev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(paraRev, 0, 1, "verse one. ");
			AddVerse(paraRev, 0, 2, "verse two. ");
			AddVerse(paraRev, 0, 3, "verse three.");

			// Detect differences
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// Get the first difference, verify it, and do a ReplaceCurrentWithRevision
			// to simulate clicking the "revert to old" button
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.ParagraphSplitInCurrent, diff.DiffType);
			Assert.AreEqual(01001001, diff.RefStart);

			m_bookMerger.ReplaceCurrentWithRevision(diff); // we expect this to merge the current paras
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			para1Curr = (IScrTxtPara)sectionCur.ContentOA[0];
			Assert.AreEqual("1verse one. 2verse two. 3verse three.", para1Curr.Contents.Text);
			Assert.AreEqual(01001001, sectionCur.VerseRefStart);
			Assert.AreEqual(01001003, sectionCur.VerseRefEnd);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when one
		/// paragraph is split into two at a verse boundary when there are footnotes before and
		/// after the split.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaSplitAtVerseStart_Footnotes()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraphs with footnotes.
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 20, 1, "They were all together. ");
			IScrFootnote footnote1Curr = AddFootnote(m_genesis, para1Curr,
				para1Curr.Contents.Text.Length - 2, "First footnote");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 2, "Suddenly there was a violent wind sound. ");
			IScrFootnote footnote2Curr = AddFootnote(m_genesis, para2Curr,
				para2Curr.Contents.Text.Length - 2, "Second footnote");
			AddVerse(para2Curr, 0, 3, "They saw tongues of fire.");
			IScrFootnote footnote3Curr = AddFootnote(m_genesis, para2Curr,
				para2Curr.Contents.Text.Length - 1, "Third footnote");

			// Build up the "revision" paragraph with footnotes.
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 20, 1, "They were all together. ");
			IScrFootnote footnote1Rev = AddFootnote(m_genesisRevision, para1Rev,
				para1Rev.Contents.Length - 2, "First footnote");
			int iSplitPara = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 2, "Suddenly there was a violent wind sound. ");
			int ichFootnote2Rev = para1Rev.Contents.Text.Length - 2;
			IScrFootnote footnote2Rev = AddFootnote(m_genesisRevision, para1Rev,
				ichFootnote2Rev, "Second footnote");
			AddVerse(para1Rev, 0, 3, "They saw tongues of fire.");
			IScrFootnote footnote3Rev = AddFootnote(m_genesisRevision, para1Rev,
				para1Rev.Contents.Text.Length - 1, "Third footnote");

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01020001), DifferenceType.ParagraphSplitInCurrent);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.NoDifference,
				para1Curr, para1Curr.Contents.Length, para1Curr.Contents.Length,
				para1Rev, iSplitPara, iSplitPara);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.NoDifference,
				para2Curr, 0, 0, null, 0, 0);

			// Revert to revision to remove the paragraph break. Confirm that footnotes are intact.
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual("201They were all together" + StringUtils.kChObject +
				". 2Suddenly there was a violent wind sound" + StringUtils.kChObject + ". " +
				"3They saw tongues of fire"  + StringUtils.kChObject + ".",
				para1Curr.Contents.Text);
			Assert.AreEqual(3, m_genesis.FootnotesOS.Count);
			VerifyFootnote(footnote1Curr, para1Curr, iSplitPara - 3);
			VerifyFootnote(m_genesis.FootnotesOS[1], para1Curr, ichFootnote2Rev);
			VerifyFootnote(m_genesis.FootnotesOS[2], para1Curr, para1Curr.Contents.Text.Length - 2);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the current
		/// has a new paragraph split at a verse boundary. There are text changes in the ScrVerses
		/// before and after the new paragraph split and a paragraph is missing. Differences
		/// are reverted in order.
		/// Current
		/// 201The disciples were all together. "
		/// 2Suddenly there was a strong wind noise. 3They saw tongues of fire. "
		/// Revision
		/// 201They were all together. 2Suddenly there was a violent wind sound. 3They saw tongues of fire. "
		/// 4They were filled with the Holy Spirit and spoke in tongues."
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaSplitAtVerseStart_AdjacentChanges1()
		{
			// Create data and confirm differences.
			IScrTxtPara para1Curr;
			IScrTxtPara para2Curr;
			IScrTxtPara para1Rev;
			IScrTxtPara para2Rev;
			CreateData_ParaSplitAtVerseStart_AdjacentChanges(out para1Curr, out para2Curr, out para1Rev, out para2Rev);

			CheckDiffs_ParaSplitAtVerseStart_AdjacentChanges(para1Curr, para2Curr, para1Rev, para2Rev);

			// Revert differences from first to last.
			IScrSection sectionCurr = (IScrSection)para1Curr.Owner.Owner;
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			Difference diff4 = m_bookMerger.Differences.MoveNext();

			// Revert text difference in verse 1.
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			para1Curr = (IScrTxtPara)sectionCurr.ContentOA[0];
			Assert.AreEqual("201They were all together. ", para1Curr.Contents.Text);
			// verify diff fixes
			Assert.AreEqual(para1Curr, diff2.SubDiffsForParas[0].ParaCurr); //unchanged hvo in diff2
			Assert.AreEqual(27, diff2.SubDiffsForParas[0].IchMinCurr); //revert reduces ichs in diff2
			Assert.AreEqual(27, diff2.SubDiffsForParas[0].IchLimCurr);

			// Revert paragraph split at end of verse 1.
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(1, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("201They were all together. 2Suddenly there was a strong wind noise. " +
				"3They saw tongues of fire. ",
				((IScrTxtPara)sectionCurr.ContentOA[0]).Contents.Text);
			// verify diff fixes
			Assert.AreEqual(para1Curr, diff3.ParaCurr); //revert changes hvo in diff3
			Assert.AreEqual(49, diff3.IchMinCurr); // and adjusts ichs by +27
			Assert.AreEqual(66, diff3.IchLimCurr);
			Assert.AreEqual(para1Curr, diff4.ParaCurr); //revert changes hvo in diff4
			Assert.AreEqual(95, diff4.IchMinCurr); // and adjusts ichs by +27
			Assert.AreEqual(95, diff4.IchLimCurr);

			// Revert text difference in verse 2.
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual("201They were all together. 2Suddenly there was a violent wind sound. " +
				"3They saw tongues of fire. ", para1Curr.Contents.Text);
			// verify diff fixes
			Assert.AreEqual(para1Curr, diff4.ParaCurr); //unchanged hvo in diff4
			Assert.AreEqual(96, diff4.IchMinCurr); // and adjusts ichs by +1
			Assert.AreEqual(96, diff4.IchLimCurr);

			// Revert missing paragraph (verse 4).
			m_bookMerger.ReplaceCurrentWithRevision(diff4);
			Assert.AreEqual(2, sectionCurr.ContentOA.ParagraphsOS.Count);
			IScrTxtPara newParaCurr = (IScrTxtPara)sectionCurr.ContentOA[1];
			Assert.AreEqual("4They were filled with the Holy Spirit and spoke in tongues.", newParaCurr.Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the current
		/// has a new paragraph split at a verse boundary. There are text changes in the ScrVerses
		/// before and after the new paragraph split and a paragraph is missing. The differences
		/// are reverted starting with the third difference.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaSplitAtVerseStart_AdjacentChanges2()
		{
			// Create data and confirm differences.
			IScrTxtPara para1Curr;
			IScrTxtPara para2Curr;
			IScrTxtPara para1Rev;
			IScrTxtPara para2Rev;
			CreateData_ParaSplitAtVerseStart_AdjacentChanges(out para1Curr, out para2Curr, out para1Rev, out para2Rev);

			CheckDiffs_ParaSplitAtVerseStart_AdjacentChanges(para1Curr, para2Curr, para1Rev, para2Rev);

			// Revert differences from third to last to second to first.
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			Difference diff4 = m_bookMerger.Differences.MoveNext();

			// Revert text difference in verse 2.
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual("2Suddenly there was a violent wind sound. 3They saw tongues of fire. ",
				para2Curr.Contents.Text);
			IScrSection sectionCurr = (IScrSection)para1Curr.Owner.Owner;
			Assert.AreEqual(2, sectionCurr.ContentOA.ParagraphsOS.Count);

			// Revert missing paragraph (Gen 20:4); should be added to Current.
			m_bookMerger.ReplaceCurrentWithRevision(diff4);
			Assert.AreEqual(3, sectionCurr.ContentOA.ParagraphsOS.Count);
			IScrTxtPara newParaCurr = (IScrTxtPara)sectionCurr.ContentOA[2];
			Assert.AreEqual("4They were filled with the Holy Spirit and spoke in tongues.", newParaCurr.Contents.Text);

			// Revert paragraph split at end of verse 1.
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual("201The disciples were all together. 2Suddenly there was a violent wind sound. " +
				"3They saw tongues of fire. ", para1Curr.Contents.Text);
			Assert.AreEqual(2, sectionCurr.ContentOA.ParagraphsOS.Count);

			// Revert text difference in verse 1.
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			// Text difference in Gen 20:1 should be made.
			Assert.AreEqual("201They were all together. 2Suddenly there was a violent wind sound. " +
				"3They saw tongues of fire. ", para1Curr.Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the current
		/// has a new paragraph split at a verse boundary. There are text changes in the ScrVerses
		/// before and after the new paragraph split and a paragraph is missing. The differences
		/// are reverted starting with the fourth and last difference.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaSplitAtVerseStart_AdjacentChanges3()
		{
			// Create data and confirm differences.
			IScrTxtPara para1Curr;
			IScrTxtPara para2Curr;
			IScrTxtPara para1Rev;
			IScrTxtPara para2Rev;
			CreateData_ParaSplitAtVerseStart_AdjacentChanges(out para1Curr, out para2Curr, out para1Rev, out para2Rev);

			CheckDiffs_ParaSplitAtVerseStart_AdjacentChanges(para1Curr, para2Curr, para1Rev, para2Rev);

			// Revert differences from last to first.
			IScrSection sectionCurr = (IScrSection)para1Curr.Owner.Owner;
			Assert.AreEqual(2, sectionCurr.ContentOA.ParagraphsOS.Count);
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			Difference diff4 = m_bookMerger.Differences.MoveNext();

			// Revert missing paragraph (Gen 20:4); should be added to Current.
			m_bookMerger.ReplaceCurrentWithRevision(diff4);
			Assert.AreEqual(3, sectionCurr.ContentOA.ParagraphsOS.Count);
			IScrTxtPara newParaCurr = (IScrTxtPara)sectionCurr.ContentOA[2];
			Assert.AreEqual("4They were filled with the Holy Spirit and spoke in tongues.", newParaCurr.Contents.Text);
			// verify diff fixes
			Assert.AreEqual(para2Curr, diff2.SubDiffsForParas[1].ParaCurr); //unchanged diff2
			Assert.AreEqual(0, diff2.SubDiffsForParas[1].IchMinCurr);
			Assert.AreEqual(0, diff2.SubDiffsForParas[1].IchLimCurr);
			Assert.AreEqual(para2Curr, diff3.ParaCurr); //unchanged diff3
			Assert.AreEqual(22, diff3.IchMinCurr);
			Assert.AreEqual(39, diff3.IchLimCurr);

			// Revert text difference in verse 2.
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual("2Suddenly there was a violent wind sound. 3They saw tongues of fire. ",
				para2Curr.Contents.Text);
			// verify diff fixes
			Assert.AreEqual(para2Curr, diff2.SubDiffsForParas[1].ParaCurr); //unchanged diff2
			Assert.AreEqual(0, diff2.SubDiffsForParas[1].IchMinCurr);
			Assert.AreEqual(0, diff2.SubDiffsForParas[1].IchLimCurr);

			// Revert paragraph split at end of verse 1.
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual("201The disciples were all together. 2Suddenly there was a violent wind sound. " +
				"3They saw tongues of fire. ", para1Curr.Contents.Text);
			Assert.AreEqual(2, sectionCurr.ContentOA.ParagraphsOS.Count);
			// verify diff fixes
			Assert.AreEqual(para1Curr, diff1.ParaCurr); //unchanged diff1
			Assert.AreEqual(6, diff1.IchMinCurr);
			Assert.AreEqual(16, diff1.IchLimCurr);

			// Revert text difference in verse 1.
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual("201They were all together. 2Suddenly there was a violent wind sound. " +
				"3They saw tongues of fire. ", para1Curr.Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Replaces the current with the revision when a paragraph is split between verse 2
		/// and 5. Verse 3 is added as paragraph at the paragraph split making 3 paragraphs in
		/// the current. Verses 2, 3 and 5 are in current and only 2 and 5 in the revision.
		/// (TE-7074)
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaSplitAtVerseStart_WithParaAdded()
		{
			// Build Current section - two paragraphs with verses 1, 2 and 3 and split after verse 1
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 0, 2, "verse two. ");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 3, "verse three.");
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para3Curr, 0, 5, "verse five.");

			// Build Revision section - a single para with three verses
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara paraRev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(paraRev, 0, 2, "verse two. ");
			AddVerse(paraRev, 0, 5, "verse five.");

			// Test fails here because it only finds on of the differences
			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// Verify verse 3 paragraph added
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaAddedDiff(diff1, new BCVRef(01001003), new BCVRef(01001003),
				DifferenceType.ParagraphAddedToCurrent,
				para2Curr, paraRev, 12);

			// Verify verse 5 split paragraph
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff2, new BCVRef(01001003),
				DifferenceType.ParagraphSplitInCurrent);
			Assert.AreEqual(2, diff2.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffParaReferencePoints(diff2, para2Curr, para2Curr.Contents.Length,
				paraRev, 12);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 1, DifferenceType.NoDifference,
				para3Curr, 0, 0, null, 0, 0);

			// Remove verse 3 added
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("2verse two. ",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("5verse five.",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);

			// Revert paragraph split at verse 5
			m_bookMerger.ReplaceCurrentWithRevision(m_bookMerger.Differences.CurrentDifference);
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("2verse two. 5verse five.",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Replaces the current with the revision when a paragraph is split between verse 2
		/// and 5. Verse 3 is added to the in the same paragraph as verse 2.
		/// Verses 2, 3 and 5 are in current and only 2 and 5 in the revision.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaSplitAtVerseStart_WithVerseAdded()
		{
			// Build Current section - two paragraphs with verses 1, 2 and 3 and split after verse 1
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 0, 2, "verse two. ");
			AddVerse(para1Curr, 0, 3, "verse three.");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 5, "verse five.");

			// Build Revision section - a single para with three verses
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara paraRev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(paraRev, 0, 2, "verse two. ");
			AddVerse(paraRev, 0, 5, "verse five.");

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// Verify verse 3 added to paragraph 1
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, 01001003, DifferenceType.VerseAddedToCurrent,
				para1Curr, 12, para1Curr.Contents.Length, paraRev, 12, 12);

			// Verify verse 5 paragraph split
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff2,new BCVRef(01001003),
				DifferenceType.ParagraphSplitInCurrent);
			Assert.AreEqual(2, diff2.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffParaReferencePoints(diff2, para1Curr, para1Curr.Contents.Length,
				paraRev, 12);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 1, DifferenceType.NoDifference,
				para2Curr, 0, 0, null, 0, 0);

			// Remove verse 3 added
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("2verse two. ",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("5verse five.",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);

			// Revert paragraph split at verse 5
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("2verse two. 5verse five.",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Replaces the current with the revision when a paragraph is split between verse 2
		/// and 5. Verse 3 is a paragraph missing at the paragraph split making 2 paragraphs in
		/// the current. Verses 2, 3 and 5 are in revision and only 2 and 5 in the current.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaSplitAtVerseStart_WithVerseMissing()
		{
			// Build Current section - two paragraphs with verses 1, 2 and 3 and split after verse 1
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 0, 2, "verse two. ");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 5, "verse five.");

			// Build Revision section - a single para with three verses
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara paraRev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(paraRev, 0, 2, "verse two. ");
			AddVerse(paraRev, 0, 3, "verse three. ");
			AddVerse(paraRev, 0, 5, "verse five.");

			// Test fails here because it only finds on of the differences
			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// Verify verse 3 missing in current
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, new BCVRef(01001003), DifferenceType.VerseMissingInCurrent,
				para1Curr, para1Curr.Contents.Length, para1Curr.Contents.Length,
				paraRev, 12, 26);

			// Verify verse 5 split paragraph
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff2, new BCVRef(01001002),
				DifferenceType.ParagraphSplitInCurrent);
			Assert.AreEqual(2, diff2.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffParaReferencePoints(diff2, para1Curr, para1Curr.Contents.Length,
				paraRev, 26);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 1, DifferenceType.NoDifference,
				para2Curr, 0, 0, null, 0, 0);

			// Revert verse 3 missing in current
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("2verse two. 3verse three. ",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("5verse five.",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);

			// Revert paragraph split at verse 5
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("2verse two. 3verse three. 5verse five.",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the current
		/// has two paragraph splits at two verse boundaries. There are no text changes.
		///
		/// Current:
		///  201The disciples were all together.
		///  2Suddenly there was a strong wind noise.
		///  3They saw tongues of fire.
		///
		/// Revision:
		///  201The disciples were all together. 2Suddenly there was a strong wind noise. 3They saw tongues of fire.
		///  4They were filled with the Holy Spirit and spoke in tongues.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaSplitsAtTwoVerseStarts()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Create the "current" paragraphs
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 20, 1, "The disciples were all together. ");//unusual trailing space
			IScrTxtPara para2Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Cur, 0, 2, "Suddenly there was a strong wind noise. ");
			IScrTxtPara para3Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para3Cur, 0, 3, "They saw tongues of fire. ");

			// Build up the "revision" paragraphs
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 20, 1, "The disciples were all together. ");
			AddVerse(para1Rev, 0, 2, "Suddenly there was a strong wind noise. ");
			AddVerse(para1Rev, 0, 3, "They saw tongues of fire. ");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 4, "They were filled with the Holy Spirit and spoke in tongues.");

			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);

			// Detect differences
			m_bookMerger.DetectDifferences(null);

			Assert.AreEqual(3, m_bookMerger.Differences.Count);

			// We expect a paragraph split at the start of verse 2.
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff1, new BCVRef(01020001), DifferenceType.ParagraphSplitInCurrent);
			Assert.AreEqual(2, diff1.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff1, 0, DifferenceType.NoDifference,
				para1Cur, para1Cur.Contents.Length, para1Cur.Contents.Length,
				para1Rev, 36, 36);
			DiffTestHelper.VerifySubDiffTextCompared(diff1, 1, DifferenceType.NoDifference,
				para2Cur, 0, 0, null, 0, 0);

			// We expect a paragraph split at the start of verse 3.
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff2, new BCVRef(01020002), DifferenceType.ParagraphSplitInCurrent);
			Assert.AreEqual(2, diff2.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 0, DifferenceType.NoDifference,
				para2Cur, para2Cur.Contents.Length, para2Cur.Contents.Length,
				para1Rev, 77, 77);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 1, DifferenceType.NoDifference,
				para3Cur, 0, 0, null, 0, 0);

			// We expect a missing paragraph in the Current for verse 4.
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff3, new BCVRef(01020004), DifferenceType.ParagraphMissingInCurrent,
				para3Cur, para3Cur.Contents.Length, para3Cur.Contents.Length,
				para2Rev, 0, para2Rev.Contents.Length);

			// Revert differences from last to first.
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);

			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			// Missing paragraph (Gen 20:4) should be added.
			Assert.AreEqual(4, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("4They were filled with the Holy Spirit and spoke in tongues.",
				((IScrTxtPara)sectionCur.ContentOA[3]).Contents.Text);

			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			// Paragraphs for verses 2 and 3 should be joined
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("2Suddenly there was a strong wind noise. 3They saw tongues of fire. ",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);

			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			// Paragraph for verses 1 should be joined to the following paragraph.
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("201The disciples were all together. 2Suddenly there was a strong wind noise. " +
				"3They saw tongues of fire. ", ((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the current
		/// has two paragraph splits at a verse boundary. There are text changes in the ScrVerses
		/// before and after the new paragraph split and the last paragraph is missing in the
		/// Current. The differences are reverted starting with the fourth (and last) difference.
		///
		/// Current:
		///  201The disciples were all together.
		///  2Suddenly there was a strong wind noise.
		///  3They saw tongues of fire.
		///
		/// Revision:
		///  201They were all together. 2Suddenly there was a violent wind sound. 3They saw fire.
		///  4They were filled with the Holy Spirit and spoke in tongues.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaSplitsAtTwoVerseStarts_AdjacentChanges()
		{
			// Create data and confirm differences.
			IScrTxtPara para1Curr;
			IScrTxtPara para2Curr;
			IScrTxtPara para3Curr;
			IScrTxtPara para1Rev;
			IScrTxtPara para2Rev;
			CreateData_ParaSplitsAtTwoVerseStarts_AdjacentChanges(out para1Curr, out para2Curr, out para3Curr,
				out para1Rev, out para2Rev);
			IScrSection sectionCurr = (IScrSection)para1Curr.Owner.Owner;
			IScrSection sectionRev = (IScrSection)para1Rev.Owner.Owner;
			Assert.AreEqual(3, sectionCurr.ContentOA.ParagraphsOS.Count);
			CheckDiffs_ParaSplitsAtTwoVerseStarts_AdjacentChanges(sectionCurr, sectionRev);

			// Revert differences from last to first.
			Difference diff = m_bookMerger.Differences.MoveFirst();
			diff = m_bookMerger.Differences.MoveNext();
			diff = m_bookMerger.Differences.MoveNext();
			diff = m_bookMerger.Differences.MoveNext();
			diff = m_bookMerger.Differences.MoveNext();
			diff = m_bookMerger.Differences.MoveNext();

			Assert.AreEqual(3, sectionCurr.ContentOA.ParagraphsOS.Count);

			m_bookMerger.ReplaceCurrentWithRevision(diff);
			// Missing paragraph (Gen 20:4) should be added.
			Assert.AreEqual(4, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("4They were filled with the Holy Spirit and spoke in tongues.",
				((IScrTxtPara)sectionCurr.ContentOA[3]).Contents.Text);

			diff = m_bookMerger.Differences.CurrentDifference;
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			// Text difference in Gen 20:3 should be made.
			Assert.AreEqual("3They saw fire. ",
				((IScrTxtPara)sectionCurr.ContentOA[2]).Contents.Text);

			diff = m_bookMerger.Differences.CurrentDifference;
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			// Para split after verse 2 should be removed.
			Assert.AreEqual(3, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("2Suddenly there was a strong wind noise. 3They saw fire. ",
				((IScrTxtPara)sectionCurr.ContentOA[1]).Contents.Text);

			diff = m_bookMerger.Differences.CurrentDifference;
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			// Text difference in Gen 20:2 should be made.
			Assert.AreEqual("2Suddenly there was a violent wind sound. 3They saw fire. ",
				((IScrTxtPara)sectionCurr.ContentOA[1]).Contents.Text);

			diff = m_bookMerger.Differences.CurrentDifference;
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			// Para split after verse 1 should be removed.
			Assert.AreEqual(2, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("201The disciples were all together. " +
				"2Suddenly there was a violent wind sound. 3They saw fire. ",
				((IScrTxtPara)sectionCurr.ContentOA[0]).Contents.Text);

			diff = m_bookMerger.Differences.CurrentDifference;
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			// Text difference in Gen 20:1 should be made.
			Assert.AreEqual("201They were all together. " +
				"2Suddenly there was a violent wind sound. 3They saw fire. ",
				((IScrTxtPara)sectionCurr.ContentOA[0]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when there is
		/// what appears to be a paragraph split in the current at a verse boundary, but the
		/// verses before the split are not the same in the Current and the Revision. In this
		/// case, we classify it as a ParagraphAdded difference because of issues with revert.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaAddedAtVerseStart_NoSharedPrevVerses()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 0, 1, "verse one. ");
			AddVerse(para1Cur, 0, 2, "verse two.");
			IScrTxtPara para2Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Cur, 0, 5, "verse five. ");
			AddVerse(para2Cur, 0, 6, "verse six.");

			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 0, 3, "verse three. ");
			AddVerse(para1Rev, 0, 5, "verse five. ");
			AddVerse(para1Rev, 0, 6, "verse six.");

			m_bookMerger.DetectDifferences(null);

			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaAddedDiff(diff1, new BCVRef(01001001), new BCVRef(01001002),
				DifferenceType.ParagraphAddedToCurrent, para1Cur, para1Rev, 0);

			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff2, new BCVRef(01001003), DifferenceType.VerseMissingInCurrent,
				para2Cur, 0, 0, para1Rev, 0, 14);

			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("5verse five. 6verse six.",
				sectionCur.ContentOA[0].Contents.Text);

			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual("3verse three. 5verse five. 6verse six.",
				sectionCur.ContentOA[0].Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when there is
		/// a paragraph split in the current at a verse boundary, but the verses before the split
		/// are not the same in the Current and the Revision. In this case, we classify it as
		/// a ParagraphSplit difference, as opposed to ParagraphAdded, because verse two in
		/// the Revision paragraph prevents the verse paragraph from being interpreted as an
		/// added paragraph.
		/// </summary>
		/// <remarks>This is a regression test for bug TE-7096, TE-7099, and TE-7097.</remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaSplitAtVerseStart_NoSharedPrevVerses()
		{
			// Create data for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 0, 3, "verse three.");
			IScrTxtPara para2Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Cur, 0, 5, "verse five is nice. ");

			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 0, 2, "verse two. ");
			AddVerse(para1Rev, 0, 5, "verse five. ");

			// Detect differences
			m_bookMerger.DetectDifferences(null);

			Assert.AreEqual(3, m_bookMerger.Differences.Count);

			// 1: a missing verse (2) in the current, and
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, new BCVRef(01001002), DifferenceType.VerseMissingInCurrent,
				para1Cur, 0, 0, para1Rev, 0, 12);

			// 2: an added paragraph in the current.
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaAddedDiff(diff2, new BCVRef(01001003), new BCVRef(01001003),
				DifferenceType.ParagraphAddedToCurrent, para1Cur, para1Rev, 12);

			// 3: text difference (" is nice" added in verse 5).
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff3, new BCVRef(01001005),
				DifferenceType.TextDifference, para2Cur, 11, para2Cur.Contents.Length - 2,
				para1Rev, para1Rev.Contents.Length - 2);

			// Revert in foward order:
			// Revert the missing verse (2).
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual("2verse two. 3verse three.", sectionCur.ContentOA[0].Contents.Text);

			// Revert the added paragraph (containing verse 3). Even though we're reverting an AddedParagraph
			// we're not removing the paragraph because we added text to this paragraph in the previous revert.
			// The number of paragraphs should remain at two.
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff2);

			// Revert the text difference
			m_bookMerger.ReplaceCurrentWithRevision(diff3);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when there is
		/// a paragraph split in the current at a verse boundary, but the verses before the split
		/// are not the same in the Current and the Revision. Revert diffs in reverse
		/// order.
		/// </summary>
		/// <remarks>This is a regression test for bug TE-7096 and TE-7099.</remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaSplitAtVerseStart_NoSharedPrevVerses_ReverseRevert()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 0, 1, "verse one. ");
			AddVerse(para1Cur, 0, 2, "verse two.");
			IScrTxtPara para2Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Cur, 0, 5, "verse five. ");
			AddVerse(para2Cur, 0, 6, "verse six.");

			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 0, 3, "verse three. ");
			AddVerse(para1Rev, 0, 5, "verse five. ");
			AddVerse(para1Rev, 0, 6, "verse six.");

			m_bookMerger.DetectDifferences(null);

			// We expect two differences
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// v1,2 paragraph added
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaAddedDiff(diff1, new BCVRef(01001001), new BCVRef(01001002),
				DifferenceType.ParagraphAddedToCurrent, para1Cur, para1Rev, 0);

			// v3 missing in Current
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff2, new BCVRef(01001003), DifferenceType.VerseMissingInCurrent,
				para2Cur, 0, 0, para1Rev, 0, 14);

			// Revert the v3 verse missing
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("1verse one. 2verse two.", sectionCur.ContentOA[0].Contents.Text);
			Assert.AreEqual("3verse three. 5verse five. 6verse six.", sectionCur.ContentOA[1].Contents.Text);

			// Revert the v1,2 paragraph added
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3verse three. 5verse five. 6verse six.",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences
		/// method when the current has two paragraph splits at a verse boundary. There are
		/// text changes in the ScrVerses before and after the new paragraph split and the last
		/// paragraph is missing in the Current. The differences are reverted starting with the
		/// fourth (and last) difference.
		///
		/// Current:
		///  201The disciples were all together.
		///  2Suddenly there was a strong wind noise.
		///  3They saw tongues of fire.
		///
		/// Revision:
		///  201They were all together. 2Suddenly there was a violent wind sound. 3They saw fire.
		///  4They were filled with the Holy Spirit and spoke in tongues.
		/// </summary>
		/// <param name="sectionCurr">The section in the Current.</param>
		/// <param name="sectionRev">The section in the Revision.</param>
		/// ------------------------------------------------------------------------------------
		private void CheckDiffs_ParaSplitsAtTwoVerseStarts_AdjacentChanges(
			IScrSection sectionCurr, IScrSection sectionRev)
		{
			m_bookMerger.DetectDifferences(null);

			Assert.AreEqual(6, m_bookMerger.Differences.Count);
			IScrTxtPara para1Cur = (IScrTxtPara)sectionCurr.ContentOA[0];
			IScrTxtPara para2Cur = (IScrTxtPara)sectionCurr.ContentOA[1];
			IScrTxtPara para3Cur = (IScrTxtPara)sectionCurr.ContentOA[2];
			IScrTxtPara para1Rev = (IScrTxtPara)sectionRev.ContentOA[0];
			IScrTxtPara para2Rev = (IScrTxtPara)sectionRev.ContentOA[1];

			// We expect a text difference in verse 1.
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff, new BCVRef(01020001), DifferenceType.TextDifference,
				para1Cur, 6, 16, para1Rev, 6, 7);

			// We expect a paragraph split at the start of verse 2.
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01020001), DifferenceType.ParagraphSplitInCurrent);
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.NoDifference,
				para1Cur, para1Cur.Contents.Length, para1Cur.Contents.Length,
				para1Rev, 27, 27);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.NoDifference,
				para2Cur, 0, 0, null, 0, 0);

			// We also expect a text difference in verse 2.
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, new BCVRef(01020002), DifferenceType.TextDifference,
				para2Cur, 22, 39, para1Rev, 49, 67);

			// We expect a paragraph split at the start of verse 3.
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01020002), DifferenceType.ParagraphSplitInCurrent);
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.NoDifference,
				para2Cur, para2Cur.Contents.Length, para2Cur.Contents.Length,
				para1Rev, 69, 69);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.NoDifference,
				para3Cur, 0, 0, null, 0, 0);

			// We expect a text difference in verse 3.
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, new BCVRef(01020003), DifferenceType.TextDifference,
				para3Cur, 10, 21, para1Rev, 79, 79);

			// We expect a missing paragraph in the Current for verse 4.
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, new BCVRef(01020004), DifferenceType.ParagraphMissingInCurrent,
				para3Cur, para3Cur.Contents.Length, para3Cur.Contents.Length,
				para2Rev, 0, para2Rev.Contents.Length);
		}

		#endregion

		#region DetectDiffs: Paragraph Split Mid-Verse
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when a paragraph is split into two, in mid-verse.
		/// </summary>
		/// <remarks>Here is a readable version of the test data we will construct:
		/// *********************** Current ******************************
		/// The Holy Spirit Comes
		///     1They were all together. 2Suddenly there was
		///		a violent wind sound. 3They saw tongues of fire. 4They were
		/// filled with the Holy Spirit and spoke in tongues.
		/// </remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_ParaSplitMidVerse()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "The Holy Spirit Comes");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "The Holy Spirit Comes");

			// Build up the Current
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 2, 1, "They were all together. ");
			AddVerse(para1Curr, 0, 2, "Suddenly there was "); //unusual white space at end of para
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 0, "a violent wind sound. ");
			AddVerse(para2Curr, 0, 3, "They saw tongues of fire. ");
			AddVerse(para2Curr, 0, 4, "They were filled with the Holy Spirit and spoke in tongues.");

			// Build up the "revision" paragraphs
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 2, 1, "They were all together. ");
			int ichV1LimRev = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 2, "Suddenly there was ");
			int ichV2LimRev = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 0, "a violent wind sound. ");
			AddVerse(para1Rev, 0, 3, "They saw tongues of fire. ");
			AddVerse(para1Rev, 0, 4, "They were filled with the Holy Spirit and spoke in tongues.");

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			// Only a ParaSplit diff is expected.
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff, 01002002, DifferenceType.ParagraphSplitInCurrent,
				para1Curr, para1Curr.Contents.Length, para1Rev, ichV2LimRev, ichV2LimRev);
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.NoDifference,
				para1Curr, para1Curr.Contents.Length, para1Curr.Contents.Length,
				para1Rev, ichV2LimRev, ichV2LimRev);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.NoDifference,
				para2Curr, 0, 0, null, 0, 0);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when a paragraph is split into two, in mid-verse.
		/// </summary>
		/// <remarks>Same as above, but typical removal of white space causes a difference.
		/// </remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_ParaSplitMidVerse_WhiteSpace()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "The Holy Spirit Comes");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "The Holy Spirit Comes");

			// Build up the Current
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 2, 1, "They were all together. ");
			AddVerse(para1Curr, 0, 2, "Suddenly there was"); //typical
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 0, "a violent wind sound. ");
			AddVerse(para2Curr, 0, 3, "They saw tongues of fire. ");
			AddVerse(para2Curr, 0, 4, "They were filled with the Holy Spirit and spoke in tongues.");

			// Build up the "revision" paragraphs
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 2, 1, "They were all together. ");
			int ichV1LimRev = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 2, "Suddenly there was");
			int ichV2LimRev = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 0, " a violent wind sound. ");
			AddVerse(para1Rev, 0, 3, "They saw tongues of fire. ");
			AddVerse(para1Rev, 0, 4, "They were filled with the Holy Spirit and spoke in tongues.");

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);

			// ParaMerged diff identifies the first paras
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff, 01002002, DifferenceType.ParagraphSplitInCurrent,
				para1Curr, para1Curr.Contents.Length, para1Rev, ichV2LimRev, ichV2LimRev);

			// Subdiff for typical white space at the location of the split
			Assert.IsNotNull(diff.SubDiffsForParas, "Subdifferences should have been added.");
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.TextDifference,
				para1Curr, para1Curr.Contents.Length, para1Curr.Contents.Length,
				para1Rev, ichV1LimRev + 19, ichV1LimRev + 20);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.NoDifference,
				para2Curr, 0, 0, null, 0, 0);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when one paragraph is split into two within the last verse.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_ParaSplitWithinLastVerse()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraphs
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 20, 6, "Verse 6.");
			AddVerse(para1Curr, 0, 7, "Verse 7.");
			AddVerse(para1Curr, 0, 8, "Verse 8 part a.");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 0, "Verse 8 part b.");

			// Build up the "revision" paragraph
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 20, 6, "Verse 6.");
			AddVerse(para1Rev, 0, 7, "Verse 7.");
			AddVerse(para1Rev, 0, 8, "Verse 8 part a.");
			int iSplitPara = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 0, "Verse 8 part b.");

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// Verify diff
			// Verses 6, 7, and 8 should be in the same paragraph in the revision,
			// but in separate paragraphs in the current version
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01020008), DifferenceType.ParagraphSplitInCurrent);
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.NoDifference,
				para1Curr, para1Curr.Contents.Length, para1Curr.Contents.Length,
				para1Rev, iSplitPara, iSplitPara);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.NoDifference,
				para2Curr, 0, 0, null, 0, 0);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when one paragraph is split into two within a verse and there is
		/// a text difference in the same verse.
		///
		/// Current:
		/// 	206Verse 6 part a.
		///		Verse 6 part b with a difference.7Verse 7.8Verse 8.
		/// Revision:
		/// 	206Verse 6 part a.Verse 6 part b.7Verse 7.8Verse 8.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_ParaSplitMidVerse_TextChangeAfterSplit()
		{
			IScrTxtPara para1Curr;
			IScrTxtPara para2Curr;
			IScrTxtPara para1Rev;
			int iSplitPara;
			CreateData_ParaSplitMidVerse(out para1Curr, out para2Curr, out para1Rev, out iSplitPara);

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// Verify diff
			// Verses 6, 7, and 8 should be in the same paragraph in the revision,
			// but in separate paragraphs in the current version
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01020006), DifferenceType.ParagraphSplitInCurrent);

			Assert.IsNotNull(diff.SubDiffsForParas, "Subdifferences should have been added.");
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.TextDifference,
				para1Curr, para1Curr.Contents.Length, para1Curr.Contents.Length,
				para1Rev, iSplitPara, iSplitPara + 14);

			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.TextDifference,
				para2Curr, 0, 32, null, 0, 0);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when one paragraph is split into two within a verse and there is
		/// a text change in the first part of the verse before the para split. There is also
		/// a space before the paragraph split. This is significant because the text difference
		/// does not reach the paragraph split. However, we need to extend the diff highlight
		/// range to the highlighted paragraph split.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_ParaSplitMidVerse_TextChangeBeforeSplit1()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraphs
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 20, 1, "They were all together. ");
			int ichV1LimCurr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 2, "Suddenly (if you know what I mean) there was "); // space before split
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 0, "a violent wind sound. ");
			AddVerse(para2Curr, 0, 3, "They saw tongues of fire.");

			// Build up the "revision" paragraph
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 20, 1, "They were all together. ");
			AddVerse(para1Rev, 0, 2, "Suddenly there was "); // matches text at para split
			int iEndTextDiff = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 0, "a violent wind sound. ");
			int iEndVerse2 = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 3, "They saw tongues of fire.");

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// Verify diff
			// Verses 1, 2, and 3 should be in the same paragraph in the revision,
			// but in separate paragraphs in the current version (split in the middle of verse 2).
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01020002), DifferenceType.ParagraphSplitInCurrent);

			// We expect that the subdifference range should extend from the text difference to
			// the paragraph split (not just the text difference).
			Assert.IsNotNull(diff.SubDiffsForParas, "Subdifferences should have been added.");
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.TextDifference,
				para1Curr, ichV1LimCurr + 10, para1Curr.Contents.Length,
				para1Rev, iEndTextDiff - 10, iEndTextDiff);

			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.NoDifference,
				para2Curr, 0, 0, null, 0, 0);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when one paragraph is split into two within a verse and there is
		/// a text change in the first part of the verse before the para split. There is no
		/// space before the paragraph split.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_ParaSplitMidVerse_TextChangeBeforeSplit2()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraphs
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 20, 1, "They were all together. ");
			int ichV1LimCurr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 2, "Suddenly (if you know what I mean) there was"); // no space before split
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 0, "a violent wind sound. ");
			AddVerse(para2Curr, 0, 3, "They saw tongues of fire.");

			// Build up the "revision" paragraph
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 20, 1, "They were all together. ");
			AddVerse(para1Rev, 0, 2, "Suddenly there was "); // doesn't match text at para split because of space.
			int iEndTextDiff = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 0, "a violent wind sound. ");
			int iEndVerse2 = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 3, "They saw tongues of fire.");

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// Verify diff
			// Verses 1, 2, and 3 should be in the same paragraph in the revision,
			// but in separate paragraphs in the current version (split in the middle of verse 2).
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01020002), DifferenceType.ParagraphSplitInCurrent);

			// We expect that the subdifference range text difference should already reach
			// the paragraph split.
			Assert.IsNotNull(diff.SubDiffsForParas, "A subdifference should have been added.");
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.TextDifference,
				para1Curr, ichV1LimCurr + 10, para1Curr.Contents.Length,
				para1Rev, iEndTextDiff - 10, iEndTextDiff);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.NoDifference,
				para2Curr, 0, 0, null, 0, 0);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when one paragraph is split into two within a verse and there is
		/// a text change in the first and second part of the verse.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_ParaSplitMidVerse_TextChanges()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraphs
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 20, 1, "They were all together. ");
			AddVerse(para1Curr, 0, 2, "Suddenly there really was a ");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 0, "violent wind sound. ");
			AddVerse(para2Curr, 0, 3, "They saw tongues of fire. ");

			// Build up the "revision" paragraph
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 20, 1, "They were all together. ");
			AddVerse(para1Rev, 0, 2, "Suddenly there was a ");
			int iSplitPara = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 0, "strong wind noise. ");
			int iEndTextDiff = para1Rev.Contents.Length - 2;
			AddVerse(para1Rev, 0, 3, "They saw tongues of fire. ");

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// Verify diff
			// Verses 1, 2, and 3 should be in the same paragraph in the revision,
			// but in separate paragraphs in the current version (split in the middle of verse 2).
			Difference diff = m_bookMerger.Differences.MoveFirst();
			//DiffTestHelper.VerifyParaDiff(diff, new BCVRef(01020002), DifferenceType.ParagraphSplitInCurrent,
			//    para1Curr, para1Curr.Contents.Length, para1Curr.Contents.Length,
			//    para1Rev, iEndTextDiff + 2, iEndTextDiff + 2);
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01020002), DifferenceType.ParagraphSplitInCurrent);

			Assert.IsNotNull(diff.SubDiffsForParas, "A subdifference should have been added.");
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.TextDifference, para1Curr, 43, 56,
				para1Rev, 43, iEndTextDiff);

			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.TextDifference,
				para2Curr, 0, 18, null, 0, 0);

			// MoveNext should return null because there are no more differences
			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when one paragraph is split into two within a mid-verse and there
		/// is a text change in the first and second part of the verse (before and after the
		/// paragraph split), as well as in the previous and following verses.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_ParaSplitMidVerse_AdjacentChanges()
		{
			IScrTxtPara para1Curr, para2Curr;
			IScrTxtPara para1Rev, para2Rev;
			int iSplitPara;
			CreateData_ParaSplitMidVerse_AdjacentChanges(out para1Curr, out para2Curr,
				out para1Rev, out para2Rev, out iSplitPara);

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(4, m_bookMerger.Differences.Count);

			// First diff shows that "all" was removed from verse 1 in current.
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff, new BCVRef(01020001), DifferenceType.TextDifference, para1Curr, 13, 13,
				para1Rev, 13, 17);

			// Second diff shows a paragraph split in the middle of verse 2 with text differences
			// in the first and last part of the verse.
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01020002), DifferenceType.ParagraphSplitInCurrent);
			Assert.IsNotNull(diff.SubDiffsForParas);
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			// Text difference before paragraph split.
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.TextDifference,
				para1Curr, para1Curr.Contents.Length - 35, para1Curr.Contents.Length,
				para1Rev, 37, 61);
			// Text difference after paragraph split.
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.TextDifference,
				para2Curr, 0, 15, null, 0, 0);

			// Third diff shows a text change in verse three (changed from "tongues" to "flames")
			// Note that the last two letters of these words are not different.
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, new BCVRef(01020003), DifferenceType.TextDifference,
				para2Curr, 33, 37, para1Rev, iSplitPara + 10, iSplitPara + 15);

			// Fourth diff shows a missing paragraph in the current.
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, new BCVRef(01020004), DifferenceType.ParagraphMissingInCurrent,
				para2Curr, para2Curr.Contents.Length, para2Curr.Contents.Length,
				para2Rev, 0, para2Rev.Contents.Length);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Creates the current and revision Scripture data so that there are differences in
		/// adjacent verses. The paragraph split is in the middle of a verse.
		/// </summary>
		/// <param name="para1Curr">The first current para.</param>
		/// <param name="para2Curr">The second current para.</param>
		/// <param name="para1Rev">The first revision para.</param>
		/// <param name="para2Rev">The second revision para.</param>
		/// <param name="iSplitPara">The character offset of the paragraph split in the
		/// revision (at least as far as we can determine with text differences).</param>
		/// ------------------------------------------------------------------------------------
		private void CreateData_ParaSplitMidVerse_AdjacentChanges(out IScrTxtPara para1Curr,
			out IScrTxtPara para2Curr, out IScrTxtPara para1Rev, out IScrTxtPara para2Rev,
			out int iSplitPara)
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Create the "current" paragraphs
			para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 20, 1, "They were together. ");
			AddVerse(para1Curr, 0, 2, "Suddenly (if you know what I mean) there was");
			para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 0, "a violent windy sound. ");
			AddVerse(para2Curr, 0, 3, "They saw flames of fire.");

			// Build up the "revision" paragraph
			para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 20, 1, "They were all together. ");  // 27 at end of verse
			AddVerse(para1Rev, 0, 2, "Suddenly there was a violent wind sound. ");
			iSplitPara = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 3, "They saw tongues of fire.");
			para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 4, "They were filled with the Holy Spirit and spoke in tongues.");
		}
		#endregion

		#region Revert: Paragraph split Mid-Verse
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Setups the current and revision paragraphs when the current is split in the middle of
		/// a verse.
		/// </summary>
		/// <param name="para1Curr">The first paragraph in the current.</param>
		/// <param name="para2Curr">The second paragraph in the current.</param>
		/// <param name="para1Rev">The only paragraph in the revision.</param>
		/// <param name="iSplitPara">The index in the revision paragraph where the current is
		/// split.</param>
		/// ------------------------------------------------------------------------------------
		private void CreateData_ParaSplitMidVerse(out IScrTxtPara para1Curr, out IScrTxtPara para2Curr,
			out IScrTxtPara para1Rev, out int iSplitPara)
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraphs
			para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 20, 6, "Verse 6 part a. ");
			para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 0, "Verse 6 part b with a difference.");
			AddVerse(para2Curr, 0, 7, "Verse 7.");
			AddVerse(para2Curr, 0, 8, "Verse 8.");

			// Build up the "revision" paragraph
			para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 20, 6, "Verse 6 part a. ");
			iSplitPara = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 0, "Verse 6 part b.");
			AddVerse(para1Rev, 0, 7, "Verse 7.");
			AddVerse(para1Rev, 0, 8, "Verse 8.");
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// current book has paragraphs split mid-verse and there is a text difference in the
		/// same verse.
		///
		/// Current:
		///   206Verse 6 part a.
		///   Verse 6 part b with a difference.7Verse 7.8Verse 8. with a change
		///
		/// Revision:
		///   206Verse 6 part a. Verse 6 part b.7Verse 7.8Verse 8. with a small text change
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaSplitMidVerse_TextChangeAfter()
		{
			IScrTxtPara para1Curr;
			IScrTxtPara para2Curr;
			IScrTxtPara para1Rev;
			int iSplitPara;
			CreateData_ParaSplitMidVerse(out para1Curr, out para2Curr, out para1Rev, out iSplitPara);
			AddRunToMockedPara(para2Curr, " with a change",
				ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, " with a small text change",
				ScrStyleNames.NormalParagraph);

			// Detect differences
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// Get the first difference, verify it, and do a ReplaceCurrentWithRevision
			// to simulate clicking the "revert to old" button
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.ParagraphSplitInCurrent, diff.DiffType);
			Assert.AreEqual(01020006, diff.RefStart);
			Assert.IsNotNull(diff.SubDiffsForParas);
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);

			// We expect ReplaceCurrentWithRevision to merge the current para break and make
			// the text change in verse 6.
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			IScrSection sectionCur = (IScrSection)m_genesis.SectionsOS[0];
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			para1Curr = (IScrTxtPara)sectionCur.ContentOA[0];
			Assert.AreEqual("206Verse 6 part a. Verse 6 part b.7Verse 7.8Verse 8. with a change",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual(01020006, sectionCur.VerseRefStart);
			Assert.AreEqual(01020008, sectionCur.VerseRefEnd);

			// Get the remaining difference (a text difference) for the following ScrVerse
			diff = m_bookMerger.Differences.CurrentDifference;
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(01020008, diff.RefStart);
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual("206Verse 6 part a. Verse 6 part b.7Verse 7.8Verse 8. with a small text change",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// TODO: We need to apply the ReplaceCurrentWithRevision in a different order
			// and make sure we have the same result.


			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// current verse has a paragraph split with footnotes.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaSplitMidVerse_WithFootnotes()
		{
			// Build Current section - two paragraphs with verses 1, 2 and 3 and split after verse 2
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 0, 1, "verse one. ");
			AddFootnote(m_genesis, para1Curr, 6, "footnote 1");
			AddVerse(para1Curr, 0, 2, "versay too. ");
			IScrFootnote footnote1 = AddFootnote(m_genesis, para1Curr, 20, "footnote 2"); // just after versay
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 0, "verswa two cunt. "); // 16
			IScrFootnote footnote2 = AddFootnote(m_genesis, para2Curr, 6, "footnote 3"); // just after verswa
			int iV3Curr = para2Curr.Contents.Length;
			AddVerse(para2Curr, 0, 3, "verse three.");
			IScrFootnote footnote3 = AddFootnote(m_genesis, para2Curr, iV3Curr + 6, "footnote 4"); // just after "verse"

			// Build Revision section - a single para with three verses
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara paraRev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(paraRev, 0, 1, "verse one. "); // 12
			AddFootnote(m_genesisRevision, paraRev, 6, "footnote 1");
			AddVerse(paraRev, 0, 2, "verse two. verse two cont. "); // 40
			AddFootnote(m_genesisRevision, paraRev, 19, "footnote 2");
			AddFootnote(m_genesisRevision, paraRev, 31, "footnote 3"); // just after second "verse"
			int iV3Rev = paraRev.Contents.Length;
			AddVerse(paraRev, 0, 3, "verse three.");
			AddFootnote(m_genesisRevision, paraRev, iV3Rev + 6, "footnote 4"); // just before "three"

			// Detect differences
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis

			// We expect one para split difference with two subdifferences.
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01001002), new BCVRef(01001002),
				DifferenceType.ParagraphSplitInCurrent);
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.TextDifference,
				para1Curr, 18, para1Curr.Contents.Length,
				paraRev, 18, iV3Rev - 4);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.TextDifference,
				para2Curr, 0, 14, null, 0, 0);

			// Replace the current with revision (remove para split)
			m_bookMerger.ReplaceCurrentWithRevision(diff); // we expect this to merge the current paras

			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			para1Curr = (IScrTxtPara)sectionCur.ContentOA[0];
			Assert.AreEqual("1verse" + StringUtils.kChObject + " one. 2verse"
				+ StringUtils.kChObject + " two. verse"	+ StringUtils.kChObject +
				" two cont. 3verse" + StringUtils.kChObject + " three.",
				para1Curr.Contents.Text);
			Assert.AreEqual(01001001, sectionCur.VerseRefStart);
			Assert.AreEqual(01001003, sectionCur.VerseRefEnd);

			// We expect that the two footnotes will be found in the first paragraph.
			Assert.AreEqual(4, m_genesis.FootnotesOS.Count);
			VerifyFootnote(m_genesis.FootnotesOS[0], para1Curr, 6);
			VerifyFootnote(m_genesis.FootnotesOS[1], para1Curr, 19);
			VerifyFootnote(m_genesis.FootnotesOS[2], para1Curr, 31);
			VerifyFootnote(m_genesis.FootnotesOS[3], para1Curr, 49);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// current verse has a paragraph split with footnotes additions in the Current.
		/// The footnotes differ between the current and the revision.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaSplitMidVerse_FootnoteDiffs()
		{
			// Build Current section - two paragraphs with verses 1, 2 and 3 and split after verse 2
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 0, 1, "verse one. ");
			IScrFootnote footnote1Curr = AddFootnote(m_genesis, para1Curr, 6, "futnoti 1");
			AddVerse(para1Curr, 0, 2, "versay too.");
			IScrFootnote footnote2Curr = AddFootnote(m_genesis, para1Curr, 20, "futnoti 2"); // just after versay
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 0, "verswa two cunt. "); // 16
			IScrFootnote footnote3Curr = AddFootnote(m_genesis, para2Curr, 6, "futnoti 3"); // just after verswa
			int iV3Curr = para2Curr.Contents.Length;
			AddVerse(para2Curr, 0, 3, "verse three.");
			IScrFootnote footnote4Curr = AddFootnote(m_genesis, para2Curr, iV3Curr + 6, "futnoti 4"); // just after "verse"

			// Build Revision section - a single para with three verses
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara paraRev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(paraRev, 0, 1, "verse one. "); // 12
			IScrFootnote footnote1Rev = AddFootnote(m_genesisRevision, paraRev, 6, "footnote 1");
			AddVerse(paraRev, 0, 2, "verse two. verse two cont. "); // 40
			IScrFootnote footnote2Rev = AddFootnote(m_genesisRevision, paraRev, 19, "footnote 2");
			IScrFootnote footnote3Rev = AddFootnote(m_genesisRevision, paraRev, 31, "footnote 3"); // just after second "verse"
			int iV3Rev = paraRev.Contents.Length;
			AddVerse(paraRev, 0, 3, "verse three.");
			IScrFootnote footnote4Rev = AddFootnote(m_genesisRevision, paraRev, iV3Rev + 6, "footnote 4"); // just before "three"

			// Detect differences
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis

			// We expect 3 differences
			Assert.AreEqual(3, m_bookMerger.Differences.Count);

			// Verify text difference in footnote in verse 1
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(1, diff1.SubDiffsForORCs.Count);
			DiffTestHelper.VerifyParaDiff(diff1, new BCVRef(01001001), DifferenceType.FootnoteDifference,
				para1Curr, 6, 7, paraRev, 6, 7);
			DiffTestHelper.VerifySubDiffFootnote(diff1, 0, DifferenceType.TextDifference,
				footnote1Curr, 1, 7, footnote1Rev, 1, 8);

			// We expect one para split difference with two subdifferences for paras and
			// 4 sub diffs for ORCs.
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff2, new BCVRef(01001002), new BCVRef(01001002),
				DifferenceType.ParagraphSplitInCurrent);
			Assert.AreEqual(2, diff2.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 0, DifferenceType.TextDifference,
				para1Curr, 18, para1Curr.Contents.Length,
				paraRev, 18, iV3Rev - 4);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 1, DifferenceType.TextDifference,
				para2Curr, 0, 14, null, 0, 0);
			Assert.AreEqual(4, diff2.SubDiffsForORCs.Count);
			DiffTestHelper.VerifySubDiffFootnote(diff2, 0, DifferenceType.NoDifference,
				footnote2Curr, 0, 9, null, 0, 0);
			DiffTestHelper.VerifySubDiffFootnote(diff2, 1, DifferenceType.NoDifference,
				footnote3Curr, 0, 9, null, 0, 0);
			DiffTestHelper.VerifySubDiffFootnote(diff2, 2, DifferenceType.NoDifference,
				null, 0, 0, footnote2Rev, 0, 10);
			DiffTestHelper.VerifySubDiffFootnote(diff2, 3, DifferenceType.NoDifference,
				null, 0, 0, footnote3Rev, 0, 10);

			// Verify Text difference in footnote in verse 3
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(1, diff3.SubDiffsForORCs.Count);
			DiffTestHelper.VerifyParaDiff(diff3, new BCVRef(01001003), DifferenceType.FootnoteDifference,
				para2Curr, iV3Curr + 6, iV3Curr + 7, paraRev, iV3Rev + 6, iV3Rev + 7);
			DiffTestHelper.VerifySubDiffFootnote(diff3, 0, DifferenceType.TextDifference,
				footnote4Curr, 1, 7, footnote4Rev, 1, 8);

			// Revert diff1 - footnote text difference in verse 1
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual("1verse" + StringUtils.kChObject + " one. 2versay"
				+ StringUtils.kChObject + " too.", sectionCur.ContentOA[0].Contents.Text);
			Assert.AreEqual("footnote 1", m_genesis.FootnotesOS[0][0].Contents.Text);


			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("1verse" + StringUtils.kChObject + " one. 2verse"
				+ StringUtils.kChObject + " two. verse" + StringUtils.kChObject +
				" two cont. 3verse" + StringUtils.kChObject + " three.", sectionCur.ContentOA[0].Contents.Text);
			Assert.AreEqual(01001001, sectionCur.VerseRefStart);
			Assert.AreEqual(01001003, sectionCur.VerseRefEnd);
			Assert.AreEqual("footnote 2", m_genesis.FootnotesOS[1][0].Contents.Text);
			Assert.AreEqual("footnote 3", m_genesis.FootnotesOS[2][0].Contents.Text);

			// Revert footnote text difference in verse 3
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("1verse" + StringUtils.kChObject + " one. 2verse"
				+ StringUtils.kChObject + " two. verse" + StringUtils.kChObject +
				" two cont. 3verse" + StringUtils.kChObject + " three.",
				sectionCur.ContentOA[0].Contents.Text);
			Assert.AreEqual("footnote 4", m_genesis.FootnotesOS[3][0].Contents.Text);

			// Replace the current with revision (remove para split)
			// We expect that the 4 footnotes will be found in the first paragraph.
			Assert.AreEqual(4, m_genesis.FootnotesOS.Count);
			VerifyFootnote(m_genesis.FootnotesOS[0], para1Curr, 6);
			VerifyFootnote(m_genesis.FootnotesOS[1], para1Curr, 19);
			VerifyFootnote(m_genesis.FootnotesOS[2], para1Curr, 31);
			VerifyFootnote(m_genesis.FootnotesOS[3], para1Curr, 49);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// current verse has a paragraph split with footnotes. 3 footnotes are missing in the
		/// current
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaSplitMidVerse_MissingFootnotes()
		{
			// Build Current section - two paragraphs with verses 1, 2 and 3 and split after verse 2
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 0, 1, "verse one. ");
			AddVerse(para1Curr, 0, 2, "versay too.");
			IScrFootnote footnote1Curr = AddFootnote(m_genesis, para1Curr, 19, "footnote 2"); // just after versay
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 0, "verswa two cunt. "); // 16
			int iV3Curr = para2Curr.Contents.Length;
			AddVerse(para2Curr, 0, 3, "verse three.");

			// Build Revision section - a single para with three verses
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara paraRev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(paraRev, 0, 1, "verse one. "); // 12
			IScrFootnote footnote1Rev = AddFootnote(m_genesisRevision, paraRev, 6, "footnote 1");
			AddVerse(paraRev, 0, 2, "verse two. verse two cont. "); // 40
			IScrFootnote footnote2Rev = AddFootnote(m_genesisRevision, paraRev, 19, "footnote 2");
			IScrFootnote footnote3Rev = AddFootnote(m_genesisRevision, paraRev, 31, "footnote 3"); // just after second "verse"
			int iV3Rev = paraRev.Contents.Length;
			AddVerse(paraRev, 0, 3, "verse three.");
			IScrFootnote footnote4Rev = AddFootnote(m_genesisRevision, paraRev, iV3Rev + 6, "footnote 4"); // just before "three"

			// Detect differences
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis

			// We expect three differences
			Assert.AreEqual(3, m_bookMerger.Differences.Count);

			// Verify footnote missing in current
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, new BCVRef(01001001), DifferenceType.FootnoteMissingInCurrent,
				para1Curr, 6, 6, paraRev, 6, 7);
			Assert.AreEqual(1, diff1.SubDiffsForORCs.Count);
			DiffTestHelper.VerifySubDiffFootnoteRev(diff1, 0, footnote1Rev);

			// We expect one para split difference with two subdifferences for paragraphs and
			// and 3 sub diffs for ORCs.
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff2, new BCVRef(01001002), new BCVRef(01001002),
				DifferenceType.ParagraphSplitInCurrent);
			Assert.AreEqual(2, diff2.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 0,
				DifferenceType.TextDifference |	DifferenceType.FootnoteMissingInCurrent,
				para1Curr, 17, para1Curr.Contents.Length,
				paraRev, 18, iV3Rev - 4);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 1,
				DifferenceType.TextDifference | DifferenceType.FootnoteMissingInCurrent,
				para2Curr, 0, 13, null, 0, 0);
			Assert.AreEqual(3, diff2.SubDiffsForORCs.Count);
			DiffTestHelper.VerifySubDiffFootnote(diff2, 0, DifferenceType.NoDifference,
				footnote1Curr, 0, 10, null, 0, 0);
			DiffTestHelper.VerifySubDiffFootnote(diff2, 1, DifferenceType.NoDifference,
				null, 0, 0, footnote2Rev, 0, 10);
			DiffTestHelper.VerifySubDiffFootnote(diff2, 2, DifferenceType.NoDifference,
				null, 0, 0, footnote3Rev, 0, 10);

			// Verify footnote missing in verse 3
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff3, new BCVRef(01001003), DifferenceType.FootnoteMissingInCurrent,
				para2Curr, iV3Curr + 6, iV3Curr + 6, paraRev, iV3Rev + 6, iV3Rev + 7);
			DiffTestHelper.VerifySubDiffFootnoteRev(diff3, 0, footnote4Rev);

			// Revert footnote missing in verse 1
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual("1verse" + StringUtils.kChObject + " one. 2versay"
				+ StringUtils.kChObject + " too.",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("footnote 1",
				((IScrTxtPara)m_genesis.FootnotesOS[0][0]).Contents.Text);

			// Replace the current with revision (remove para split)
			m_bookMerger.ReplaceCurrentWithRevision(diff2); // we expect this to merge the current paras
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			para1Curr = (IScrTxtPara)sectionCur.ContentOA[0];
			Assert.AreEqual("1verse" + StringUtils.kChObject + " one. 2verse"
				+ StringUtils.kChObject + " two. verse" + StringUtils.kChObject +
				" two cont. 3verse three.",
				para1Curr.Contents.Text);
			Assert.AreEqual(01001001, sectionCur.VerseRefStart);
			Assert.AreEqual(01001003, sectionCur.VerseRefEnd);
			Assert.AreEqual("footnote 2",
				((IScrTxtPara)m_genesis.FootnotesOS[1][0]).Contents.Text);
			Assert.AreEqual("footnote 3",
				((IScrTxtPara)m_genesis.FootnotesOS[2][0]).Contents.Text);

			// Revert footnote missing in verse 3
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual("1verse" + StringUtils.kChObject + " one. 2verse"
				+ StringUtils.kChObject + " two. verse" + StringUtils.kChObject +
				" two cont. 3verse" + StringUtils.kChObject + " three.",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("footnote 4",
				((IScrTxtPara)m_genesis.FootnotesOS[3][0]).Contents.Text);

			// We expect that the two footnotes will be found in the first paragraph.
			Assert.AreEqual(4, m_genesis.FootnotesOS.Count);
			VerifyFootnote(m_genesis.FootnotesOS[0], para1Curr, 6);
			VerifyFootnote(m_genesis.FootnotesOS[1], para1Curr, 19);
			VerifyFootnote(m_genesis.FootnotesOS[2], para1Curr, 31);
			VerifyFootnote(m_genesis.FootnotesOS[3], para1Curr, 49);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when one
		/// paragraph is split into two within a mid-verse and there is a text change in the
		/// first and second part of the verse (before and after the paragraph split), as well
		/// as in the previous and following verses. In this test, we revert the differences
		/// from the first to the last.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaSplitMidVerse_AdjacentChanges1()
		{
			IScrTxtPara para1Curr, para2Curr;
			IScrTxtPara para1Rev, para2Rev;
			int iSplitPara;
			CreateData_ParaSplitMidVerse_AdjacentChanges(out para1Curr, out para2Curr,
				out para1Rev, out para2Rev, out iSplitPara);

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(4, m_bookMerger.Differences.Count);

			// Revert the differences from the first to the last.
			Difference diff = m_bookMerger.Differences.MoveFirst();
			// Revert the text difference in verse 1 (put "all" back in).
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual("201They were all together. 2Suddenly (if you know what I mean) there was",
				para1Curr.Contents.Text);

			diff = m_bookMerger.Differences.CurrentDifference;
			// Revert the complex paragraph split difference in verse 2 (including two text diffs)

			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual("201They were all together. 2Suddenly there was a violent wind sound." +
				" 3They saw flames of fire.", para1Curr.Contents.Text);

			diff = m_bookMerger.Differences.CurrentDifference;
			// Revert the text difference in verse 3 ("flames" back to "tongues")
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual("201They were all together. 2Suddenly there was a violent wind sound." +
				" 3They saw tongues of fire.", para1Curr.Contents.Text);

			diff = m_bookMerger.Differences.CurrentDifference;
			// Revert the missing paragraph
			IScrSection sectionCur = (IScrSection)para1Curr.Owner.Owner;
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count,
				"Should only have one para before last revert.");
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			IScrTxtPara newPara = (IScrTxtPara)sectionCur.ContentOA[1];
			Assert.AreEqual("4They were filled with the Holy Spirit and spoke in tongues.",
				newPara.Contents.Text);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when one
		/// paragraph is split into two within a mid-verse and there is a text change in the
		/// first and second part of the verse (before and after the paragraph split), as well
		/// as in the previous and following verses. In this test, we revert the differences
		/// from the last to the first.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaSplitMidVerse_AdjacentChanges2()
		{
			IScrTxtPara para1Curr, para2Curr;
			IScrTxtPara para1Rev, para2Rev;
			int iSplitPara;
			CreateData_ParaSplitMidVerse_AdjacentChanges(out para1Curr, out para2Curr,
				out para1Rev, out para2Rev, out iSplitPara);

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(4, m_bookMerger.Differences.Count);

			// Revert the differences from the last to the first.
			Difference diff = m_bookMerger.Differences.MoveFirst();
			diff = m_bookMerger.Differences.MoveNext();
			diff = m_bookMerger.Differences.MoveNext();
			diff = m_bookMerger.Differences.MoveNext();

			// Revert the missing paragraph
			IScrSection sectionCur = (IScrSection)para1Curr.Owner.Owner;
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count,
				"Should have two paras before first revert.");
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			IScrTxtPara newPara = (IScrTxtPara)sectionCur.ContentOA[2];
			Assert.AreEqual("4They were filled with the Holy Spirit and spoke in tongues.",
				newPara.Contents.Text);

			diff = m_bookMerger.Differences.CurrentDifference;
			// Revert the text difference in verse 3 ("flames" back to "tongues")
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual("a violent windy sound. 3They saw tongues of fire.", para2Curr.Contents.Text);

			diff = m_bookMerger.Differences.CurrentDifference;
			// Revert the complex paragraph split difference in verse 2 (including two text diffs)
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("201They were together. 2Suddenly there was a violent wind sound." +
				" 3They saw tongues of fire.", para1Curr.Contents.Text);

			diff = m_bookMerger.Differences.CurrentDifference;
			// Revert the text difference in verse 1 (put "all" back in).
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual("201They were all together. 2Suddenly there was a violent wind sound." +
				" 3They saw tongues of fire.", para1Curr.Contents.Text);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when there are
		/// two paragraph split differences.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaSplitMidVerse_Multi()
		{
			IScrTxtPara para1Curr, para2Curr;
			IScrTxtPara para1Rev, para2Rev;
			int iSplitPara;

			// Create the "current" paragraphs
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 20, 1, "They were together. ");
			AddVerse(para1Curr, 0, 2, "Suddenly ");
			int iV2TxtChgMinCurr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 0, "(if you know what I mean) there was");
			para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 0, "a violent windy sound. ");
			AddVerse(para2Curr, 0, 3, "They saw ");
			int iV3TxtChgMinCurr = para2Curr.Contents.Length;
			AddVerse(para2Curr, 0, 0, "flames");
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para3Curr, 0, 0, "of fire.");

			// Build up the "revision" paragraph
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");
			para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 20, 1, "They were all together. ");  // 27 at end of verse
			AddVerse(para1Rev, 0, 2, "Suddenly ");
			int iV2TxtChgMinRev = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 0, "there was a violent wind");
			int iV2TxtChgLimRev = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 0, " sound. ");
			iSplitPara = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 3, "They saw ");
			int iV3TxtChgMinRev = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 0, "tongues of fire.");
			para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 4, "They were filled with the Holy Spirit and spoke in tongues.");

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);

			// Verify the Differences
			Assert.AreEqual(4, m_bookMerger.Differences.Count);
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			Difference diff4 = m_bookMerger.Differences.MoveNext();

			// Text difference in verse 1
			DiffTestHelper.VerifyParaDiff(diff1, new BCVRef(01020001), DifferenceType.TextDifference,
				para1Curr, 13, 13, para1Rev, 13, 17);

			// Para split in verse 2
			DiffTestHelper.VerifyParaStructDiff(diff2, new BCVRef(01020002), new BCVRef(01020002),
				DifferenceType.ParagraphSplitInCurrent);
			Assert.AreEqual(2, diff2.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 0, DifferenceType.TextDifference,
				para1Curr, iV2TxtChgMinCurr, para1Curr.Contents.Length,
				para1Rev, iV2TxtChgMinRev, iV2TxtChgLimRev);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 1, DifferenceType.TextDifference,
				para2Curr, 0, 15,
				null, 0, 0);

			// Para split in verse 3
			DiffTestHelper.VerifyParaStructDiff(diff3, new BCVRef(01020003), new BCVRef(01020003),
				DifferenceType.ParagraphSplitInCurrent);
			Assert.AreEqual(2, diff3.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff3, 0, DifferenceType.TextDifference,
				para2Curr, iV3TxtChgMinCurr, para2Curr.Contents.Length,
				para1Rev, iV3TxtChgMinRev, iV3TxtChgMinRev + 8);
			DiffTestHelper.VerifySubDiffTextCompared(diff3, 1, DifferenceType.NoDifference,
				para3Curr, 0, 0,
				null, 0, 0);

			// Verse 4 missing in current
			DiffTestHelper.VerifyParaDiff(diff4, new BCVRef(01020004), DifferenceType.ParagraphMissingInCurrent,
				para3Curr, para3Curr.Contents.Length, para3Curr.Contents.Length,
				para2Rev, 0, para2Rev.Contents.Length);

			// Revert the differences from the first to the last.
			// Revert the text difference in verse 1 (put "all" back in).
			Difference diff = m_bookMerger.Differences.MoveFirst();
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual("201They were all together. 2Suddenly (if you know what I mean) there was",
				para1Curr.Contents.Text);


			// Revert the complex paragraph split difference in verse 2 (including two text diffs)
			diff = m_bookMerger.Differences.CurrentDifference;
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual("201They were all together. 2Suddenly there was a violent wind sound." +
				" 3They saw flames", para1Curr.Contents.Text);

			// Revert the text difference in verse 3 ("flames" back to "tongues")
			diff = m_bookMerger.Differences.CurrentDifference;
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual("201They were all together. 2Suddenly there was a violent wind sound." +
				" 3They saw tongues of fire.", para1Curr.Contents.Text);

			diff = m_bookMerger.Differences.CurrentDifference;
			// Revert the missing paragraph
			IScrSection newSectionCur = (IScrSection)para1Curr.Owner.Owner;
			Assert.AreEqual(1, newSectionCur.ContentOA.ParagraphsOS.Count,
				"Should only have one para before last revert.");
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual(2, newSectionCur.ContentOA.ParagraphsOS.Count);
			IScrTxtPara newPara = (IScrTxtPara)newSectionCur.ContentOA[1];
			Assert.AreEqual("4They were filled with the Holy Spirit and spoke in tongues.",
				newPara.Contents.Text);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the current
		/// has one verse in three paragraphs and when the corresponding revision verse has only one paragraph.
		/// There is a text change in the first and last parts of the verse.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultiParasInVerse_OneToThreeParas_TextChanges()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraphs
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 30, 33, "For as churning the cream produces butter,");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 0, "and as twisting the nose produces blood,");
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para3Curr, 0, 0, "then stirring up anger produces strife.");

			// Build up the "revision" paragraph
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 33, "For as churning the milk produces butter, and as twisting "
				+ "the nose produces blood, so");
			int ichRev = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 0, " stirring up anger produces strife.");

			m_bookMerger.DetectDifferences(null);

			// We expect one paragraph structure difference with three subdifferences.
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01030033), new BCVRef(01030033),
				DifferenceType.ParagraphSplitInCurrent);
			Assert.IsNotNull(diff.SubDiffsForParas);
			Assert.AreEqual(3, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.TextDifference,
				para1Curr, 24, para1Curr.Contents.Text.Length,
				para1Rev, 24, ichRev);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.TextDifference,
				para2Curr, 0, para2Curr.Contents.Text.Length, null, 0, 0);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 2, DifferenceType.TextDifference,
				para3Curr, 0, 4, null, 0, 0);

			// Revert the difference in verse 33: para split, and text changes in three
			// ScrVerses in the current
			IScrSection sectionCurr = (IScrSection)para1Curr.Owner.Owner;
			Assert.AreEqual(3, sectionCurr.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff);

			Assert.AreEqual(1, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3033For as churning the milk produces butter, and as twisting "
				+ "the nose produces blood, so stirring up anger produces strife.",
				((IScrTxtPara)sectionCurr.ContentOA[0]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}


		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when a paragraph is split into two, in mid-verse.
		/// Except that in this case more text is added to verse to verse 2 as an extra paragraph -
		/// Do not highlight the matching original text!
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaSplitMidVerse_SimpleParas_CorrFirst()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "The Holy Spirit Comes");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "The Holy Spirit Comes");

			// Build up the Current
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 2, 1, "They were all together. ");
			AddVerse(para1Curr, 0, 2, "Suddenly there was");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 0, "a violent wind sound. "); // Added para
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para3Curr, 0, 3, "They saw tongues of fire. ");

			// Build up the "revision" paragraphs
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 2, 1, "They were all together. ");
			AddVerse(para1Rev, 0, 2, "Suddenly there was");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 3, "They saw tongues of fire. ");

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);

			// ParaMerged diff identifies the first paras
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, 01002002, DifferenceType.ParagraphStructureChange);
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffParaReferencePoints(diff, para1Curr, para1Curr.Contents.Length, para1Rev, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffParaAdded(diff, 1, DifferenceType.ParagraphAddedToCurrent,
				para2Curr, para2Curr.Contents.Length);

			// Revert the difference
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("21They were all together. 2Suddenly there was",
				sectionCur.ContentOA[0].Contents.Text);
			Assert.AreEqual("3They saw tongues of fire. ",
				sectionCur.ContentOA[1].Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when one
		/// paragraph is split into two within a mid-verse and there is a corrolation in the
		/// first part the verse (before the paragraph split) and the second part (after the
		/// paragraph split) of the verse is added , as well as in the previous and following
		/// verses. In this test, we revert the differences from the first to the last.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaSplitMidVerse_CorrFirst()
		{
			IScrTxtPara para1Curr, para2Curr;
			IScrTxtPara para1Rev, para2Rev;
			int iSplitPara;
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Create the "current" paragraphs
			para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 20, 1, "They were together. ");
			AddVerse(para1Curr, 0, 2, "Suddenly there was a violent wind sound. ");
			para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 0, "Like that. ");  // segement added in new paragraph
			AddVerse(para2Curr, 0, 3, "They saw flames of fire.");

			// Build up the "revision" paragraph
			para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 20, 1, "They were all together. ");  // 27 at end of verse
			AddVerse(para1Rev, 0, 2, "Suddenly there was a violent wind sound. ");
			iSplitPara = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 3, "They saw tongues of fire.");
			para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 4, "They were filled with the Holy Spirit and spoke in tongues.");

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(4, m_bookMerger.Differences.Count);

			// Verify text differnce in verse 1
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, new BCVRef(01020001), DifferenceType.TextDifference,
				para1Curr, 13, 13, para1Rev, 13, 17);

			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff2, new BCVRef(01020002), DifferenceType.ParagraphSplitInCurrent);
			Assert.AreEqual(2, diff2.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffParaReferencePoints(diff2, para1Curr, para1Curr.Contents.Length, para1Rev, iSplitPara);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 1, DifferenceType.TextDifference,
				para2Curr, 0, 11, null, 0, 0);

			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff3, new BCVRef(01020003), DifferenceType.TextDifference,
				para2Curr, 21, 25, para1Rev, iSplitPara + 10, iSplitPara + 15);

			Difference diff4 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff4, new BCVRef(01020004), DifferenceType.ParagraphMissingInCurrent,
				para2Curr, para2Curr.Contents.Length, para2Curr.Contents.Length,
				para2Rev, 0, para2Rev.Contents.Length);

			// Revert the differences from the first to the last.
			// Revert the text difference in verse 1 (put "all" back in).
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("201They were all together. 2Suddenly there was a violent wind sound. ",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("Like that. 3They saw flames of fire.",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);

			// Revert the complex paragraph split difference in verse 2
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("201They were all together. 2Suddenly there was a violent wind sound." +
				" 3They saw flames of fire.",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Revert the text difference in verse 3 ("flames" back to "tongues")
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual("201They were all together. 2Suddenly there was a violent wind sound." +
				" 3They saw tongues of fire.",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Revert the missing paragraph
			m_bookMerger.ReplaceCurrentWithRevision(diff4);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			IScrTxtPara newPara = (IScrTxtPara)sectionCur.ContentOA[1];
			Assert.AreEqual("4They were filled with the Holy Spirit and spoke in tongues.",
				newPara.Contents.Text);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when one
		/// paragraph is split into two within a mid-verse and there is a corrolation in the
		/// first part the verse (before the paragraph split) and the second part (after the
		/// paragraph split) of the verse is added , as well as in the previous and following
		/// verses. In this test, we revert the differences from the first to the last.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaSplitMidVerse_CorrLast()
		{
			IScrTxtPara para1Curr, para2Curr;
			IScrTxtPara para1Rev, para2Rev;
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Create the "current" paragraphs
			para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 20, 1, "They were together. ");
			int ichV2MinCur = para1Curr.Contents.Length + 1;
			AddVerse(para1Curr, 0, 2, "Like that. ");
			para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 0, "Suddenly there was a violent wind sound. ");
			int ichV2LimCurr = para2Curr.Contents.Length;
			AddVerse(para2Curr, 0, 3, "They saw flames of fire.");

			// Build up the "revision" paragraph
			para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 20, 1, "They were all together. ");  // 27 at end of verse
			AddVerse(para1Rev, 0, 2, "Suddenly there was a violent wind sound. ");
			int ichV3LimRev = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 3, "They saw tongues of fire.");
			para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 4, "They were filled with the Holy Spirit and spoke in tongues.");

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(4, m_bookMerger.Differences.Count);

			// Verify text differnce in verse 1
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, new BCVRef(01020001), DifferenceType.TextDifference,
				para1Curr, 13, 13, para1Rev, 13, 17);

			// Verse 2 has a verse segment added and paragraph split
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff2, new BCVRef(01020002), DifferenceType.ParagraphSplitInCurrent);
			Assert.AreEqual(2, diff2.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 0, DifferenceType.TextDifference,
				para1Curr, ichV2MinCur, para1Curr.Contents.Length,
				para1Rev, 28, 28);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 1, DifferenceType.NoDifference,
				para2Curr, 0, 0, null, 0, 0);

			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff3, new BCVRef(01020003), DifferenceType.TextDifference,
				para2Curr, ichV2LimCurr + 10, ichV2LimCurr + 14,
				para1Rev, ichV3LimRev + 10, ichV3LimRev + 15);

			Difference diff4 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff4, new BCVRef(01020004), DifferenceType.ParagraphMissingInCurrent,
				para2Curr, para2Curr.Contents.Length, para2Curr.Contents.Length,
				para2Rev, 0, para2Rev.Contents.Length);

			// Revert the differences from the first to the last.
			// Revert the text difference in verse 1 (put "all" back in).
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual("201They were all together. 2Like that. ",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("Suddenly there was a violent wind sound. 3They saw flames of fire.",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);

			// Revert the complex paragraph split difference in verse 2
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual("201They were all together. 2Suddenly there was a violent wind sound." +
				" 3They saw flames of fire.",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Revert the text difference in verse 3 ("flames" back to "tongues")
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual("201They were all together. 2Suddenly there was a violent wind sound." +
				" 3They saw tongues of fire.",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Revert the missing paragraph
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count,
				"Should only have one para before last revert.");
			m_bookMerger.ReplaceCurrentWithRevision(diff4);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			IScrTxtPara newPara = (IScrTxtPara)sectionCur.ContentOA[1];
			Assert.AreEqual("4They were filled with the Holy Spirit and spoke in tongues.",
				newPara.Contents.Text);
		}
		#endregion

		#region DetectDiffs: Paragraph Merge at Verse Start (boundary)
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when two paragraphs are merged into one, at the start of a verse.
		/// </summary>
		/// <remarks>Here is a readable version of the test data we will construct:
		/// *********************** Revision ******************************
		/// The Holy Spirit Comes
		///     1They were all together.
		///		2Suddenly there was a violent wind sound. 3They saw tongues of fire. 4They were
		/// filled with the Holy Spirit and spoke in tongues.
		/// </remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_ParaMergeAtVerseStart1()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "The Holy Spirit Comes");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "The Holy Spirit Comes");

			// Build up the Current
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 2, 1, "They were all together. "); //typical
			int ichV1LimCurr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 2, "Suddenly there was a violent wind sound. ");
			AddVerse(para1Curr, 0, 3, "They saw tongues of fire. ");
			AddVerse(para1Curr, 0, 4, "They were filled with the Holy Spirit and spoke in tongues.");

			// Build up the "revision" paragraphs
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 2, 1, "They were all together. "); //unusual white space at end of para
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 2, "Suddenly there was a violent wind sound. ");
			AddVerse(para2Rev, 0, 3, "They saw tongues of fire. ");
			AddVerse(para2Rev, 0, 4, "They were filled with the Holy Spirit and spoke in tongues.");

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// ParaMerged diff identifies the first paras
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01002001), DifferenceType.ParagraphMergedInCurrent);
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.NoDifference,
				para1Curr, ichV1LimCurr, ichV1LimCurr,
				para1Rev, para1Rev.Contents.Length, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.NoDifference,
				null, 0, 0, para2Rev, 0, 0);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when two paragraphs are merged into one, at the start of a verse.
		/// </summary>
		/// <remarks> Similar to above, but this time there is a typical white space difference
		/// where the paragraphs were merged.
		/// </remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_ParaMergeAtVerseStart2()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "The Holy Spirit Comes");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "The Holy Spirit Comes");

			// Build up the Current
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 2, 1, "They were all together. "); //typical whitespace
			int ichV1LimCurr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 2, "Suddenly there was a violent wind sound. ");
			AddVerse(para1Curr, 0, 3, "They saw tongues of fire. ");
			AddVerse(para1Curr, 0, 4, "They were filled with the Holy Spirit and spoke in tongues.");

			// Build up the "revision" paragraphs
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 2, 1, "They were all together."); //typical whitespace
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 2, "Suddenly there was a violent wind sound. ");
			AddVerse(para2Rev, 0, 3, "They saw tongues of fire. ");
			AddVerse(para2Rev, 0, 4, "They were filled with the Holy Spirit and spoke in tongues.");

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// We expect a text difference at the paragraph split (missing space)
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff, new BCVRef(01002001), DifferenceType.TextDifference,
				para1Curr, ichV1LimCurr - 1, ichV1LimCurr,
				para1Rev, para1Rev.Contents.Length, para1Rev.Contents.Length);

			// We expect a paragraph split at the end of verse 1.
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01002001), DifferenceType.ParagraphMergedInCurrent);
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.NoDifference,
				para1Curr, ichV1LimCurr, ichV1LimCurr,
				para1Rev, para1Rev.Contents.Length, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.NoDifference,
				null, 0, 0, para2Rev, 0, 0);
		}
		#endregion

		#region Revert: Paragraph merge at verse start (boundary)
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// current book has a paragraph merge at a verse boundary.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaMergeAtVerseStart()
		{
			// Build Current section - a single para with three verses
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 0, 1, "verse one. ");
			AddVerse(para1Curr, 0, 2, "verse two. ");
			AddVerse(para1Curr, 0, 3, "verse three.");

			// Build Revision section - two paragraphs with verses 1, 2 and 3 and split after verse 1
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 0, 1, "verse one. "); //has space; no text difference
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.Line1);
			AddVerse(para2Rev, 0, 2, "verse two. ");
			AddVerse(para2Rev, 0, 3, "verse three.");

			// Detect differences
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// Get the first difference, verify it
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.ParagraphMergedInCurrent, diff.DiffType);
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			Assert.AreEqual(01001001, diff.RefStart);

			//Revert!
			m_bookMerger.ReplaceCurrentWithRevision(diff); // we expect this to split the current para

			//verify the revert
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			para1Curr = (IScrTxtPara)sectionCur.ContentOA[0];
			IScrTxtPara para2Curr = (IScrTxtPara)sectionCur.ContentOA[1];
			Assert.AreEqual("1verse one. ", para1Curr.Contents.Text);
			Assert.AreEqual(ScrStyleNames.NormalParagraph, para1Curr.StyleName);
			Assert.AreEqual(01001001, sectionCur.VerseRefStart);
			Assert.AreEqual(01001003, sectionCur.VerseRefEnd);
			Assert.AreEqual("2verse two. 3verse three.", para2Curr.Contents.Text);
			Assert.AreEqual(ScrStyleNames.Line1, para2Curr.StyleName);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when one
		/// paragraph is split into two at a verse boundary when there are footnotes before and
		/// after the split.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaMergeAtVerseStart_Footnotes()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraphs with footnotes.
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 20, 1, "They were all together. ");
			IScrFootnote footnote1Curr = AddFootnote(m_genesis, para1Curr,
				para1Curr.Contents.Text.Length - 2, "First footnote");
			int iSplitPara = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 2, "Suddenly there was a violent wind sound. ");
			IScrFootnote footnote2Curr = AddFootnote(m_genesis, para1Curr,
				para1Curr.Contents.Text.Length - 2, "Second footnote");
			AddVerse(para1Curr, 0, 3, "They saw tongues of fire.");
			IScrFootnote footnote3Curr = AddFootnote(m_genesis, para1Curr,
				para1Curr.Contents.Text.Length - 1, "Third footnote");

			// Build up the "revision" paragraph with footnotes.
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 20, 1, "They were all together. ");
			IScrFootnote footnote1Rev = AddFootnote(m_genesisRevision, para1Rev,
				para1Rev.Contents.Length - 2, "First footnote");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 2, "Suddenly there was a violent wind sound. ");
			int ichFootnote2Rev = para2Rev.Contents.Text.Length - 2;
			IScrFootnote footnote2Rev = AddFootnote(m_genesisRevision, para2Rev,
				ichFootnote2Rev, "Second footnote");
			AddVerse(para2Rev, 0, 3, "They saw tongues of fire.");
			IScrFootnote footnote3Rev = AddFootnote(m_genesisRevision, para2Rev,
				para2Rev.Contents.Text.Length - 1, "Third footnote");

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01020001), DifferenceType.ParagraphMergedInCurrent);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.NoDifference,
				para1Curr, iSplitPara, iSplitPara,
				para1Rev, para1Rev.Contents.Length, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.NoDifference,
				null, 0, 0, para2Rev, 0, 0);

			// Revert to revision to remove the paragraph break. Confirm that footnotes are intact.
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("201They were all together" + StringUtils.kChObject + ". ",
				para1Curr.Contents.Text);
			IScrTxtPara para2Curr = (IScrTxtPara)sectionCur.ContentOA[1];
			Assert.AreEqual("2Suddenly there was a violent wind sound" + StringUtils.kChObject + ". " +
				"3They saw tongues of fire" + StringUtils.kChObject + ".", para2Curr.Contents.Text);
			Assert.AreEqual(3, m_genesis.FootnotesOS.Count);
			VerifyFootnote(footnote1Curr, para1Curr, iSplitPara - 3);
			VerifyFootnote(m_genesis.FootnotesOS[1], para2Curr, ichFootnote2Rev);
			VerifyFootnote(m_genesis.FootnotesOS[2], para2Curr, para2Curr.Contents.Text.Length - 2);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the current
		/// has a new paragraph merge at a verse boundary. There are text changes in the ScrVerses
		/// before and after the new paragraph merge and a paragraph is missing. Differences
		/// are reverted in order.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaMergeAtVerseStart_AdjacentChanges1()
		{
			// Create data and confirm differences.
			IScrTxtPara para1Curr;
			IScrTxtPara para1Rev;
			IScrTxtPara para2Rev;
			IScrTxtPara para3Rev;
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Create the "current" paragraphs
			para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 20, 1, "The disciples were all together. ");//unusual trailing space
			int iMergedCurrent = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 2, "Suddenly there was a ");
			int iTextDifferenceCurrent = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 0, "strong wind noise. ");
			int iv3Curr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 3, "They saw tongues of fire. ");

			// Build up the "revision" paragraph
			para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 20, 1, "They were all together. ");
			para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 2, "Suddenly there was a ");
			int iTextDifferenceRev = para2Rev.Contents.Length;
			AddVerse(para2Rev, 0, 0, "violent wind sound. ");
			int iv3Rev = para2Rev.Contents.Length;
			AddVerse(para2Rev, 0, 3, "They saw tongues of fire. ");
			para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 4, "They were filled with the Holy Spirit and spoke in tongues.");

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(4, m_bookMerger.Differences.Count);

			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff, new BCVRef(01020001), DifferenceType.TextDifference,
				para1Curr, 6, 16, para1Rev, 6, 7);

			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01020001), DifferenceType.ParagraphMergedInCurrent);
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.NoDifference,
				para1Curr, iMergedCurrent, iMergedCurrent, para1Rev, para1Rev.Contents.Length, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.NoDifference,
				null, 0, 0, para2Rev, 0, 0);

			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, new BCVRef(01020002), DifferenceType.TextDifference,
				para1Curr, iTextDifferenceCurrent, iv3Curr - 2,
				para2Rev, iTextDifferenceRev, iv3Rev - 2);

			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, new BCVRef(01020004), DifferenceType.ParagraphMissingInCurrent,
				para1Curr, para1Curr.Contents.Length, para1Curr.Contents.Length,
				para3Rev, 0, para3Rev.Contents.Length);

			// Revert differences from first to last.
			diff = m_bookMerger.Differences.MoveFirst();
			// Revert text difference in verse 1.
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual("201They were all together. 2Suddenly there was a strong wind noise. " +
				"3They saw tongues of fire. ", para1Curr.Contents.Text);

			diff = m_bookMerger.Differences.CurrentDifference;
			// Revert paragraph merge at end of verse 1.
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("201They were all together. " , para1Curr.Contents.Text);
			Assert.AreEqual("2Suddenly there was a strong wind noise. " +
				"3They saw tongues of fire. ", sectionCur.ContentOA[1].Contents.Text);

			diff = m_bookMerger.Differences.CurrentDifference;
			// Revert text difference in verse 2.
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual("2Suddenly there was a violent wind sound. " +
				"3They saw tongues of fire. ", sectionCur.ContentOA[1].Contents.Text);

			diff = m_bookMerger.Differences.CurrentDifference;
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			// Revert missing paragraph (verse 4).
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("4They were filled with the Holy Spirit and spoke in tongues.",
				sectionCur.ContentOA[2].Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the current
		/// has a new paragraph merge at a verse boundary. There are text changes in the ScrVerses
		/// before and after the new paragraph merge and a paragraph is missing. Differences
		/// are reverted in reverse order.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaMergeAtVerseStart_AdjacentChanges2()
		{
			// Create the "current" paragraphs
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 20, 1, "The disciples were all together. ");//unusual trailing space
			int iMergedCurrent = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 2, "Suddenly there was a ");
			int iTextDifferenceCurrent = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 0, "strong wind noise. ");
			int iv3Curr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 3, "They saw tongues of fire. ");

			// Build up the "revision" paragraph
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 20, 1, "They were all together. ");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 2, "Suddenly there was a ");
			int iTextDifferenceRev = para2Rev.Contents.Length;
			AddVerse(para2Rev, 0, 0, "violent wind sound. ");
			int iv3Rev = para2Rev.Contents.Length;
			AddVerse(para2Rev, 0, 3, "They saw tongues of fire. ");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 4, "They were filled with the Holy Spirit and spoke in tongues.");

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(4, m_bookMerger.Differences.Count);

			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff, new BCVRef(01020001), DifferenceType.TextDifference,
				para1Curr, 6, 16, para1Rev, 6, 7);

			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01020001), DifferenceType.ParagraphMergedInCurrent);
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.NoDifference,
				para1Curr, iMergedCurrent, iMergedCurrent, para1Rev, 27, 27);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.NoDifference,
				null, 0, 0, para2Rev, 0, 0);

			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, new BCVRef(01020002), DifferenceType.TextDifference,
				para1Curr, iTextDifferenceCurrent, iv3Curr - 2,
				para2Rev, iTextDifferenceRev, iv3Rev - 2);

			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, new BCVRef(01020004), DifferenceType.ParagraphMissingInCurrent,
				para1Curr, para1Curr.Contents.Length, para1Curr.Contents.Length,
				para3Rev, 0, para3Rev.Contents.Length);

			// Revert differences from first to last.
			diff = m_bookMerger.Differences.MoveFirst();
			diff = m_bookMerger.Differences.MoveNext();
			diff = m_bookMerger.Differences.MoveNext();
			diff = m_bookMerger.Differences.MoveNext();
			// adding missing paragraph (verse 4).
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("4They were filled with the Holy Spirit and spoke in tongues.",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);

			diff = m_bookMerger.Differences.CurrentDifference;
			// Revert text difference in verse 2.
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual("201The disciples were all together. 2Suddenly there was a violent wind sound. " +
				"3They saw tongues of fire. ",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			diff = m_bookMerger.Differences.CurrentDifference;
			// Revert merge between verse 1 and 2.
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("201The disciples were all together. ",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("2Suddenly there was a violent wind sound. " +
				"3They saw tongues of fire. ",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);

			diff = m_bookMerger.Differences.CurrentDifference;
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			// Revert text difference in verse 1
			Assert.AreEqual("201They were all together. ",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Replaces the current with the revision when a paragraph is merged between verse 2
		/// and 5. Verse 3 para is missing in the current. Verses 2, 3 and 5 are in revision and
		/// only 2 and 5 in the current.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		[Ignore("TE-ZZZZ does not revert correctly.")]
		public void ReplaceCurWithRev_ParaMergeAtVerseStart_WithParaMissing()
		{
			// Build Current section - a single para with three verses
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara paraCur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(paraCur, 0, 2, "verse two. ");
			AddVerse(paraCur, 0, 5, "verse five.");

			// Build Revision section - two paragraphs with verses 1, 2 and 3 and split after verse 1
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 0, 2, "verse two. ");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 3, "verse three.");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 5, "verse five.");


			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// Verify verse 3 paragraph missing
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, new BCVRef(01001003), DifferenceType.ParagraphMissingInCurrent,
				paraCur, 12, 12, para2Rev, 0, para2Rev.Contents.Length);

			// Verify verse 5 paragraph merged
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff2, new BCVRef(01001002), new BCVRef(01001002),
				DifferenceType.ParagraphMergedInCurrent);
			Assert.AreEqual(2, diff2.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffParaReferencePoints(diff2, paraCur, 12, para2Rev, para2Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 1, DifferenceType.NoDifference,
				null, 0, 0, para3Rev, 0, 0);

			// Revert verse 3 paragraph missing
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("2verse two. ",				// FAIL: Verse 5 is left here
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("3verse three.5verse five.", // FAIL: Just verse 3 is added here w/o verse 5
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);

			// Revert paragraph merged at verse 5
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("2verse two. ",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("3verse three.",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);
			Assert.AreEqual("5verse five.",
				((IScrTxtPara)sectionCur.ContentOA[2]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Replaces the current with the revision when a paragraph is merged between verse 2
		/// and 5. Verse 3 is missing.
		/// Verses 2, 3 and 5 are in revision and only 2 and 5 in the current (TE-7074).
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaMergeAtVerseStart_WithVerseMissing()
		{
			// Build Current section - a single para with three verses
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara paraCurr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(paraCurr, 0, 2, "verse two. ");
			AddVerse(paraCurr, 0, 5, "verse five.");

			// Build Revision section - two paragraphs with verses 1, 2 and 3 and split after verse 1
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 0, 2, "verse two. ");
			AddVerse(para1Rev, 0, 3, "verse three.");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 5, "verse five.");

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// Verify verse 3 missing paragraph 1
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, 01001003, DifferenceType.VerseMissingInCurrent,
				paraCurr, 12, 12, para1Rev, 12, 25);

			// Verify verse 5 paragraph merged
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff2, new BCVRef(01001002), new BCVRef(01001002),
				DifferenceType.ParagraphMergedInCurrent);
			Assert.AreEqual(2, diff2.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffParaReferencePoints(diff2, paraCurr, 12,
				para1Rev, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 1, DifferenceType.NoDifference,
				null, 0, 0, para2Rev, 0, 0);

			// Revert verse 3 missing
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("2verse two. 3verse three.5verse five.",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Revert paragraph split at verse 5
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("2verse two. 3verse three.",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("5verse five.",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Replaces the current with the revision when a paragraph is merged between verse 2
		/// and 5. Verse 3 is added in
		/// the current. Verses 2, 3 and 5 are in revision and only 2 and 5 in the current
		/// (TE-7074).
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaMergeAtVerseStart_WithVerseAdded()
		{
			// Build Current section - 1 paragraph with verses 1, 2 and 3
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara paraCurr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(paraCurr, 0, 2, "verse two. ");
			AddVerse(paraCurr, 0, 3, "verse three. ");
			AddVerse(paraCurr, 0, 5, "verse five.");

			// Build Revision section - 2 paragraphs with verses 2 and 5
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 0, 2, "verse two. ");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 5, "verse five.");

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// Verify verse 3 added in current
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, new BCVRef(01001003), DifferenceType.VerseAddedToCurrent,
				paraCurr, 12, 26,
				para1Rev, para1Rev.Contents.Length, para1Rev.Contents.Length);

			// Verify verse 5 merged
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff2, new BCVRef(01001003), new BCVRef(01001003),
				DifferenceType.ParagraphMergedInCurrent);
			Assert.AreEqual(2, diff2.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffParaReferencePoints(diff2, paraCurr, 26,
				para1Rev, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 1, DifferenceType.NoDifference,
			null, 0, 0, para2Rev, 0, 0);

			// Revert verse 3 added to current
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("2verse two. 5verse five.",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Revert paragraph merged at verse 5
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("2verse two. ",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("5verse five.",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}
		#endregion

		#region DetectDiffs: Paragraph Merge Mid-Verse
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when two paragraphs are merged into one, in mid-verse.
		/// </summary>
		/// <remarks>Here is a readable version of the test data we will construct:
		/// *********************** Current  ******************************
		/// The Holy Spirit Comes
		///     1They were all together. 2Suddenly there was a violent wind sound. 3They saw
		/// tongues of fire. 4They were filled with the Holy Spirit and spoke in tongues.
		///
		/// *********************** Revision ******************************
		/// The Holy Spirit Comes
		///     1They were all together. 2Suddenly there was
		///		a violent wind sound. 3They saw tongues of fire. 4They were
		/// filled with the Holy Spirit and spoke in tongues.
		/// </remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_ParaMergeWithinVerse()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "The Holy Spirit Comes");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "The Holy Spirit Comes");


			// Build up the Current
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 2, 1, "They were all together. ");
			AddVerse(para1Curr, 0, 2, "Suddenly there was");
			int ichV2SplitPos = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 0, " a violent wind sound. ");
			int ichV2EndPos = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 3, "They saw tongues of fire. ");
			AddVerse(para1Curr, 0, 4, "They were filled with the Holy Spirit and spoke in tongues.");

			// Build up the "revision" paragraphs
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 2, 1, "They were all together. ");
			AddVerse(para1Rev, 0, 2, "Suddenly there was");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "a violent wind sound. ");
			AddVerse(para2Rev, 0, 3, "They saw tongues of fire. ");
			AddVerse(para2Rev, 0, 4, "They were filled with the Holy Spirit and spoke in tongues.");

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);

			// We expect a paragraph merged difference.
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01002002), DifferenceType.ParagraphMergedInCurrent);
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.TextDifference,
				para1Curr, ichV2SplitPos, ichV2SplitPos + 1, // text difference for space at para merge
				para1Rev, para1Rev.Contents.Length, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.NoDifference,
				null, 0, 0, para2Rev, 0, 0);
		}
		#endregion

		#region Revert: Paragraph merge Mid-Verse
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// current verse has a paragraph merge with footnote deletions.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaMergeMidVerse_WithFootnotes()
		{
			// Build Current section - a single para with three verses
			//  (two paragraphs have been merged, footnotes deleted)
			IScrSection sectionCurr = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 0, 1, "verse one. ");
			AddVerse(para1Cur, 0, 2, "verse two. ");
			int ichTxtChgMin = para1Cur.Contents.Length;
			AddVerse(para1Cur, 0, 0, "verse two cont. ");
			int ichV3Curr = para1Cur.Contents.Length;
			AddVerse(para1Cur, 0, 3, "verse three.");

			// Build Revision section - two paragraphs with verses 1, 2 and 3 and split after verse 2
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 0, 1, "verse one. ");
			AddVerse(para1Rev, 0, 2, "verse two. ");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "verse two cont. ");
			// Add footnote after "verse" in second segment of verse two
			IScrFootnote footnote1 = AddFootnote(m_genesisRevision, para2Rev, 5, "footnote 1");
			int ichV3Rev = para2Rev.Contents.Length;
			AddVerse(para2Rev, 0, 3, "verse three.");
			// Add footnote after "verse" in verse three
			IScrFootnote footnote2 = AddFootnote(m_genesisRevision, para2Rev, ichV3Rev + 6, "footnote 2"); // just after "verse"

			// Detect differences
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis

			// We expect one para split difference with two subdifferences.
			Assert.AreEqual(2, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01001002), new BCVRef(01001002),
				DifferenceType.ParagraphMergedInCurrent);
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.FootnoteMissingInCurrent,
				para1Cur, ichTxtChgMin, ichTxtChgMin + 5,
				para1Rev, para1Rev.Contents.Length, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.FootnoteMissingInCurrent,
				null, 0, 0, para2Rev, 0, 6);

			// We also expect that the footnote in verse three was deleted.
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, 01001003, DifferenceType.FootnoteMissingInCurrent,
				para1Cur, ichV3Curr + 6, ichV3Curr + 6,
				para2Rev, ichV3Rev + 6, ichV3Rev + 7);

			// Before we replace with the revision, we should have one paragraph and no footnotes
			// in the revision.
			Assert.AreEqual(1, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual(0, m_genesis.FootnotesOS.Count);

			// Replace the current with revision (split Current para)
			diff = m_bookMerger.Differences.MoveFirst();
			m_bookMerger.ReplaceCurrentWithRevision(diff);

			// We expect the Current to be split into two paragraphs and have one footnote added.
			Assert.AreEqual(2, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("1verse one. 2verse two. ",
				((IScrTxtPara)sectionCurr.ContentOA[0]).Contents.Text);
			Assert.AreEqual("verse" + StringUtils.kChObject + " two cont. 3verse three.",
				((IScrTxtPara)sectionCurr.ContentOA[1]).Contents.Text);
			Assert.AreEqual(1, m_genesis.FootnotesOS.Count);
			VerifyFootnote(m_genesis.FootnotesOS[0], (IScrTxtPara)sectionCurr.ContentOA[1], 5);

			// Replace the current with revision (add footnote in verse 3)
			diff = m_bookMerger.Differences.CurrentDifference;
			m_bookMerger.ReplaceCurrentWithRevision(diff);

			// We expect that a second footnote will be added at ich 23.
			Assert.AreEqual(2, m_genesis.FootnotesOS.Count);
			VerifyFootnote(m_genesis.FootnotesOS[1], (IScrTxtPara)sectionCurr.ContentOA[1], 23);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// current verse has a paragraph merge with footnote text differences.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaMergeMidVerse_FootnoteDiffs()
		{
			// Build Current section - a single para with three verses
			//  (two paragraphs have been merged, footnotes have text differences
			IScrSection sectionCurr = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 0, 1, "verse one. ");
			IScrFootnote footnote1Curr = AddFootnote(m_genesis, para1Cur, 6, "futnoti 1");
			AddVerse(para1Cur, 0, 2, "versay too. ");
			IScrFootnote footnote2Curr = AddFootnote(m_genesis, para1Cur, 20, "futnoti 2");
			int ichTxtChgMin = para1Cur.Contents.Length;
			AddVerse(para1Cur, 0, 0, "verswa two cunt. ");
			IScrFootnote footnote3Curr = AddFootnote(m_genesis, para1Cur,
				ichTxtChgMin + 6, "futnoti 3");
			int ichV3Curr = para1Cur.Contents.Length;
			AddVerse(para1Cur, 0, 3, "verse three.");
			IScrFootnote footnote4Curr = AddFootnote(m_genesis, para1Cur,
				ichV3Curr + 6, "futnoti 4");

			// Build Revision section - two paragraphs with verses 1, 2 and 3 and split after verse 2
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 0, 1, "verse one. ");
			IScrFootnote footnote1Rev = AddFootnote(m_genesisRevision, para1Rev, 6, "footnote 1");
			AddVerse(para1Rev, 0, 2, "verse two.");
			IScrFootnote footnote2Rev = AddFootnote(m_genesisRevision, para1Rev, 19, "footnote 2");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "verse two cont. ");
			// Add footnote after "verse" in second segment of verse two
			IScrFootnote footnote3Rev = AddFootnote(m_genesisRevision, para2Rev, 5, "footnote 3");
			int ichV3Rev = para2Rev.Contents.Length;
			AddVerse(para2Rev, 0, 3, "verse three.");
			// Add footnote after "verse" in verse three
			IScrFootnote footnote4Rev = AddFootnote(m_genesisRevision, para2Rev,
				ichV3Rev + 6, "footnote 4");

			// Detect differences
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis

			// We expect 3 differences
			Assert.AreEqual(3, m_bookMerger.Differences.Count);

			// Verify footnote text difference in verse 1
			Difference diff1 =  m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, new BCVRef(01001001), DifferenceType.FootnoteDifference,
				para1Cur, 6, 7, para1Rev, 6, 7);
			Assert.AreEqual(1, diff1.SubDiffsForORCs.Count);
			DiffTestHelper.VerifySubDiffFootnote(diff1, 0, DifferenceType.TextDifference,
				footnote1Curr, 1, 7, footnote1Rev, 1, 8);

			// We expect one para split difference with two subdifferences.

			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff2, new BCVRef(01001002), new BCVRef(01001002),
				DifferenceType.ParagraphMergedInCurrent);
			Assert.AreEqual(2, diff2.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 0, DifferenceType.TextDifference,
				para1Cur, 18, ichV3Curr - 4,
				para1Rev, 18, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 1, DifferenceType.TextDifference,
				null, 0, 0, para2Rev, 0, ichV3Rev - 4);
			Assert.AreEqual(4, diff2.SubDiffsForORCs.Count);
			DiffTestHelper.VerifySubDiffFootnote(diff2, 0, DifferenceType.NoDifference,
				footnote2Curr, 0, 9, null, 0, 0);
			DiffTestHelper.VerifySubDiffFootnote(diff2, 1, DifferenceType.NoDifference,
				footnote3Curr, 0, 9, null, 0, 0);
			DiffTestHelper.VerifySubDiffFootnote(diff2, 2, DifferenceType.NoDifference,
				null, 0, 0, footnote2Rev, 0, 10);
			DiffTestHelper.VerifySubDiffFootnote(diff2, 3, DifferenceType.NoDifference,
				null, 0, 0, footnote3Rev, 0, 10);

			// We also expect a text difference in the footnote in verse 3.
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff3, 01001003, DifferenceType.FootnoteDifference,
				para1Cur, ichV3Curr + 6, ichV3Curr + 7,
				para2Rev, ichV3Rev + 6, ichV3Rev + 7);
			Assert.AreEqual(1, diff3.SubDiffsForORCs.Count);
			DiffTestHelper.VerifySubDiffFootnote(diff3, 0, DifferenceType.TextDifference,
				footnote4Curr, 1, 7, footnote4Rev, 1, 8);

			Assert.AreEqual(1, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual(4, m_genesis.FootnotesOS.Count);

			// Replace the current with revision (split Current para)
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual("1verse" + StringUtils.kChObject + " one. 2versay"
				+ StringUtils.kChObject + " too. verswa" +	StringUtils.kChObject +
				" two cunt. 3verse" + StringUtils.kChObject + " three.",
				((IScrTxtPara)sectionCurr.ContentOA[0]).Contents.Text);
			Assert.AreEqual("footnote 1",
				((IScrTxtPara)m_genesis.FootnotesOS[0][0]).Contents.Text);

			// We expect the Current to be split into two paragraphs and have one footnote added.
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(2, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("1verse" + StringUtils.kChObject + " one. 2verse"
				+ StringUtils.kChObject + " two.",
				((IScrTxtPara)sectionCurr.ContentOA[0]).Contents.Text);
			Assert.AreEqual("verse" + StringUtils.kChObject + " two cont. 3verse"
				+ StringUtils.kChObject + " three.",
				((IScrTxtPara)sectionCurr.ContentOA[1]).Contents.Text);
			Assert.AreEqual(4, m_genesis.FootnotesOS.Count);
			VerifyFootnote(m_genesis.FootnotesOS[1], (IScrTxtPara)sectionCurr.ContentOA[0], 19);
			VerifyFootnote(m_genesis.FootnotesOS[2], (IScrTxtPara)sectionCurr.ContentOA[1], 5);
			Assert.AreEqual("footnote 2",
				((IScrTxtPara)m_genesis.FootnotesOS[1][0]).Contents.Text);
			Assert.AreEqual("footnote 3",
				((IScrTxtPara)m_genesis.FootnotesOS[2][0]).Contents.Text);

			// Replace the current with revision (footnote text difference in verse 3)
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual("verse" + StringUtils.kChObject + " two cont. 3verse"
				+ StringUtils.kChObject + " three.",
				((IScrTxtPara)sectionCurr.ContentOA[1]).Contents.Text);
			VerifyFootnote(m_genesis.FootnotesOS[3], (IScrTxtPara)sectionCurr.ContentOA[1], 23);
			Assert.AreEqual("footnote 4",
				((IScrTxtPara)m_genesis.FootnotesOS[3][0]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// current verse has a paragraph merge with footnote text differences.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaMergeMidVerse_MissingFootnotes()
		{
			// Build Current section - a single para with three verses
			//  (two paragraphs have been merged, footnotes have text differences
			IScrSection sectionCurr = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 0, 1, "verse one. ");
			AddVerse(para1Cur, 0, 2, "versay too. ");
			IScrFootnote footnote2Curr = AddFootnote(m_genesis, para1Cur, 19, "futnoti 2");
			int ichTxtChgMin = para1Cur.Contents.Length;
			AddVerse(para1Cur, 0, 0, "verswa two cunt. ");
			int ichV3Curr = para1Cur.Contents.Length;
			AddVerse(para1Cur, 0, 3, "verse three.");

			// Build Revision section - two paragraphs with verses 1, 2 and 3 and split after verse 2
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 0, 1, "verse one. ");
			IScrFootnote footnote1Rev = AddFootnote(m_genesisRevision, para1Rev, 6, "footnote 1");
			AddVerse(para1Rev, 0, 2, "verse two.");
			IScrFootnote footnote2Rev = AddFootnote(m_genesisRevision, para1Rev, 19, "footnote 2");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "verse two cont. ");
			// Add footnote after "verse" in second segment of verse two
			IScrFootnote footnote3Rev = AddFootnote(m_genesisRevision, para2Rev, 5, "footnote 3");
			int ichV3Rev = para2Rev.Contents.Length;
			AddVerse(para2Rev, 0, 3, "verse three.");
			// Add footnote after "verse" in verse three
			IScrFootnote footnote4Rev = AddFootnote(m_genesisRevision, para2Rev,
				ichV3Rev + 6, "footnote 4");

			// Detect differences
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis

			// We expect 3 differences
			Assert.AreEqual(3, m_bookMerger.Differences.Count);

			// Verify footnote text difference in verse 1
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, new BCVRef(01001001), DifferenceType.FootnoteMissingInCurrent,
				para1Cur, 6, 6, para1Rev, 6, 7);
			Assert.AreEqual(1, diff1.SubDiffsForORCs.Count);
			DiffTestHelper.VerifySubDiffFootnoteRev(diff1, 0, footnote1Rev);

			// We expect one para split difference with two subdifferences for paras
			// and three subdiffs for ORCs.
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff2, new BCVRef(01001002), new BCVRef(01001002),
				DifferenceType.ParagraphMergedInCurrent);
			Assert.AreEqual(2, diff2.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 0,
				DifferenceType.TextDifference |	DifferenceType.FootnoteMissingInCurrent,
				para1Cur, 17, ichV3Curr - 4,
				para1Rev, 18, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 1,
				DifferenceType.TextDifference | DifferenceType.FootnoteMissingInCurrent,
				null, 0, 0, para2Rev, 0, ichV3Rev - 4);
			Assert.AreEqual(3, diff2.SubDiffsForORCs.Count);
			DiffTestHelper.VerifySubDiffFootnote(diff2, 0, DifferenceType.NoDifference,
				footnote2Curr, 0, 9, null, 0, 0);
			DiffTestHelper.VerifySubDiffFootnote(diff2, 1, DifferenceType.NoDifference,
				null, 0, 0, footnote2Rev, 0, 10);
			DiffTestHelper.VerifySubDiffFootnote(diff2, 2, DifferenceType.NoDifference,
				null, 0, 0, footnote3Rev, 0, 10);

			// We also expect a footnote missing in verse 3.
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff3, 01001003, DifferenceType.FootnoteMissingInCurrent,
				para1Cur, ichV3Curr + 6, ichV3Curr + 6,
				para2Rev, ichV3Rev + 6, ichV3Rev + 7);
			Assert.AreEqual(1, diff3.SubDiffsForORCs.Count);
			DiffTestHelper.VerifySubDiffFootnoteRev(diff3, 0, footnote4Rev);

			// Before we replace with the revision, we should have one paragraph and one footnotes
			// in the current.
			Assert.AreEqual(1, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual(1, m_genesis.FootnotesOS.Count);

			// Replace the current with revision (split Current para)
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual("1verse" + StringUtils.kChObject + " one. 2versay"
				+ StringUtils.kChObject + " too. verswa two cunt. 3verse three.",
				((IScrTxtPara)sectionCurr.ContentOA[0]).Contents.Text);
			Assert.AreEqual("footnote 1",
				((IScrTxtPara)m_genesis.FootnotesOS[0][0]).Contents.Text);

			// We expect the Current to be split into two paragraphs and have one footnote added.
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(2, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("1verse" + StringUtils.kChObject + " one. 2verse"
				+ StringUtils.kChObject + " two.",
				((IScrTxtPara)sectionCurr.ContentOA[0]).Contents.Text);
			Assert.AreEqual("verse" + StringUtils.kChObject + " two cont. 3verse three.",
				((IScrTxtPara)sectionCurr.ContentOA[1]).Contents.Text);
			Assert.AreEqual(3, m_genesis.FootnotesOS.Count);
			VerifyFootnote(m_genesis.FootnotesOS[1], (IScrTxtPara)sectionCurr.ContentOA[0], 19);
			VerifyFootnote(m_genesis.FootnotesOS[2], (IScrTxtPara)sectionCurr.ContentOA[1], 5);
			Assert.AreEqual("footnote 2",
				((IScrTxtPara)m_genesis.FootnotesOS[1][0]).Contents.Text);
			Assert.AreEqual("footnote 3",
				((IScrTxtPara)m_genesis.FootnotesOS[2][0]).Contents.Text);

			// Replace the current with revision (footnote text difference in verse 3)
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual("verse" + StringUtils.kChObject + " two cont. 3verse"
				+ StringUtils.kChObject + " three.",
				((IScrTxtPara)sectionCurr.ContentOA[1]).Contents.Text);
			VerifyFootnote(m_genesis.FootnotesOS[3], (IScrTxtPara)sectionCurr.ContentOA[1], 23);
			Assert.AreEqual("footnote 4",
				((IScrTxtPara)m_genesis.FootnotesOS[3][0]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when one
		/// paragraph is merged in the middle of a verse and there is a text change in the
		/// first and second part of the verse (before and after the paragraph was merged), as well
		/// as in the previous and following verses. In this test, we revert the differences
		/// from the first to the last.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaMergeMidVerse_CorrNone()
		{
			// Build up the "Current" paragraphs
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 20, 1, "They were ");
			int ichV1TxtChgMin = para1Curr.Contents.Length;
			int ichV1TxtChgLimCurr = ichV1TxtChgMin + 4;
			AddVerse(para1Curr, 0, 0, "all together. ");
			AddVerse(para1Curr, 0, 2, "Suddenly ");
			int ichV2TxtChgMinCurr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 0, "there was a violent wind sound. ");
			int ichV3Curr = para1Curr.Contents.Length;
			int ichV2TxtChgLimCurr = para1Curr.Contents.Length - 8;
			AddVerse(para1Curr, 0, 3, "They saw tongues of fire.");
			int ichV3TxtChgMinCurr = ichV3Curr + 10;
			int ichV3TxtChgLimCurr = ichV3TxtChgMinCurr + 5;

			// Add a paragraph to the Current that is not in the Revision
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 4, "They were filled with the Holy Spirit and spoke in tongues.");

			// Create the "Revision" paragraphs
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 20, 1, "They were together. ");
			AddVerse(para1Rev, 0, 2, "Suddenly ");
			int ichV2TxtChgMinRev = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 0, "(if you know what I mean) there was");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "a violent windy sound. ");
			int ichV2TxtChgLimRev = para2Rev.Contents.Length - 8;
			int ichV3Rev = para2Rev.Contents.Length;
			AddVerse(para2Rev, 0, 3, "They saw flames of fire.");
			int ichV3TxtChgMinRev = ichV3Rev + 10;
			int ichV3TxtChgLimRev = ichV3TxtChgMinRev + 4;

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(4, m_bookMerger.Differences.Count);

			// Verse 1 has a text difference (added "all" in Current)
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff, 01020001, DifferenceType.TextDifference,
				para1Curr, ichV1TxtChgMin, ichV1TxtChgLimCurr,
				para1Rev, ichV1TxtChgMin, ichV1TxtChgMin);

			// Verse 2 has a complex para merged difference
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff, 01020002, DifferenceType.ParagraphMergedInCurrent);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.TextDifference,
				para1Curr, ichV2TxtChgMinCurr, ichV2TxtChgLimCurr,
				para1Rev, ichV2TxtChgMinRev, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.TextDifference,
				null, 0, 0, para2Rev, 0, ichV2TxtChgLimRev);

			// Verse 3 has a text difference (changed "flames" to "tongues"--which match in their last two characters)
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, 01020003, DifferenceType.TextDifference,
				para1Curr, ichV3TxtChgMinCurr, ichV3TxtChgLimCurr,
				para2Rev, ichV3TxtChgMinRev, ichV3TxtChgLimRev);

			// Verse 4 has been added to the current
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, 01020004, DifferenceType.ParagraphAddedToCurrent,
				para2Curr, 0, para2Curr.Contents.Length,
				para2Rev, para2Rev.Contents.Length, para2Rev.Contents.Length);

			// Revert the differences from the first to the last.
			diff = m_bookMerger.Differences.MoveFirst();
			// Revert the text difference in verse 1 (Delete "all").
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual("201They were together. 2Suddenly there was a violent wind sound. " +
				"3They saw tongues of fire.", ((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			diff = m_bookMerger.Differences.CurrentDifference;
			// Revert the complex paragraph merge difference in verse 2 (including two text diffs)
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("201They were together. 2Suddenly (if you know what I mean) there was",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("a violent windy sound. 3They saw tongues of fire.",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);

			diff = m_bookMerger.Differences.CurrentDifference;
			// Revert the text difference in verse 3 ("tongues" back to "flames")
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual("a violent windy sound. 3They saw flames of fire.",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);

			diff = m_bookMerger.Differences.CurrentDifference;
			// Delete the added paragraph
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when one
		/// paragraph is merged from two mid-verse and there is a text change in the
		/// first and second part of the verse (on both sides of the merge), as well
		/// as in the previous and following verses. In this test, we revert the differences
		/// from the last to the first.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaMergeMidVerse_CorrNone_Rev()
		{
			// Build up the "Current" paragraphs
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 20, 1, "They were ");
			int ichV1TxtChgMin = para1Curr.Contents.Length;
			int ichV1TxtChgLimCurr = ichV1TxtChgMin + 4;
			AddVerse(para1Curr, 0, 0, "all together. ");
			AddVerse(para1Curr, 0, 2, "Suddenly ");
			int ichV2TxtChgMinCurr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 0, "there was a violent wind sound. ");
			int ichV3Curr = para1Curr.Contents.Length;
			int ichV2TxtChgLimCurr = para1Curr.Contents.Length - 8;
			AddVerse(para1Curr, 0, 3, "They saw tongues of fire.");
			int ichV3TxtChgMinCurr = ichV3Curr + 10;
			int ichV3TxtChgLimCurr = ichV3TxtChgMinCurr + 5;

			// Add a paragraph to the Current that is not in the Revision
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 4, "They were filled with the Holy Spirit and spoke in tongues.");

			// Create the "Revision" paragraphs
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 20, 1, "They were together. ");
			AddVerse(para1Rev, 0, 2, "Suddenly ");
			int ichV2TxtChgMinRev = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 0, "(if you know what I mean) there was");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "a violent windy sound. ");
			int ichV2TxtChgLimRev = para2Rev.Contents.Length - 8;
			int ichV3Rev = para2Rev.Contents.Length;
			AddVerse(para2Rev, 0, 3, "They saw flames of fire.");
			int ichV3TxtChgMinRev = ichV3Rev + 10;
			int ichV3TxtChgLimRev = ichV3TxtChgMinRev + 4;

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(4, m_bookMerger.Differences.Count);

			// Verse 1 has a text difference (added "all" in Current)
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff, 01020001, DifferenceType.TextDifference,
				para1Curr, ichV1TxtChgMin, ichV1TxtChgLimCurr,
				para1Rev, ichV1TxtChgMin, ichV1TxtChgMin);

			// Verse 2 has a complex para merged difference
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff, 01020002, DifferenceType.ParagraphMergedInCurrent);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.TextDifference,
				para1Curr, ichV2TxtChgMinCurr, ichV2TxtChgLimCurr,
				para1Rev, ichV2TxtChgMinRev, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.TextDifference,
				null, 0, 0, para2Rev, 0, ichV2TxtChgLimRev);

			// Verse 3 has a text difference (changed "flames" to "tongues"--which match in their last two characters)
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, 01020003, DifferenceType.TextDifference,
				para1Curr, ichV3TxtChgMinCurr, ichV3TxtChgLimCurr,
				para2Rev, ichV3TxtChgMinRev, ichV3TxtChgLimRev);

			// Verse 4 has been added to the current
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, 01020004, DifferenceType.ParagraphAddedToCurrent,
				para2Curr, 0, para2Curr.Contents.Length,
				para2Rev, para2Rev.Contents.Length, para2Rev.Contents.Length);

			// Revert the differences from the last to the first.
			diff = m_bookMerger.Differences.MoveFirst();
			diff = m_bookMerger.Differences.MoveNext();
			diff = m_bookMerger.Differences.MoveNext();
			diff = m_bookMerger.Differences.MoveNext();

			// Delete the added paragraph
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);

			// Revert the text difference in verse 3 ("tongues" back to "flames")
			diff = m_bookMerger.Differences.CurrentDifference;
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual("201They were all together. 2Suddenly there was a violent wind sound. " +
				"3They saw flames of fire.", ((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Revert the complex paragraph merge difference in verse 2 (including two text diffs)
			diff = m_bookMerger.Differences.CurrentDifference;
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("201They were all together. 2Suddenly (if you know what I mean) there was",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("a violent windy sound. 3They saw flames of fire.",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);

			// Revert the text difference in verse 1 (Delete "all").
			diff = m_bookMerger.Differences.CurrentDifference;
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual("201They were together. 2Suddenly (if you know what I mean) there was",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when one
		/// paragraph is merged from two paragraphs mid-verse with more than 75% corrolation
		/// before the merge. Ther are text changes in the previous and following verses.
		/// In this test, we revert the differences from the first to the last.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaMergeMidVerse_CorrFirst()
		{
			// Build up the "Current" paragraphs
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 20, 1, "They were ");
			int ichV1TxtChgMin = para1Curr.Contents.Length;
			int ichV1TxtChgLimCurr = ichV1TxtChgMin + 4;
			AddVerse(para1Curr, 0, 0, "all together. ");
			AddVerse(para1Curr, 0, 2, "Suddenly there was a violent wind sound. ");
			int ichV3Curr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 3, "They saw tongues of fire.");
			int ichV3TxtChgMinCurr = ichV3Curr + 10;
			int ichV3TxtChgLimCurr = ichV3TxtChgMinCurr + 5;

			// Create the "Revision" paragraphs
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 20, 1, "They were together. ");
			AddVerse(para1Rev, 0, 2, "Suddenly there was a violent wind sound. ");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "Hello people. "); //added segment in verse two
			int ichV3Rev = para2Rev.Contents.Length;
			AddVerse(para2Rev, 0, 3, "They saw flames of fire.");
			int ichV3TxtChgMinRev = ichV3Rev + 10;
			int ichV3TxtChgLimRev = ichV3TxtChgMinRev + 4;
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 4, "They were filled with the Holy Spirit and spoke in tongues.");

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(4, m_bookMerger.Differences.Count);

			// Verse 1 has a text difference (added "all" in Current)
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, 01020001, DifferenceType.TextDifference,
				para1Curr, ichV1TxtChgMin, ichV1TxtChgLimCurr,
				para1Rev, ichV1TxtChgMin, ichV1TxtChgMin);

			// Verse 2 has a paragraph verse segment missing in the current
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff2, 01020002, DifferenceType.ParagraphMergedInCurrent);
			Assert.AreEqual(2, diff2.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffParaReferencePoints(diff2, para1Curr, ichV3Curr, para1Rev, para1Rev.Contents.Length);
			//DiffTestHelper.VerifySubDiffParaAdded(diff2, 1, DifferenceType.ParagraphMergedInCurrent, para2Rev, ichV3Rev);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 1, DifferenceType.TextDifference,
				null, 0, 0, para2Rev, 0, ichV3Rev);

			// Verse 3 has a text difference (changed "flames" to "tongues"--which match in their last two characters)
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff3, 01020003, DifferenceType.TextDifference,
				para1Curr, ichV3TxtChgMinCurr, ichV3TxtChgLimCurr,
				para2Rev, ichV3TxtChgMinRev, ichV3TxtChgLimRev);

			// Verse 4 paragraph is missing from the current
			Difference diff4 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff4, 01020004, DifferenceType.ParagraphMissingInCurrent,
				para1Curr, para1Curr.Contents.Length, para1Curr.Contents.Length,
				para3Rev, 0, para3Rev.Contents.Length);

			// Revert Text change in first verse
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual("201They were together. 2Suddenly there was a violent wind sound. " +
				"3They saw tongues of fire.",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Revert segment removed and paragraph merged
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("201They were together. 2Suddenly there was a violent wind sound. ",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("Hello people. 3They saw tongues of fire.",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);


			// Revert the text difference in verse 3 ("tongues" back to "flames")
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual("Hello people. 3They saw flames of fire.",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);


			// Revert verse added in current
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff4);
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("4They were filled with the Holy Spirit and spoke in tongues.",
				((IScrTxtPara)sectionCur.ContentOA[2]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when one
		/// paragraph is merged from two paragraphs mid-verse with more than 75% corrolation
		/// before the merge. Ther are text changes in the previous and following verses.
		/// In this test, we revert the differences from the first to the last.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaMergeMidVerse_BridgeMatch_CorrFirst()
		{
			// Build up the "Current" paragraphs
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 20, 1, "They were ");
			int ichV1TxtChgMin = para1Curr.Contents.Length;
			int ichV1TxtChgLimCurr = ichV1TxtChgMin + 4;
			AddVerse(para1Curr, 0, 0, "all together. ");
			AddVerse(para1Curr, 0, "2-3", "Suddenly there was a violent windy sound. ");
			int ichV3Curr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 4, "They saw tongues of fire.");
			int ichV3TxtChgMinCurr = ichV3Curr + 10;
			int ichV3TxtChgLimCurr = ichV3TxtChgMinCurr + 5;

			// Create the "Revision" paragraphs
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 20, 1, "They were together. ");
			AddVerse(para1Rev, 0, "2-3", "Suddenly there was a violent wind sound. ");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "Hello people. "); //added segment in verse two
			int ichV3Rev = para2Rev.Contents.Length;
			AddVerse(para2Rev, 0, 4, "They saw flames of fire.");
			int ichV3TxtChgMinRev = ichV3Rev + 10;
			int ichV3TxtChgLimRev = ichV3TxtChgMinRev + 4;
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 5, "They were filled with the Holy Spirit and spoke in tongues.");

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(5, m_bookMerger.Differences.Count);

			// Verse 1 has a text difference (added "all" in Current)
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, 01020001, DifferenceType.TextDifference,
				para1Curr, ichV1TxtChgMin, ichV1TxtChgLimCurr,
				para1Rev, ichV1TxtChgMin, ichV1TxtChgMin);

			// Verse 2-3 has a text differnce in the first para which correlates
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff2, new BCVRef(01020002), new BCVRef(01020003), DifferenceType.TextDifference,
				para1Curr, ichV3Curr - 9, ichV3Curr - 8,
				para1Rev, para1Rev.Contents.Length - 8, para1Rev.Contents.Length - 8);

			// Verse bridge 2-3 has a paragraph verse segment missing in the current
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff3, 01020002, 01020003, DifferenceType.ParagraphMergedInCurrent);
			Assert.AreEqual(2, diff3.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffParaReferencePoints(diff3, para1Curr, ichV3Curr, para1Rev, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff3, 1, DifferenceType.TextDifference,
				null, 0, 0, para2Rev, 0, ichV3Rev);

			// Verse 3 has a text difference (changed "flames" to "tongues"--which match in their last two characters)
			Difference diff4 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff4, 01020004, DifferenceType.TextDifference,
				para1Curr, ichV3TxtChgMinCurr, ichV3TxtChgLimCurr,
				para2Rev, ichV3TxtChgMinRev, ichV3TxtChgLimRev);

			// Verse 4 paragraph is missing from the current
			Difference diff5 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff5, 01020005, DifferenceType.ParagraphMissingInCurrent,
				para1Curr, para1Curr.Contents.Length, para1Curr.Contents.Length,
				para3Rev, 0, para3Rev.Contents.Length);

			// Revert Text change in first verse
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual("201They were together. 2-3Suddenly there was a violent windy sound. " +
				"4They saw tongues of fire.",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Revert text changed in verse 2-3 in the first para that correlates
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual("201They were together. 2-3Suddenly there was a violent wind sound. " +
				"4They saw tongues of fire.",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Revert segment removed and paragraph merged
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("201They were together. 2-3Suddenly there was a violent wind sound. ",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("Hello people. 4They saw tongues of fire.",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);


			// Revert the text difference in verse 3 ("tongues" back to "flames")
			m_bookMerger.ReplaceCurrentWithRevision(diff4);
			Assert.AreEqual("Hello people. 4They saw flames of fire.",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);


			// Revert verse added in current
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff5);
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("5They were filled with the Holy Spirit and spoke in tongues.",
				((IScrTxtPara)sectionCur.ContentOA[2]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when one
		/// paragraph is merged from two paragraphs mid-verse with more than 75% corrolation
		/// before the merge. Ther are text changes in the previous and following verses.
		/// In this test, we revert the differences from the first to the last.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaMergeMidVerse_CorrLast()
		{
			// Build up the "Current" paragraphs
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 20, 1, "They were ");
			int ichV1TxtChgMinCurr = para1Curr.Contents.Length;
			int ichV1TxtChgLimCurr = ichV1TxtChgMinCurr + 4;
			AddVerse(para1Curr, 0, 0, "all together. ");
			int ichV2MinCur = para1Curr.Contents.Length + 1;
			AddVerse(para1Curr, 0, 2, "Suddenly there was a violent wind sound. ");
			int ichV3Curr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 3, "They saw tongues of fire.");
			int ichV3TxtChgMinCurr = ichV3Curr + 10;
			int ichV3TxtChgLimCurr = ichV3TxtChgMinCurr + 5;

			// Create the "Revision" paragraphs
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 20, 1, "They were together. ");
			int ichV2MinRev = para1Rev.Contents.Length + 1;
			AddVerse(para1Rev, 0, 2, "Hello people. "); //added segment in verse two
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "Suddenly there was a violent wind sound. ");
			int ichV3Rev = para2Rev.Contents.Length;
			AddVerse(para2Rev, 0, 3, "They saw flames of fire.");
			int ichV3TxtChgMinRev = ichV3Rev + 10;
			int ichV3TxtChgLimRev = ichV3TxtChgMinRev + 4;
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 4, "They were filled with the Holy Spirit and spoke in tongues.");

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(4, m_bookMerger.Differences.Count);
			// Currently getting 4,

			// Verse 1 has a text difference (added "all" in Current)
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, 01020001, DifferenceType.TextDifference,
				para1Curr, ichV1TxtChgMinCurr, ichV1TxtChgLimCurr,
				para1Rev, ichV1TxtChgMinCurr, ichV1TxtChgMinCurr);

			// Verse 2 has a verse segment removed and paragraph merged
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff2, 01020002, DifferenceType.ParagraphMergedInCurrent);
			// Not sure if these are right yet - Topher
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 0, DifferenceType.TextDifference,
				para1Curr, ichV2MinCur, ichV2MinCur,
				para1Rev, ichV2MinRev, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 1, DifferenceType.NoDifference,
				null, 0, 0, para2Rev, 0, 0);

			// Verse 3 has a text difference (changed "flames" to "tongues"--which match in their last two characters)
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff3, 01020003, DifferenceType.TextDifference,
				para1Curr, ichV3TxtChgMinCurr, ichV3TxtChgLimCurr,
				para2Rev, ichV3TxtChgMinRev, ichV3TxtChgLimRev);

			// Verse 4 is missing from the current
			Difference diff4 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff4, 01020004, DifferenceType.ParagraphMissingInCurrent,
				para1Curr, para1Curr.Contents.Length, para1Curr.Contents.Length,
				para3Rev, 0, para3Rev.Contents.Length);

			// Revert Text change in first verse
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual("201They were together. 2Suddenly there was a violent wind sound. " +
				"3They saw tongues of fire.",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Revert segment removed and paragraph merged
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("201They were together. 2Hello people. ",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("Suddenly there was a violent wind sound. 3They saw tongues of fire.",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);

			// Revert the text difference in verse 3 ("tongues" back to "flames")
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual("Suddenly there was a violent wind sound. 3They saw flames of fire.",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);

			// Revert para missing in current
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff4);
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("Suddenly there was a violent wind sound. 3They saw flames of fire.",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);
			Assert.AreEqual("4They were filled with the Holy Spirit and spoke in tongues.",
				((IScrTxtPara)sectionCur.ContentOA[2]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when there are
		/// two paragraph merge differences.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaMergeMidVerse_Multi()
		{
			IScrTxtPara para1Curr, para2Curr;
			IScrTxtPara para1Rev, para2Rev;
			int iSplitPara;

			// Build up the "current" paragraph
			IScrSection sectionCurr = CreateSection(m_genesis, "My Beautiful Verses");
			para1Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 20, 1, "They were all together. ");  // 27 at end of verse
			AddVerse(para1Curr, 0, 2, "Suddenly ");
			int iV2TxtChgMinCurr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 0, "there was a violent wind");
			int iV2TxtChgLimCurr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 0, " sound. ");
			iSplitPara = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 3, "They saw ");
			int iV3TxtChgMinCurr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 0, "tongues of fire.");
			para2Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 4, "They were filled with the Holy Spirit and spoke in tongues.");

			// Create the "revision" paragraphs
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");
			para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 20, 1, "They were together. ");
			AddVerse(para1Rev, 0, 2, "Suddenly ");
			int iV2TxtChgMinRev = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 0, "(if you know what I mean) there was");
			para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "a violent windy sound. ");
			AddVerse(para2Rev, 0, 3, "They saw ");
			int iV3TxtChgMinRev = para2Rev.Contents.Length;
			AddVerse(para2Rev, 0, 0, "flames");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 0, "of fire.");

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);

			// Verify the Differences
			Assert.AreEqual(4, m_bookMerger.Differences.Count);
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			Difference diff4 = m_bookMerger.Differences.MoveNext();

			// Text difference in verse 1
			DiffTestHelper.VerifyParaDiff(diff1, new BCVRef(01020001), DifferenceType.TextDifference,
				para1Curr, 13, 17, para1Rev, 13, 13);

			// Para merged in verse 2
			DiffTestHelper.VerifyParaStructDiff(diff2, new BCVRef(01020002), new BCVRef(01020002),
				DifferenceType.ParagraphMergedInCurrent);
			Assert.AreEqual(2, diff2.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 0, DifferenceType.TextDifference,
				para1Curr, iV2TxtChgMinCurr, iV2TxtChgLimCurr,
				para1Rev, iV2TxtChgMinRev, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 1, DifferenceType.TextDifference,
				null, 0, 0,
				para2Rev, 0, 15);

			// Para merged in verse 3
			DiffTestHelper.VerifyParaStructDiff(diff3, new BCVRef(01020003), new BCVRef(01020003),
				DifferenceType.ParagraphMergedInCurrent);
			Assert.AreEqual(2, diff3.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff3, 0, DifferenceType.TextDifference,
				para1Curr, iV3TxtChgMinCurr, iV3TxtChgMinCurr + 8,
				para2Rev, iV3TxtChgMinRev, para2Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff3, 1, DifferenceType.NoDifference,
				null, 0, 0,
				para3Rev, 0, 0);

			// Verse 4 missing in revision
			DiffTestHelper.VerifyParaDiff(diff4, new BCVRef(01020004), DifferenceType.ParagraphAddedToCurrent,
				para2Curr, 0, para2Curr.Contents.Length,
				para3Rev, para3Rev.Contents.Length, para3Rev.Contents.Length);

			// Revert the differences from the first to the last.
			// Revert the text difference in verse 1 (put "all" back in).
			Difference diff = m_bookMerger.Differences.MoveFirst();
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual("201They were together. 2Suddenly there was a violent wind sound." +
				" 3They saw tongues of fire.", para1Curr.Contents.Text);

			// Revert the complex paragraph split difference in verse 2 (including two text diffs)
			diff = m_bookMerger.Differences.CurrentDifference;
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual("201They were together. 2Suddenly (if you know what I mean) there was",
				para1Curr.Contents.Text);
			Assert.AreEqual("a violent windy sound. 3They saw tongues of fire.",
				((IScrTxtPara)sectionCurr.ContentOA[1]).Contents.Text);
			Assert.AreEqual("4They were filled with the Holy Spirit and spoke in tongues.",
				((IScrTxtPara)sectionCurr.ContentOA[2]).Contents.Text);

			// Revert the text difference in verse 3 ("tongues" back to "flaims")
			diff = m_bookMerger.Differences.CurrentDifference;
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual("a violent windy sound. 3They saw flames",
				((IScrTxtPara)sectionCurr.ContentOA[1]).Contents.Text);
			Assert.AreEqual("of fire.",
				((IScrTxtPara)sectionCurr.ContentOA[2]).Contents.Text);
			Assert.AreEqual("4They were filled with the Holy Spirit and spoke in tongues.",
				((IScrTxtPara)sectionCurr.ContentOA[3]).Contents.Text);

			diff = m_bookMerger.Differences.CurrentDifference;
			// Revert the missing paragraph
			IScrSection newSectionCur = (IScrSection)para1Curr.Owner.Owner;
			Assert.AreEqual(4, newSectionCur.ContentOA.ParagraphsOS.Count,
				"Should have four paras before last revert.");
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual(3, newSectionCur.ContentOA.ParagraphsOS.Count);
			IScrTxtPara newPara = (IScrTxtPara)newSectionCur.ContentOA[2];
			Assert.AreEqual("of fire.",	newPara.Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}
			#endregion
		#endregion

		#region Multi-Paragraph Verses (e.g. poetry)
			#region Multi-para Verses: One-To-Many Segments (Para Split)
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when the current has one verse in three paragraphs
		/// and when the corresponding revision verse has only one paragraph.
		/// There is a text change in the first and last parts of the verse,
		/// such that there is no correlaton at the start or end of the cluster.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_MultiParasInVerse_OneToThreeParas_CorrNone()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraphs
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 30, 33, "For as churning the cream produces butter,");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 0, "and as twisting the nose produces blood,");
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para3Curr, 0, 0, "then stirring up anger produces strife.");

			// Build up the "revision" paragraph
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 33, "For as churning the milk produces butter, and as twisting "
				+ "the nose produces blood, so");
			int ichRev = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 0, " stirring up anger produces strife.");

			m_bookMerger.DetectDifferences(null);

			// We expect one paragraph structure difference with three subdifferences.
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01030033), new BCVRef(01030033),
				DifferenceType.ParagraphSplitInCurrent);
			Assert.IsNotNull(diff.SubDiffsForParas);
			Assert.AreEqual(3, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.TextDifference,
				para1Curr, 24, para1Curr.Contents.Text.Length,
				para1Rev, 24, ichRev);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.TextDifference,
				para2Curr, 0, para2Curr.Contents.Text.Length, null, 0, 0);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 2, DifferenceType.TextDifference,
				para3Curr, 0, 4, null, 0, 0);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Revert when the current has one verse in three paragraphs
		/// and when the corresponding revision verse has only one paragraph.
		/// There is a text change in the first and last parts of the verse,
		/// such that there is no correlaton at the start or end of the cluster.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultiParasInVerse_OneToThreeParas_CorrNone()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraphs
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 30, 32, "Verse 32. ");
			AddVerse(para1Curr, 0, 33, "For as churning the ");
			int iv33MinCurr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 0, "cream produces butter,");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 0, "and as twisting the nose produces blood,");
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para3Curr, 0, 0, "then stirring up anger produces strife. ");
			AddVerse(para3Curr, 0, 34, "Vers");
			int iv34MinCurr = para3Curr.Contents.Length;
			AddVerse(para3Curr, 0, 0, "e 34.");

			// Build up the "revision" paragraph
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 32, "Versie 3@. ");
			AddVerse(para1Rev, 0, 33, "For as churning the ");
			int iv33MinRev = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 0, "milk produces butter, and as twisting "
				+ "the nose produces blood, so");
			int iv33LimRev = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 0, " stirring up anger produces strife. ");
			AddVerse(para1Rev, 0, 34, "Vers");
			int iv34MinRev = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0 , 0, "ify thirty-four.");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 35, "Verse 35.");

			m_bookMerger.DetectDifferences(null);

			// We expect 4 differences
			Assert.AreEqual(4, m_bookMerger.Differences.Count);

			// Verify text difference in verse 32
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff, new BCVRef(01030032), DifferenceType.TextDifference,
				para1Curr, 8, 12, para1Rev, 8, 13);

			// We expect one paragraph structure difference with three subdifferences, verse 33
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01030033), new BCVRef(01030033),
				DifferenceType.ParagraphSplitInCurrent);
			Assert.IsNotNull(diff.SubDiffsForParas);
			Assert.AreEqual(3, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.TextDifference,
				para1Curr, iv33MinCurr, para1Curr.Contents.Text.Length,
				para1Rev, iv33MinRev, iv33LimRev);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.TextDifference,
				para2Curr, 0, para2Curr.Contents.Text.Length, null, 0, 0);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 2, DifferenceType.TextDifference,
				para3Curr, 0, 4, null, 0, 0);

			// Verify text difference in verse 34
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, new BCVRef(01030034), DifferenceType.TextDifference,
				para3Curr, iv34MinCurr, iv34MinCurr + 4, para1Rev, iv34MinRev, iv34MinRev + 15);

			// Paragraph missing in current, verse 35
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaAddedDiff(diff, new BCVRef(01030035), new BCVRef(01030035),
				DifferenceType.ParagraphMissingInCurrent, para2Rev, para3Curr,
				para3Curr.Contents.Length);

			// Revert diffs
			diff = m_bookMerger.Differences.MoveFirst();
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3032Versie 3@. 33For as churning the cream produces butter,",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Revert paragraph structure diff
			diff = m_bookMerger.Differences.CurrentDifference;
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3032Versie 3@. 33For as churning the milk produces butter, and " +
				"as twisting the nose produces blood, so stirring up anger produces strife. " +
				"34Verse 34.", ((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Revert text difference
			diff = m_bookMerger.Differences.CurrentDifference;
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3032Versie 3@. 33For as churning the milk produces butter, and " +
				"as twisting the nose produces blood, so stirring up anger produces strife. " +
				"34Versify thirty-four.",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Revert paragraph missing
			diff = m_bookMerger.Differences.CurrentDifference;
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3032Versie 3@. 33For as churning the milk produces butter, and " +
				"as twisting the nose produces blood, so stirring up anger produces strife. " +
				"34Versify thirty-four.",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("35Verse 35.",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Revert when the current has one verse in three paragraphs
		/// and when the corresponding revision verse has only one paragraph.
		/// There is a text change in the first and last parts of the verse,
		/// such that there is correlaton at the start of the cluster.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultiParasInVerse_OneToThreeParas_CorrFirst()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraphs
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 30, 32, "Verse 32. ");
			AddVerse(para1Curr, 0, 33, "For as churning the ");
			int iv33TxtChgMinCurr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 0, "cream produces butter, and as twisting the nose produces blood, then");
			int iv33TxtChgLimCurr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 0, " stirring up anger produces strife in all sorts of ways that are bad. ");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 0, "Versily, versily, I say unto you,"); // added para in v33
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para3Curr, 0, 0, "somebody else just added more verses."); // added para in v33
			AddVerse(para3Curr, 0, 34, "Verse 34.");
			int iv34MinCurr = para3Curr.Contents.Length - 5;

			// Build up the "revision" paragraph
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 32, "Versie 3@. ");
			AddVerse(para1Rev, 0, 33, "For as churning the ");
			int iv33TxtChgMinRev = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 0, "milk produces butter, and as twisting "
				+ "the nose produces blood, so");
			int iv33TxtChgLimRev = para1Rev.Contents.Length;
			// If there isn't a space after the period, the revert doesn't work correctly (puts extra period and space into current).
			AddVerse(para1Rev, 0, 0, " stirring up anger produces strife in all sorts of ways that are bad. ");
			int iv33EndRev = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 34, "Versify thirty-four.");
			int iv34MinRev = para1Rev.Contents.Length - 16;
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 35, "Verse 35.");

			m_bookMerger.DetectDifferences(null);

			// We expect 5 differences
			Assert.AreEqual(5, m_bookMerger.Differences.Count);

			// text difference in verse 32
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, new BCVRef(01030032), DifferenceType.TextDifference,
				para1Curr, 8, 12, para1Rev, 8, 13);

			// text difference in verse 33 - first paragragh
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff2, new BCVRef(01030033), DifferenceType.TextDifference,
				para1Curr, iv33TxtChgMinCurr, iv33TxtChgLimCurr, para1Rev, iv33TxtChgMinRev, iv33TxtChgLimRev);

			// paragraphs added within current, verse 33
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff3, new BCVRef(01030033), DifferenceType.ParagraphStructureChange);
			DiffTestHelper.VerifySubDiffParaReferencePoints(diff3, para1Curr,
				para1Curr.Contents.Length, para1Rev, iv33EndRev);
			DiffTestHelper.VerifySubDiffParaAdded(diff3, 1, DifferenceType.ParagraphAddedToCurrent,
				para2Curr, para2Curr.Contents.Length);
			//DiffTestHelper.VerifySubDiffParaAdded(diff3, 2, DifferenceType.ParagraphAddedToCurrent,
			//    para3Curr, para3Curr.Contents.Length - 11);
			DiffTestHelper.VerifySubDiffTextCompared(diff3, 2, DifferenceType.TextDifference,
				para3Curr, 0, para3Curr.Contents.Length - 11, null, 0, 0);

			// text difference, verse 34
			Difference diff4 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff4, new BCVRef(01030034), DifferenceType.TextDifference,
				para3Curr, iv34MinCurr, iv34MinCurr + 4, para1Rev, iv34MinRev, iv34MinRev + 15);

			// paragraph missing in current, verse 35
			Difference diff5 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaAddedDiff(diff5, new BCVRef(01030035), new BCVRef(01030035),
				DifferenceType.ParagraphMissingInCurrent, para2Rev, para3Curr,
				para3Curr.Contents.Length);

			// Revert diff1 V32
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3032Versie 3@. 33For as churning the cream produces butter, and as "
				+ "twisting the nose produces blood, then stirring up anger produces strife" +
				" in all sorts of ways that are bad. ",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Revert diff2 v33 first paragraph
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3032Versie 3@. 33For as churning the milk produces butter, and " +
				"as twisting the nose produces blood, so stirring up anger produces strife" +
				" in all sorts of ways that are bad. ",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("Versily, versily, I say unto you,",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);

			// Revert paragraph added complex diff (removes two paragraphs from Current)
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3032Versie 3@. 33For as churning the milk produces butter, and " +
				"as twisting the nose produces blood, so stirring up anger produces strife" +
				" in all sorts of ways that are bad. 34Verse 34.",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Revert text difference in verse 34
			m_bookMerger.ReplaceCurrentWithRevision(diff4);
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3032Versie 3@. 33For as churning the milk produces butter, and " +
				"as twisting the nose produces blood, so stirring up anger produces strife" +
				" in all sorts of ways that are bad. 34Versify thirty-four.",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Revert paragraph missing
			m_bookMerger.ReplaceCurrentWithRevision(diff5);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3032Versie 3@. 33For as churning the milk produces butter, and " +
				"as twisting the nose produces blood, so stirring up anger produces strife" +
				" in all sorts of ways that are bad. 34Versify thirty-four.",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("35Verse 35.",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Revert when the current has one verse in three paragraphs
		/// and when the corresponding revision verse has only one paragraph.
		/// There is a text change in the first and last parts of the verse,
		/// such that there is correlaton at the end of the cluster. However we do not make the
		/// text change a separte diff because of issuse with the verse number.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultiParasInVerse_OneToThreeParas_CorrLast()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraphs
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 30, 32, "Verse 32. ");
			AddVerse(para1Curr, 0, 33, "Versily, versily, I say unto you, "); // added para verse 33
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 0, "somebody else just added more verses. "); // added para verse 33
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para3Curr, 0, 0, "For as churning the ");
			AddVerse(para3Curr, 0, 0, "cream produces butter, and as twisting the nose produces blood, then");
			int iv33LimCurr = para3Curr.Contents.Length;
			AddVerse(para3Curr, 0, 0, " stirring up anger produces strife for people who are strify. ");
			AddVerse(para3Curr, 0, 34, "Verse 34.");
			int iv34MinCurr = para3Curr.Contents.Length - 5;

			// Build up the "revision" paragraph
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 32, "Versie 3@. ");
			AddVerse(para1Rev, 0, 33, "For as churning the ");
			AddVerse(para1Rev, 0, 0, "milk produces butter, and as twisting "
				+ "the nose produces blood, so");
			int iv33LimRev = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 0, " stirring up anger produces strife for people who are strify. ");
			AddVerse(para1Rev, 0, 34, "Versify thirty-four.");
			int iv34MinRev = para1Rev.Contents.Length - 16;
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 35, "Verse 35.");

			m_bookMerger.DetectDifferences(null);

			// We expect 4 differences
			Assert.AreEqual(4, m_bookMerger.Differences.Count);

			// Verify text difference
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, new BCVRef(01030032), DifferenceType.TextDifference,
				para1Curr, 8, 12, para1Rev, 8, 13);

			// Complex Diff
			// There is correlation between para1Rev and para3Curr that is ignored and left in
			// the complex diff because of issues where reverting could end up with 2 verse 33
			// verse numbers.
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff2, new BCVRef(01030033), DifferenceType.ParagraphSplitInCurrent);
			Assert.AreEqual(3, diff2.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 0, DifferenceType.TextDifference,
				para1Curr, 16, para1Curr.Contents.Length, para1Rev, 17, iv33LimRev);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 1, DifferenceType.TextDifference,
				para2Curr, 0, para2Curr.Contents.Length, null, 0, 0);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 2, DifferenceType.TextDifference,
				para3Curr, 0, iv33LimCurr, null, 0, 0);

			// Verify text difference, verse 34
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff3, new BCVRef(01030034), DifferenceType.TextDifference,
				para3Curr, iv34MinCurr, iv34MinCurr + 4, para1Rev, iv34MinRev, iv34MinRev + 15);

			// Paragraph missing in current, verse 35
			Difference diff4 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaAddedDiff(diff4, new BCVRef(01030035), new BCVRef(01030035),
				DifferenceType.ParagraphMissingInCurrent, para2Rev, para3Curr,
				para3Curr.Contents.Length);

			// Revert diffs
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3032Versie 3@. 33Versily, versily, I say unto you, ",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Revert complex diff
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3032Versie 3@. 33For as churning the milk produces butter, and " +
				"as twisting the nose produces blood, so stirring up anger produces strife" +
				" for people who are strify. 34Verse 34.",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Revert text changes in verse 34
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3032Versie 3@. 33For as churning the milk produces butter, and " +
				"as twisting the nose produces blood, so stirring up anger produces strife" +
				" for people who are strify. 34Versify thirty-four.",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Revert paragraph missing in current
			m_bookMerger.ReplaceCurrentWithRevision(diff4);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3032Versie 3@. 33For as churning the milk produces butter, and " +
				"as twisting the nose produces blood, so stirring up anger produces strife" +
				" for people who are strify. 34Versify thirty-four.", ((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("35Verse 35.", ((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}
			#endregion

			#region Multi-para Verses: Many-To-One Segments (Paras Merged)
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when the current has a verse in one paragraph and the
		/// corresponding revision verse is in three paragraphs.
		/// There are no text changes between the current and the revision.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_MultiParasInVerse_ThreeToOneParas_NoTextChanges()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCurr = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraph
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 30, 33, "For as churning the cream produces butter, and as twisting "
				+ "the nose produces blood, ");
			int ichLastBreakCurr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 0, "so stirring up anger produces strife.");

			// Build up the "revision" paragraphs
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 33, "For as churning the cream produces butter, ");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "and as twisting the nose produces blood, ");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 0, "so stirring up anger produces strife.");

			int iPara1Break = para1Rev.Contents.Length;
			int iPara2Break = iPara1Break + para2Rev.Contents.Length;

			m_bookMerger.DetectDifferences(null);

			// We expect one paragraph structure difference with three subdifferences.
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01030033), new BCVRef(01030033),
				DifferenceType.ParagraphMergedInCurrent);
			Assert.AreEqual(3, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.NoDifference,
				para1Curr, iPara1Break, iPara2Break,
				para1Rev, iPara1Break, iPara1Break);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.NoDifference,
				null, 0, 0, para2Rev, 0, para2Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 2, DifferenceType.NoDifference,
				null, 0, 0, para3Rev, 0, 0);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when the current has a verse in one paragraph and the
		/// corresponding revision verse is in three paragraphs.
		/// There is a text change in the first and last parts of the verse.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_MultiParasInVerse_ThreeToOneParas_TextChanges()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCurr = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraph
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 30, 33, "For as churning the ");
			int iTxtChgStartCurr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 0, "milk produces butter, and as twisting "
				+ "the nose produces blood, so");
			int iTxtChgEndCurr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 0, " stirring up anger produces strife.");

			// Build up the "revision" paragraphs
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 33, "For as churning the cream produces butter,");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "and as twisting the nose produces blood,");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 0, "then stirring up anger produces strife.");

			m_bookMerger.DetectDifferences(null);

			// We expect one paragraph structure difference with three subdifferences.
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01030033), new BCVRef(01030033),
				DifferenceType.ParagraphMergedInCurrent);
			Assert.AreEqual(3, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.TextDifference,
				para1Curr, iTxtChgStartCurr, iTxtChgEndCurr,
				para1Rev, iTxtChgStartCurr, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.TextDifference,
				null, 0, 0, para2Rev, 0, para2Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 2, DifferenceType.TextDifference,
				null, 0, 0, para3Rev, 0, 4);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the current
		/// has a verse in one paragraph and the corresponding revision verse is in three paragraphs.
		/// There are no text changes between the current and the revision.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultiParasInVerse_ThreeToOneParas_NoTextChanges()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCurr = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraph
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 30, 33, "For as churning the cream produces butter, and as twisting "
				+ "the nose produces blood, ");
			int ichLastBreakCurr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 0, "so stirring up anger produces strife.");

			// Build up the "revision" paragraphs
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 33, "For as churning the cream produces butter, ");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "and as twisting the nose produces blood, ");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 0, "so stirring up anger produces strife.");

			int iPara1Break = para1Rev.Contents.Length;
			int iPara2Break = iPara1Break + para2Rev.Contents.Length;

			m_bookMerger.DetectDifferences(null);

			// We expect one paragraph structure difference with three subdifferences.
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01030033), new BCVRef(01030033),
				DifferenceType.ParagraphMergedInCurrent);
			Assert.AreEqual(3, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.NoDifference,
				para1Curr, iPara1Break, iPara2Break,
				para1Rev, iPara1Break, iPara1Break);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.NoDifference,
				null, 0, 0, para2Rev, 0, para2Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 2, DifferenceType.NoDifference,
				null, 0, 0, para3Rev, 0, 0);

			// Revert the complex difference in verse 33: para merged, and text changes in two
			// ScrVerses in the current
			m_bookMerger.ReplaceCurrentWithRevision(m_bookMerger.Differences.MoveFirst());

			// We expect the one paragraph to be split into three paragraphs.
			Assert.AreEqual(3, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3033For as churning the cream produces butter, ",
				sectionCurr.ContentOA[0].Contents.Text);
			Assert.AreEqual("and as twisting the nose produces blood, ",
				sectionCurr.ContentOA[1].Contents.Text);
			Assert.AreEqual("so stirring up anger produces strife.",
				sectionCurr.ContentOA[2].Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the current
		/// has a verse in one paragraph and the corresponding revision verse is in three paragraphs.
		/// There are no text changes between the current and the revision.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultiParasInVerse_ThreeToOneParas_ParaStyleChanges()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCurr = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraph
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 30, 33, "For as churning the cream produces butter, and as twisting "
				+ "the nose produces blood, ");
			int ichLastBreakCurr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 0, "so stirring up anger produces strife.");

			// Build up the "revision" paragraphs
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.Line3);
			AddVerse(para1Rev, 30, 33, "For as churning the cream produces butter, ");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.Line1);
			AddVerse(para2Rev, 0, 0, "and as twisting the nose produces blood, ");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.CitationParagraph);
			AddVerse(para3Rev, 0, 0, "so stirring up anger produces strife.");

			int iPara1Break = para1Rev.Contents.Length;
			int iPara2Break = iPara1Break + para2Rev.Contents.Length;

			m_bookMerger.DetectDifferences(null);

			Assert.AreEqual(2, m_bookMerger.Differences.Count);
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.ParagraphStyleDifference, diff1.DiffType);
			Assert.AreEqual(para1Curr, diff1.ParaCurr);
			Assert.AreEqual(para1Rev, diff1.ParaRev);

			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff2, new BCVRef(01030033), new BCVRef(01030033),
				DifferenceType.ParagraphMergedInCurrent);
			Assert.AreEqual(3, diff2.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 0, DifferenceType.ParagraphStyleDifference,
				para1Curr, iPara1Break, iPara2Break,
				para1Rev, iPara1Break, iPara1Break);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 1, DifferenceType.ParagraphStyleDifference,
				null, 0, 0, para2Rev, 0, para2Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 2, DifferenceType.ParagraphStyleDifference,
				null, 0, 0, para3Rev, 0, 0);

			// Revert the complex difference in verse 33: para merged, and text changes in two
			// ScrVerses in the current
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			m_bookMerger.ReplaceCurrentWithRevision(diff2);

			// We expect the one paragraph to be split into three paragraphs.
			Assert.AreEqual(3, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3033For as churning the cream produces butter, ",
				sectionCurr.ContentOA[0].Contents.Text);
			Assert.AreEqual(ScrStyleNames.Line3, sectionCurr.ContentOA[0].StyleName);
			Assert.AreEqual("and as twisting the nose produces blood, ",
				sectionCurr.ContentOA[1].Contents.Text);
			Assert.AreEqual(ScrStyleNames.Line1, sectionCurr.ContentOA[1].StyleName);
			Assert.AreEqual("so stirring up anger produces strife.",
				sectionCurr.ContentOA[2].Contents.Text);
			Assert.AreEqual(ScrStyleNames.CitationParagraph, sectionCurr.ContentOA[2].StyleName);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the current
		/// has a verse in one paragraph and the corresponding revision verse is in three paragraphs.
		/// There is a text change in the first and last parts of the verse,
		/// such that there is no correlaton at the start or end of the cluster.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultiParasInVerse_ThreeToOneParas_CorrNone()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCurr = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraph
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 30, 32, "Verse 32. ");
			AddVerse(para1Curr, 0, 33, "For as churning the ");
			int iTxtChgStartCurr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 0, "milk produces butter, and as twisting "
				+ "the nose produces blood, so");
			int iTxtChgEndCurr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 0, " stirring up anger produces strife.");
			AddVerse(para1Curr, 0, 34, "Verse 34.");

			// Build up the "revision" paragraphs
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 32, "Versie 3@. ");
			AddVerse(para1Rev, 0, 33, "For as churning the cream produces butter,");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "and as twisting the nose produces blood,");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 0, "then stirring up anger produces strife.");
			AddVerse(para3Rev, 0, 34, "Versify thirty-four.");
			IScrTxtPara para4Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para4Rev, 0, 35, "Verse 35.");

			m_bookMerger.DetectDifferences(null);

			Assert.AreEqual(4, m_bookMerger.Differences.Count);

			// Verify text diff in Verse 32
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, new BCVRef(01030032), DifferenceType.TextDifference,
				para1Curr, 8, 12, para1Rev, 8, 13);

			// We expect one paragraph structure difference with three subdifferences.
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff2, new BCVRef(01030033), new BCVRef(01030033),
				DifferenceType.ParagraphMergedInCurrent);
			Assert.AreEqual(3, diff2.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 0, DifferenceType.TextDifference,
				para1Curr, iTxtChgStartCurr, iTxtChgEndCurr,
				para1Rev, iTxtChgStartCurr + 1, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 1, DifferenceType.TextDifference,
				null, 0, 0, para2Rev, 0, para2Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 2, DifferenceType.TextDifference,
				null, 0, 0, para3Rev, 0, 4);

			// Verify text diff in verse 34
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff3, new BCVRef(01030034), DifferenceType.TextDifference,
				para1Curr, para1Curr.Contents.Length - 5, para1Curr.Contents.Length - 1,
				para3Rev, para3Rev.Contents.Length - 16, para3Rev.Contents.Length - 1);

			// Verify paragraph missing in current
			Difference diff4 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaAddedDiff(diff4, new BCVRef(01030035), new BCVRef(01030035),
				DifferenceType.ParagraphMissingInCurrent, para4Rev,
				para1Curr, para1Curr.Contents.Length);

			// Revert text change in verse 32
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual("3032Versie 3@. 33For as churning the milk produces butter, and as "
				+ "twisting the nose produces blood, so stirring up anger produces strife."
				+ "34Verse 34.",
				((IScrTxtPara)sectionCurr.ContentOA[0]).Contents.Text);


			// Revert the complex difference in verse 33: para merged, and text changes in two
			// ScrVerses in the current
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			// We expect the one paragraph to be split into three paragraphs and text changes to be made.
			Assert.AreEqual(3, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3032Versie 3@. 33For as churning the cream produces butter,",
				((IScrTxtPara)sectionCurr.ContentOA[0]).Contents.Text);
			Assert.AreEqual("and as twisting the nose produces blood,",
				((IScrTxtPara)sectionCurr.ContentOA[1]).Contents.Text);
			Assert.AreEqual("then stirring up anger produces strife.34Verse 34.",
				((IScrTxtPara)sectionCurr.ContentOA[2]).Contents.Text);

			// Revert text change in verse 34
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual("then stirring up anger produces strife.34Versify thirty-four.",
				((IScrTxtPara)sectionCurr.ContentOA[2]).Contents.Text);

			// Revert missing para in current
			m_bookMerger.ReplaceCurrentWithRevision(diff4);
			Assert.AreEqual(4, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("35Verse 35.",
				((IScrTxtPara)sectionCurr.ContentOA[3]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the current
		/// has a verse in one paragraph with correlation to the first paragraph in the revision
		/// verse. Two paragraphs are added in the revision verse. There are adjacent changes on
		/// either side of the cluster.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultiParasInVerse_ThreeToOneParas_CorrFirst()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCurr = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraph
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 30, 32, "Verse 32. ");
			AddVerse(para1Curr, 0, 33, "For as churning the ");
			int iTxtChgStartCurr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 0, "milk produces good butter, ");
			int iTxtChgEndCurr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 34, "Verse 34.");

			// Build up the "revision" paragraphs
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 32, "Versie 3@. ");
			AddVerse(para1Rev, 0, 33, "For as churning the ");
			int iTxtChgStartRev = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 0, "cream produces good butter, ");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "and as twisting the nose produces blood,");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 0, "then stirring up anger produces strife. ");
			int ichLimVerse33Para3Rev = para3Rev.Contents.Length;
			AddVerse(para3Rev, 0, 34, "Versify thirty-four.");
			IScrTxtPara para4Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para4Rev, 0, 35, "Verse 35.");

			m_bookMerger.DetectDifferences(null);

			Assert.AreEqual(5, m_bookMerger.Differences.Count);

			// Verify text diff in Verse 32
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, new BCVRef(01030032), DifferenceType.TextDifference,
				para1Curr, 8, 12, para1Rev, 8, 13);

			// Verify text diff begining in verse 33
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff2, new BCVRef(01030033), DifferenceType.TextDifference,
				para1Curr, iTxtChgStartCurr, iTxtChgStartCurr + 4,
				para1Rev, iTxtChgStartRev, iTxtChgStartRev + 5);

			// We expect one paragraph structure difference with three subdifferences.
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff3, new BCVRef(01030033), new BCVRef(01030033),
				DifferenceType.ParagraphStructureChange);
			Assert.AreEqual(3, diff3.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffParaReferencePoints(diff3, para1Curr, iTxtChgEndCurr, para1Rev, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffParaAdded(diff3, 1, DifferenceType.ParagraphMissingInCurrent, para2Rev, para2Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff3, 2, DifferenceType.TextDifference, null, 0, 0, para3Rev, 0, ichLimVerse33Para3Rev);

			// Verify text diff in verse 34
			Difference diff4 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff4, new BCVRef(01030034), DifferenceType.TextDifference,
				para1Curr, para1Curr.Contents.Length - 5, para1Curr.Contents.Length - 1,
				para3Rev, para3Rev.Contents.Length - 16, para3Rev.Contents.Length - 1);

			// Verify paragraph missing in current
			Difference diff5 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaAddedDiff(diff5, new BCVRef(01030035), new BCVRef(01030035),
				DifferenceType.ParagraphMissingInCurrent, para4Rev,
				para1Curr, para1Curr.Contents.Length);

			// Revert text change in verse 32
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual("3032Versie 3@. 33For as churning the milk produces good butter, "
				+ "34Verse 34.",
				((IScrTxtPara)sectionCurr.ContentOA[0]).Contents.Text);

			// Revert text change in verse 33
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(1, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3032Versie 3@. 33For as churning the cream produces good butter, "
				+ "34Verse 34.",
				((IScrTxtPara)sectionCurr.ContentOA[0]).Contents.Text);

			// Revert the complex difference in verse 33: para's missing in current
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			// We expect the one paragraph to be split into three paragraphs and text changes to be made.
			Assert.AreEqual(3, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3032Versie 3@. 33For as churning the cream produces good butter, ",
				((IScrTxtPara)sectionCurr.ContentOA[0]).Contents.Text);
			Assert.AreEqual("and as twisting the nose produces blood,",
				((IScrTxtPara)sectionCurr.ContentOA[1]).Contents.Text);
			Assert.AreEqual("then stirring up anger produces strife. 34Verse 34.",
				((IScrTxtPara)sectionCurr.ContentOA[2]).Contents.Text);

			// Revert text change in verse 34
			m_bookMerger.ReplaceCurrentWithRevision(diff4);
			Assert.AreEqual("then stirring up anger produces strife. 34Versify thirty-four.",
				((IScrTxtPara)sectionCurr.ContentOA[2]).Contents.Text);

			// Revert missing para in current
			m_bookMerger.ReplaceCurrentWithRevision(diff5);
			Assert.AreEqual(4, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("35Verse 35.",
				((IScrTxtPara)sectionCurr.ContentOA[3]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the current
		/// has a verse in one paragraph and the corresponding revision verse is in three paragraphs.
		/// The last paragraph in the revision correlates with the current paragraph however we do
		/// not take it out of the coplex diffs because of issues with the verse number.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultiParasInVerse_ThreeToOneParas_CorrLast()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCurr = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraph
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 30, 32, "Verse 32. ");
			int iv33TxtChgStartCurr = para1Curr.Contents.Length + 2;
			AddVerse(para1Curr, 0, 33, "so stirring up anger produces strife as a result. ");
			int ichV33EndCurr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 34, "Verse 34.");

			// Build up the "revision" paragraphs
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 32, "Versie 3@. ");
			AddVerse(para1Rev, 0, 33, "For as churning the cream produces good butter,");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "and as twisting the nose produces blood,");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 0, "then stirring up anger produces strife as a result. ");
			AddVerse(para3Rev, 0, 34, "Versify thirty-four.");
			IScrTxtPara para4Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para4Rev, 0, 35, "Verse 35.");

			m_bookMerger.DetectDifferences(null);

			Assert.AreEqual(4, m_bookMerger.Differences.Count);

			// Verify text diff in Verse 32
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, new BCVRef(01030032), DifferenceType.TextDifference,
				para1Curr, 8, 12, para1Rev, 8, 13);

			// We expect one paragraph structure difference with three subdifferences.
			// There is a correlation between para1Curr and para3Rev however we do not make
			// this text difference a different diff because of the verse number difference.
			// We don't want to revert and have two verse 33's.
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff2, new BCVRef(01030033), new BCVRef(01030033),
				DifferenceType.ParagraphMergedInCurrent);
			Assert.AreEqual(3, diff2.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 0, DifferenceType.TextDifference,
				para1Curr, iv33TxtChgStartCurr, iv33TxtChgStartCurr + 2,
				para1Rev, 17, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 1, DifferenceType.TextDifference,
				null, 0, 0, para2Rev, 0, para2Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 2, DifferenceType.TextDifference,
				null, 0, 0, para3Rev, 0, 4);

			// Verify text diff in verse 34
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff3, new BCVRef(01030034), DifferenceType.TextDifference,
				para1Curr, para1Curr.Contents.Length - 5, para1Curr.Contents.Length - 1,
				para3Rev, para3Rev.Contents.Length - 16, para3Rev.Contents.Length - 1);

			// Verify paragraph missing in current
			Difference diff4 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaAddedDiff(diff4, new BCVRef(01030035), new BCVRef(01030035),
				DifferenceType.ParagraphMissingInCurrent, para4Rev,
				para1Curr, para1Curr.Contents.Length);

			// Revert text change in verse 32
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual("3032Versie 3@. 33so stirring up anger produces strife as a result. 34Verse 34.",
				sectionCurr.ContentOA[0].Contents.Text);

			// Revert the complex difference in verse 33: para's missing in current
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			// We expect the one paragraph to be split into three paragraphs and text changes to be made.
			Assert.AreEqual(3, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3032Versie 3@. 33For as churning the cream produces good butter,",
				sectionCurr.ContentOA[0].Contents.Text);
			Assert.AreEqual("and as twisting the nose produces blood,",
				sectionCurr.ContentOA[1].Contents.Text);
			Assert.AreEqual("then stirring up anger produces strife as a result. 34Verse 34.",
				sectionCurr.ContentOA[2].Contents.Text);

			// Revert text change in verse 34
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual("then stirring up anger produces strife as a result. 34Versify thirty-four.",
				sectionCurr.ContentOA[2].Contents.Text);

			// Revert missing para in current
			m_bookMerger.ReplaceCurrentWithRevision(diff4);
			Assert.AreEqual(4, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("35Verse 35.", sectionCurr.ContentOA[3].Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}
			#endregion

			#region Multi-para Verses: Many-To-Many Segments -Detect
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when the current has one verse in three paragraphs
		/// and when the corresponding revision verse has two paragraphs.
		/// There is a text change in the first and last parts of the verse,
		/// such that there is no correlaton at the start or end of the cluster.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_MultiParasInVerse_TwoToThreeParas_CorrNone()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraphs
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 30, 33, "For as churning the cream");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 0, "produces butter, and as twisting the nose produces blood,");
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para3Curr, 0, 0, "then stirring up anger produces strife.");

			// Build up the "revision" paragraph
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 33, "For as churning the milk produces butter, and as twisting");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "the nose produces blood, so stirring up anger produces strife.");

			m_bookMerger.DetectDifferences(null);

			// We expect one paragraph structure difference with three subdifferences.
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01030033), new BCVRef(01030033),
				DifferenceType.ParagraphStructureChange);
			Assert.IsNotNull(diff.SubDiffsForParas);
			Assert.AreEqual(3, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.TextDifference,
				para1Curr, 24, para1Curr.Contents.Text.Length,
				para1Rev, 24, para1Rev.Contents.Text.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.TextDifference,
				para2Curr, 0, para2Curr.Contents.Text.Length, null, 0, 0);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 2, DifferenceType.TextDifference,
				para3Curr, 0, 4, para2Rev, 0, 27);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when the current has one verse split into three paragraphs
		/// within a verse and when the corresponding revision verse has two paragraphs.
		/// There is a text change in the first and last parts of the verse,
		/// such that there is correlaton at the end of the cluster.
		///
		/// Current:
		///		201They were all together. 2Suddenly there really was a
		///		violent wind sound.
		///		They saw purple tongues of fire. 3And other stuff too.
		///
		/// Revision:
		///		201They were all together. 2Suddenly there was a strong wind noise.
		///		They saw tongues of fire. 3And other stuff too.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_MultiParasInVerse_TwoToThreeParas_CorrEnd()
		{
			// Create current and revision data.
			IScrTxtPara para1Curr;
			IScrTxtPara para2Curr;
			int iCurrParaSplit2;
			IScrTxtPara para3Curr;
			IScrTxtPara para1Rev;
			IScrTxtPara para2Rev;
			int iRevParaSplit2;
			CreateData_MultiParasInVerse_TwoToThreeParas_CorrEnd(out para1Curr, out para2Curr,
				out iCurrParaSplit2, out para3Curr, out para1Rev, out para2Rev, out iRevParaSplit2);

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// Verify diff
			// Verses 1, 2, and 3 should be in the two paragraphs in the revision,
			// but in three paragraphs in the current version.
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff1, new BCVRef(01020002), new BCVRef(01020002),
				DifferenceType.ParagraphSplitInCurrent);

			Assert.AreEqual(2, diff1.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff1, 0, DifferenceType.TextDifference,
				para1Curr, 43, para1Curr.Contents.Length, para1Rev, 43, para1Rev.Contents.Length - 2);

			// We expect the whole verse to be seen as a different because the last part of the verse is different.
			DiffTestHelper.VerifySubDiffTextCompared(diff1, 1, DifferenceType.TextDifference,
				para2Curr, 0, para2Curr.Contents.Length - 2, null, 0, 0);

			// Verify text diff in last para
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff2, new BCVRef(01020002), DifferenceType.TextDifference,
				para3Curr, 9, 16, para2Rev, 9);

			// MoveNext should return null because there are no more differences
			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Creates the current and revision data for ParaSplitMidVerse_TextChangeInMultiParaVerses
		/// tests.
		/// </summary>
		/// <param name="para1Curr">The first current para.</param>
		/// <param name="para2Curr">The second current para.</param>
		/// <param name="iCurrParaSplit2">The character offset at the split for second current para.</param>
		/// <param name="para3Curr">The third current para.</param>
		/// <param name="para1Rev">The first revision para.</param>
		/// <param name="para2Rev">The second revision para.</param>
		/// <param name="iRevParaSplit2">The character offset at the end of verse 2 in the
		/// revision.</param>
		/// ------------------------------------------------------------------------------------
		private void CreateData_MultiParasInVerse_TwoToThreeParas_CorrEnd(out IScrTxtPara para1Curr,
			out IScrTxtPara para2Curr, out int iCurrParaSplit2, out IScrTxtPara para3Curr,
			out IScrTxtPara para1Rev, out IScrTxtPara para2Rev, out int iRevParaSplit2)
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraphs
			para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 20, 1, "They were all together. ");
			AddVerse(para1Curr, 0, 2, "Suddenly there really was a "); // text chg--"really" inserted
			int iCurrParaSplit1 = para1Curr.Contents.Text.Length;
			para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 0, "violent wind sound. "); // text chg
			iCurrParaSplit2 = para2Curr.Contents.Text.Length;
			para3Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para3Curr, 0, 0, "They saw purple tongues of fire. "); //text chg--"purple" inserted
			AddVerse(para3Curr, 0, 3, "And other stuff too.");

			// Build up the "revision" paragraph
			para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 20, 1, "They were all together. ");
			AddVerse(para1Rev, 0, 2, "Suddenly there was a strong wind noise. ");
			para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "They saw tongues of fire. ");
			iRevParaSplit2 = para2Rev.Contents.Text.Length;
			AddVerse(para2Rev, 0, 3, "And other stuff too.");
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when there are multiple paragraphs for a verse (such as poetry)
		/// that have a skewed correlation.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		[Ignore("this type of ScrVerse correlation is no longer supported")]
		public void DetectDifferences_MultiParasInVerse_SkewedCorrelation()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verse");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verse");

			// Build up the "current" paragraphs
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);

			AddRunToMockedPara(para1Curr, "20", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Curr, "6", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "Now I know that the LORD saves his anointed king.", ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "He will answer him from his holy heaven.", ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Curr, "and rescue him by his great power.", ScrStyleNames.NormalParagraph);

			// Build up the "revision" paragraphs
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);

			AddRunToMockedPara(para1Rev, "20", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Rev, "6", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "With his great power to rescue,", ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "Then I know that the LORD saves his anointed king.", ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Rev, "and He will answer him from his holy heaven.", ScrStyleNames.NormalParagraph);

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(4, m_bookMerger.Differences.Count);

			// Verify diff 1
			// verse 6a in rev para 1 "6With his great power to rescue," is a verse missing in current
			Difference diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01020006, diff.RefStart);
			Assert.AreEqual(DifferenceType.VerseMissingInCurrent, diff.DiffType);
			Assert.AreEqual(para1Curr, diff.ParaCurr);
			Assert.AreEqual(para1Rev, diff.ParaRev);
			Assert.AreEqual(2, diff.IchMinCurr);
			Assert.AreEqual(2, diff.IchLimCurr);
			Assert.AreEqual(2, diff.IchMinRev);
			Assert.AreEqual(para1Rev.Contents.Length, diff.IchLimRev);

			// Verify diff 2
			// The text "...I know that the LORD saves his anointed king." correlates para1Curr and para2Rev
			// text difference: "6Now" to "Then" at the start of the ScrVerse
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01020006, diff.RefStart);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(para1Curr, diff.ParaCurr);
			Assert.AreEqual(para2Rev, diff.ParaRev);
			Assert.AreEqual(2, diff.IchMinCurr); //after chapter number
			Assert.AreEqual(6, diff.IchLimCurr);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(4, diff.IchLimRev);

			// Verify diff 3
			// The text "...He will answer him from his holy heaven." correlates para2Curr and para3Rev
			// text difference: added the word "and " to the start of the rev para 3
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01020006, diff.RefStart);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(para2Curr, diff.ParaCurr);
			Assert.AreEqual(para3Rev, diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(0, diff.IchLimCurr);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(4, diff.IchLimRev);

			// Verify diff 4
			// verse 6c in curr para 3 "and rescue him by his great power." is a complete paragraph added to current
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01020006, diff.RefStart);
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff.DiffType);
			Assert.AreEqual(para3Curr, diff.ParaCurr);
			Assert.AreEqual(para3Rev, diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(para3Curr.Contents.Length, diff.IchLimCurr);
			Assert.AreEqual(para3Rev.Contents.Length, diff.IchMinRev);
			Assert.AreEqual(para3Rev.Contents.Length, diff.IchLimRev);

			// MoveNext should return null because there are no more differences
			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when there are multiple paragraphs for a verse (such as poetry)
		/// and the only correlating paragraph is the middle of the three (TE-6880).
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		[Ignore("test for TE-6880; would require the cluster simplification to scan at least two pairs before stopping correlation attempts")]
		public void DetectDifferences_MultiParasInVerse_TwoToThreeParas_CorrMid()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verse");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verse");

			// Build up the "current" verse paragraphs
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 20, 6, "This is the start of verse six");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 0, "Which has a common center section");
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para3Curr, 0, 0, "and some final verbage to finish it off");

			// Build up the "revision" verse paragraphs
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 20, 6, "A first part of the revision is very different");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "Which has a similar center section");

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(3, m_bookMerger.Differences.Count);

			// first difference is an uncorrelated text difference between curr para 1 and rev para 1
			Difference diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01020006, diff.RefStart);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(para1Curr, diff.ParaCurr);
			Assert.AreEqual(para1Rev, diff.ParaRev);
			Assert.AreEqual(3, diff.IchMinCurr);
			Assert.AreEqual(para1Curr.Contents.Length, diff.IchLimCurr);
			Assert.AreEqual(3, diff.IchMinRev);
			Assert.AreEqual(para1Rev.Contents.Length, diff.IchLimRev);

			// second difference is a correlated text difference in curr para 2 and rev para 2
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01020006, diff.RefStart);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(para2Curr, diff.ParaCurr);
			Assert.AreEqual(para2Rev, diff.ParaRev);
			Assert.AreEqual(12, diff.IchMinCurr);
			Assert.AreEqual(18, diff.IchLimCurr);
			Assert.AreEqual(12, diff.IchMinRev);
			Assert.AreEqual(19, diff.IchLimRev);

			// curr para 3 was added
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01020006, diff.RefStart);
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff.DiffType);
			Assert.AreEqual(para3Curr, diff.ParaCurr);
			Assert.AreEqual(para2Rev, diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(para3Curr.Contents.Length, diff.IchLimCurr);
			Assert.AreEqual(para2Rev.Contents.Length, diff.IchMinRev);
			Assert.AreEqual(para2Rev.Contents.Length, diff.IchLimRev);

			// MoveNext should return null because there are no more differences
			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
			#endregion
			#region Multi-para Verses: Many-To-Many Segments -Revert
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the current
		/// has one verse split into three paragraphs within a verse and when the corresponding
		/// revision verse has two paragraphs. There is a text change in the first and last parts
		/// of the verse.
		///
		/// Current:
		///		201They were all together. 2Suddenly there really was a
		///		violent wind sound.
		///		They saw purple tongues of fire. 3And other stuff too.
		///
		/// Revision:
		///		201They were all together. 2Suddenly there was a strong wind noise.
		///		They saw tongues of fire. 3And other stuff too.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultiParasInVerse_TwoToThreeParas_CorrEnd()
		{
			// Create current and revision data.
			IScrTxtPara para1Curr;
			IScrTxtPara para2Curr;
			int iCurrParaSplit2;
			IScrTxtPara para3Curr;
			IScrTxtPara para1Rev;
			IScrTxtPara para2Rev;
			int iRevParaSplit2;
			CreateData_MultiParasInVerse_TwoToThreeParas_CorrEnd(out para1Curr, out para2Curr,
				out iCurrParaSplit2, out para3Curr, out para1Rev, out para2Rev, out iRevParaSplit2);

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);

			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// Verify diff
			// Verses 1, 2, and 3 should be in the two paragraphs in the revision,
			// but in three paragraphs in the current version.
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff1, new BCVRef(01020002), new BCVRef(01020002),
				DifferenceType.ParagraphSplitInCurrent);
			Assert.AreEqual(2, diff1.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff1, 0, DifferenceType.TextDifference,
				para1Curr, 43, para1Curr.Contents.Length, para1Rev, 43, para1Rev.Contents.Length - 2);
			// We expect the whole verse to be seen as a different because the last part of the verse is different.
			DiffTestHelper.VerifySubDiffTextCompared(diff1, 1, DifferenceType.TextDifference,
				para2Curr, 0, para2Curr.Contents.Length - 2, null, 0, 0);

			// Verify text diff in last para
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff2, new BCVRef(01020002), DifferenceType.TextDifference,
				para3Curr, 9, 16, para2Rev, 9);

			// Revert the complex difference in verse two: para split, and text changes in three
			// ScrVerses in the current
			IScrSection sectionCurr = (IScrSection)para1Curr.Owner.Owner;
			Assert.AreEqual(3, sectionCurr.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff1);

			Assert.AreEqual(2, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("201They were all together. 2Suddenly there was a strong wind noise. ",
				((IScrTxtPara)sectionCurr.ContentOA[0]).Contents.Text);
			Assert.AreEqual("They saw purple tongues of fire. 3And other stuff too.",
				((IScrTxtPara)sectionCurr.ContentOA[1]).Contents.Text);

			m_bookMerger.ReplaceCurrentWithRevision(diff2);

			Assert.AreEqual("They saw tongues of fire. 3And other stuff too.",
				((IScrTxtPara)sectionCurr.ContentOA[1]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the current
		/// has one verse in two paragraphs and when the corresponding revision verse has three
		/// paragraphs. There is a text change in the first and last parts of the verse.
		///
		/// Current:
		///		3033For as churning the milk produces butter, and as twisting
		///		the nose produces blood, so stirring up anger produces strife.
		///
		/// Revision:
		///		3033For as churning the cream
		///		produces butter, and as twisting the nose produces blood,
		///		then stirring up anger produces strife.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultiParasInVerse_ThreeToTwoParas_TextChanges()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraph
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 30, 33, "For as churning the milk produces butter, and as twisting");
			IScrTxtPara para2Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Cur, 0, 0, "the nose produces blood, so stirring up anger produces strife.");

			// Build up the "revision" paragraphs
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 33, "For as churning the cream");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "produces butter, and as twisting the nose produces blood,");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 0, "then stirring up anger produces strife.");

			m_bookMerger.DetectDifferences(null);

			//Verify the diffs
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01030033), new BCVRef(01030033),
				DifferenceType.ParagraphStructureChange);
			Assert.AreEqual(3, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.TextDifference,
				para1Cur, 24, para1Cur.Contents.Length,
				para1Rev, 24, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.TextDifference,
				null, 0, 0,
				para2Rev, 0, para2Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 2, DifferenceType.TextDifference,
				para2Cur, 0, 27,
				para3Rev, 0, 4);

			// Revert the complex difference in verse two: para merged, and text changes in two
			// ScrVerses in the current
			IScrSection sectionCurr = (IScrSection)para1Cur.Owner.Owner;
			Assert.AreEqual(2, sectionCurr.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff);

			Assert.AreEqual(3, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3033For as churning the cream",
				((IScrTxtPara)sectionCurr.ContentOA[0]).Contents.Text);
			Assert.AreEqual("produces butter, and as twisting the nose produces blood,",
				((IScrTxtPara)sectionCurr.ContentOA[1]).Contents.Text);
			Assert.AreEqual("then stirring up anger produces strife.",
				((IScrTxtPara)sectionCurr.ContentOA[2]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the current
		/// has one verse in two paragraphs and when the corresponding revision verse has three
		/// paragraphs. There are no text changes.
		///
		/// Current:
		///		3033For as churning the milk produces butter, and as twisting
		///		the nose produces blood, so stirring up anger produces strife.
		///
		/// Revision:
		///		3033For as churning the cream
		///		produces butter, and as twisting the nose produces blood,
		///		then stirring up anger produces strife.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultiParasInVerse_ThreeToTwoParas_NoTextChanges()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraph
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 30, 33, "For as churning the milk produces butter, and as twisting ");
			IScrTxtPara para2Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Cur, 0, 0, "the nose produces blood, so stirring up anger produces strife.");

			// Build up the "revision" paragraphs
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 33, "For as churning the milk ");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "produces butter, and as twisting the nose produces blood, ");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 0, "so stirring up anger produces strife.");

			m_bookMerger.DetectDifferences(null);

			//Verify the diffs
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01030033), new BCVRef(01030033),
				DifferenceType.ParagraphStructureChange);
			Assert.AreEqual(3, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.NoDifference,
				para1Cur, 29, para1Cur.Contents.Length,
				para1Rev, para1Rev.Contents.Length, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.NoDifference,
				null, 0, 0,
				para2Rev, 0, para2Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 2, DifferenceType.NoDifference,
				para2Cur, 0, 25,
				para3Rev, 0, 0);

			// Revert the complex difference in verse 33: para merged, and text changes in two
			// ScrVerses in the current
			IScrSection sectionCurr = (IScrSection)para1Cur.Owner.Owner;
			Assert.AreEqual(2, sectionCurr.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff);

			Assert.AreEqual(3, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3033For as churning the milk ",
				((IScrTxtPara)sectionCurr.ContentOA[0]).Contents.Text);
			Assert.AreEqual("produces butter, and as twisting the nose produces blood, ",
				((IScrTxtPara)sectionCurr.ContentOA[1]).Contents.Text);
			Assert.AreEqual("so stirring up anger produces strife.",
				((IScrTxtPara)sectionCurr.ContentOA[2]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when there are multiple paragraphs for a verse (such as poetry).
		/// Verse 6 has three paras in the Rev and two in the Curr.
		/// Two verse segments correlate from the end, such that the first verse segment in the
		/// Rev is missing in the Curr.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultiParasInVerse_ThreeToTwoParas_CorrLast2()
		{
			// Build up the "current" paragraphs
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verse");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 0, 6, "Now I know that the LORD saves his anointed king.");// correlates to mid of V6 Rev
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 0, "He will answer him from his holy heaven. "); // correlates to end of V6 Rev
			int para2V7Start = para2Curr.Contents.Length;
			AddVerse(para2Curr, 0, 7, "and rescue him by his great power."); //added to Current

			// Build up the "revision" paragraphs
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verse");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 0, 6, "With his great power to rescue,"); //missing in Current
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "Then I know that the LORD saves his anointed king.");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 0, "and He will answer him from his holy heaven. ");

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(3, m_bookMerger.Differences.Count);


			// Verify the diffs
			// verse 6 is a paragraph merged in current (with the range of the last ScrVerse shortened
			//  to the beginning)
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff1, 01001006, DifferenceType.ParagraphMergedInCurrent);
			Assert.AreEqual(2, diff1.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff1, 0, DifferenceType.TextDifference,
				para1Curr, 1, 4, para1Rev, 1, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff1, 1, DifferenceType.TextDifference,
				null, 0, 0, para2Rev, 0, 4);

			// The text "...He will answer him from his holy heaven." correlates para2Curr and para3Rev
			// text difference: added the word "and " to the start of the rev para 3
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff2, 01001006, DifferenceType.TextDifference, para2Curr, 0, 0,
				para3Rev, 0, 4);

			// verse 7 in curr para 2 "7and rescue him by his great power." is a verse added to current
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff3, 01001007, DifferenceType.VerseAddedToCurrent,
				para2Curr, para2V7Start, para2Curr.Contents.Length,
				para3Rev, para3Rev.Contents.Length, para3Rev.Contents.Length);

			// Revert differences
			// Revert paragraph merged
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("6With his great power to rescue,",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("Then I know that the LORD saves his anointed king.",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);
			Assert.AreEqual("He will answer him from his holy heaven. 7and rescue him by his" +
				" great power.", ((IScrTxtPara)sectionCur.ContentOA[2]).Contents.Text);

			// Revert text difference in last para of verse 6
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual("and He will answer him from his holy heaven. 7and rescue him by his" +
				" great power.", ((IScrTxtPara)sectionCur.ContentOA[2]).Contents.Text);

			// revert verse added to current
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual("and He will answer him from his holy heaven. ",
				((IScrTxtPara)sectionCur.ContentOA[2]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when there are multiple paragraphs for a verse (such as poetry).
		/// Verse 33 has three paras in the Rev and two in the Curr.
		/// No verse segments correlate.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultiParasInVerse_ThreeToTwoParas_CorrNone()
		{
			// Build up the "current" paragraph
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 30, 32, "Verse 32. ");
			AddVerse(para1Cur, 0, 33, "For as churnification of the milk producifies butteryness,");
			IScrTxtPara para2Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Cur, 0, 0, "and as twistificating the elbow produceth red stuff. ");
			AddVerse(para2Cur, 0, 34, "Verse 34.");

			// Build up the "revision" paragraphs
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 32, "Versie 3@. ");
			AddVerse(para1Rev, 0, 33, "For as churning the cream produces butter,");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "and as twisting the nose produces blood,");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 0, "then stirring up anger produces strife in aweful ways. ");
			AddVerse(para3Rev, 0, 34, "Versify thirty-four.");
			IScrTxtPara para4Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para4Rev, 0, 35, "Verse 35.");

			m_bookMerger.DetectDifferences(null);

			//Verify the diffs
			Assert.AreEqual(4, m_bookMerger.Differences.Count);

			// Verify text changed in verse 32
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, new BCVRef(01030032), DifferenceType.TextDifference,
				para1Cur, 8, 12, para1Rev, 8, 13);

			// At start of verse 33, three paras in Rev are merged to two para in Curr
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff2, new BCVRef(01030033), new BCVRef(01030033),
				DifferenceType.ParagraphStructureChange);
			Assert.AreEqual(3, diff2.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 0, DifferenceType.TextDifference,
				para1Cur, 29, para1Cur.Contents.Length,
				para1Rev, 30, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 1, DifferenceType.TextDifference,
				null, 0, 0, para2Rev, 0, para2Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 2, DifferenceType.TextDifference,
				para2Cur, 0, para2Cur.Contents.Length - 13,
				para3Rev, 0, para3Rev.Contents.Length - 24);

			// Verify texted changed in verse 34
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff3, new BCVRef(01030034), DifferenceType.TextDifference,
				para2Cur, para2Cur.Contents.Length - 5, para2Cur.Contents.Length - 1,
				para3Rev, para3Rev.Contents.Length - 16, para3Rev.Contents.Length - 1);

			// Verify paragraph missing in current
			Difference diff4 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaAddedDiff(diff4, new BCVRef(01030035), new BCVRef(01030035),
				DifferenceType.ParagraphMissingInCurrent, para4Rev, para2Cur,
				para2Cur.Contents.Length);

			// Revert text differnce in verse 32
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual("3032Versie 3@. 33For as churnification of the milk producifies butteryness,",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Revert para merged and text diffs in verse 33.
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3032Versie 3@. 33For as churning the cream produces butter,",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("and as twisting the nose produces blood,",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);
			Assert.AreEqual("then stirring up anger produces strife in aweful ways. 34Verse 34.",
				((IScrTxtPara)sectionCur.ContentOA[2]).Contents.Text);

			// Revert text changed in verse 34
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual("then stirring up anger produces strife in aweful ways. 34Versify thirty-four.",
				((IScrTxtPara)sectionCur.ContentOA[2]).Contents.Text);

			// Revert missing verse 35 in current
			m_bookMerger.ReplaceCurrentWithRevision(diff4);
			Assert.AreEqual(4, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("35Verse 35.",
				((IScrTxtPara)sectionCur.ContentOA[3]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when there are multiple paragraphs for a verse (such as poetry).
		/// Verse 33 has three paras in the Rev and two in the Curr.
		/// The last paragraph in verse 33 correlates.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultiParasInVerse_ThreeToTwoParas_CorrLast()
		{
			// Build up the "current" paragraph
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 30, 32, "Verse 32. ");
			AddVerse(para1Cur, 0, 33, "For as churnification of the milk producifies butteryness,");
			IScrTxtPara para2Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Cur, 0, 0, "so stirring up anger produces strife in aweful ways. ");
			AddVerse(para2Cur, 0, 34, "Verse 34.");

			// Build up the "revision" paragraphs
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 32, "Versie 3@. ");
			AddVerse(para1Rev, 0, 33, "For as churning the cream produces butter,");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "and as twisting the nose produces blood,");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 0, "then stirring up anger produces strife in aweful ways. ");
			AddVerse(para3Rev, 0, 34, "Versify thirty-four.");
			IScrTxtPara para4Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para4Rev, 0, 35, "Verse 35.");

			m_bookMerger.DetectDifferences(null);

			//Verify the diffs
			Assert.AreEqual(5, m_bookMerger.Differences.Count);

			// Verify text changed in verse 32
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, new BCVRef(01030032), DifferenceType.TextDifference,
				para1Cur, 8, 12, para1Rev, 8, 13);

			// At start of verse 33, three paras in Rev are merged to two para in Curr
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff2, new BCVRef(01030033), new BCVRef(01030033),
				DifferenceType.ParagraphMergedInCurrent);
			Assert.AreEqual(2, diff2.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 0, DifferenceType.TextDifference,
				para1Cur, 29, para1Cur.Contents.Length - 1,
				para1Rev, 30, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 1, DifferenceType.TextDifference,
				null, 0, 0, para2Rev, 0, para2Rev.Contents.Length - 1);

			// Verify texted changed at end of verse 33
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff3, new BCVRef(01030033), DifferenceType.TextDifference,
				para2Cur, 0, 2, para3Rev, 0, 4);

			// Verify texted changed in verse 34
			Difference diff4 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff4, new BCVRef(01030034), DifferenceType.TextDifference,
				para2Cur, para2Cur.Contents.Length - 5, para2Cur.Contents.Length - 1,
				para3Rev, para3Rev.Contents.Length - 16, para3Rev.Contents.Length - 1);

			// Verify paragraph missing in current
			Difference diff5 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaAddedDiff(diff5, new BCVRef(01030035), new BCVRef(01030035),
				DifferenceType.ParagraphMissingInCurrent, para4Rev, para2Cur,
				para2Cur.Contents.Length);

			// Revert text differnce in verse 32
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual("3032Versie 3@. 33For as churnification of the milk producifies butteryness,",
				sectionCur.ContentOA[0].Contents.Text);

			// Revert para merged and text diffs in verse 33.
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3032Versie 3@. 33For as churning the cream produces butter,",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("and as twisting the nose produces blood,",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);
			Assert.AreEqual("so stirring up anger produces strife in aweful ways. 34Verse 34.",
				((IScrTxtPara)sectionCur.ContentOA[2]).Contents.Text);

			// Revert text changed in the last para of verse 33
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual("then stirring up anger produces strife in aweful ways. 34Verse 34.",
				((IScrTxtPara)sectionCur.ContentOA[2]).Contents.Text);

			// Revert text changed in verse 34
			m_bookMerger.ReplaceCurrentWithRevision(diff4);
			Assert.AreEqual("then stirring up anger produces strife in aweful ways. 34Versify thirty-four.",
				((IScrTxtPara)sectionCur.ContentOA[2]).Contents.Text);

			// Revert missing verse 35 in current
			m_bookMerger.ReplaceCurrentWithRevision(diff5);
			Assert.AreEqual(4, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("35Verse 35.",
				((IScrTxtPara)sectionCur.ContentOA[3]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when there are multiple paragraphs for a verse (such as poetry).
		/// Verse 33 has three paras in the Current and two in the Revision.
		/// No verse segments correlate.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultiParasInVerse_TwoToThreeParas_CorrNone()
		{
			// Build up the "current" paragraph
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 30, 32, "Verse 32. ");
			AddVerse(para1Cur, 0, 33, "For as churnification of the milk producifies butteryness,");
			IScrTxtPara para2Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Cur, 0, 0, "and as twistificating the elbow produceth red stuff. ");
			IScrTxtPara para3Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para3Cur, 0, 0, "then stirring up anger produces strife in aweful ways. ");
			AddVerse(para3Cur, 0, 34, "Verse 34.");

			// Build up the "revision" paragraphs
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 32, "Versie 3@. ");
			AddVerse(para1Rev, 0, 33, "For as churning the cream produces butter,");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "and as twisting the nose produces blood. ");
			AddVerse(para2Rev, 0, 34, "Versify thirty-four.");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 35, "Verse 35.");

			m_bookMerger.DetectDifferences(null);

			//Verify the diffs
			Assert.AreEqual(4, m_bookMerger.Differences.Count);

			// Verify text changed in verse 32
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, new BCVRef(01030032), DifferenceType.TextDifference,
				para1Cur, 8, 12, para1Rev, 8, 13);

			// At start of verse 33, two paras in Rev are split into three paras in Curr
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff2, new BCVRef(01030033), new BCVRef(01030033),
				DifferenceType.ParagraphStructureChange);
			Assert.AreEqual(3, diff2.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 0, DifferenceType.TextDifference,
				para1Cur, 29, para1Cur.Contents.Length,
				para1Rev, 30, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 1, DifferenceType.TextDifference,
				para2Cur, 0, para2Cur.Contents.Length, null, 0, 0);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 2, DifferenceType.TextDifference,
				para3Cur, 0, para3Cur.Contents.Length - 13,
				para2Rev, 0, para2Rev.Contents.Length - 24);

			// Verify texted changed in verse 34
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff3, new BCVRef(01030034), DifferenceType.TextDifference,
				para3Cur, para3Cur.Contents.Length - 5, para3Cur.Contents.Length - 1,
				para2Rev, para2Rev.Contents.Length - 16, para2Rev.Contents.Length - 1);

			// Verify paragraph missing in current
			Difference diff4 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaAddedDiff(diff4, new BCVRef(01030035), new BCVRef(01030035),
				DifferenceType.ParagraphMissingInCurrent, para3Rev, para3Cur,
				para3Cur.Contents.Length);

			// Revert text differnce in verse 32
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual("3032Versie 3@. 33For as churnification of the milk producifies butteryness,",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Revert para split and text diffs in verse 33.
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3032Versie 3@. 33For as churning the cream produces butter,",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("and as twisting the nose produces blood. 34Verse 34.",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);

			// Revert text changed in verse 34
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual("and as twisting the nose produces blood. 34Versify thirty-four.",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);

			// Revert missing verse 35 in current
			m_bookMerger.ReplaceCurrentWithRevision(diff4);
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("35Verse 35.",
				((IScrTxtPara)sectionCur.ContentOA[2]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when there are multiple paragraphs for a verse (such as poetry).
		/// Verse 33 has three paras in the Current and two in the Revision.
		/// The first paragraphs in 33 correlate.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultiParasInVerse_TwoToThreeParas_CorrFirst()
		{
			// Build up the "current" paragraph
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 30, 32, "Verse 32. ");
			AddVerse(para1Cur, 0, 33, "For as churning the milk produces butter,");
			IScrTxtPara para2Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Cur, 0, 0, "and as twistificating the elbow produceth red stuff. ");
			IScrTxtPara para3Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para3Cur, 0, 0, "then stirring up anger produces strife in aweful ways. ");
			AddVerse(para3Cur, 0, 34, "Verse 34.");

			// Build up the "revision" paragraphs
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 32, "Versie 3@. ");
			AddVerse(para1Rev, 0, 33, "For as churning the cream produces butter,");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "and as twisting the nose produces blood. ");
			AddVerse(para2Rev, 0, 34, "Versify thirty-four.");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 35, "Verse 35.");

			m_bookMerger.DetectDifferences(null);

			//Verify the diffs
			Assert.AreEqual(5, m_bookMerger.Differences.Count);

			// Verify text changed in verse 32
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, new BCVRef(01030032), DifferenceType.TextDifference,
				para1Cur, 8, 12, para1Rev, 8, 13);

			// Verify text diff in first para of verse 33
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff2, new BCVRef(01030033), DifferenceType.TextDifference,
				para1Cur, 36, 40, para1Rev, 37, 42);

			// At start of verse 33, two paras in Rev are split into three paras in Curr
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff3, new BCVRef(01030033), new BCVRef(01030033),
				DifferenceType.ParagraphSplitInCurrent);
			Assert.AreEqual(2, diff3.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff3, 0, DifferenceType.TextDifference,
				para2Cur, 13, para2Cur.Contents.Length,
				para2Rev, 13, para2Rev.Contents.Length - 24);
			DiffTestHelper.VerifySubDiffTextCompared(diff3, 1, DifferenceType.TextDifference,
				para3Cur, 0, para3Cur.Contents.Length - 13, null, 0, 0);

			// Verify texted changed in verse 34
			Difference diff4 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff4, new BCVRef(01030034), DifferenceType.TextDifference,
				para3Cur, para3Cur.Contents.Length - 5, para3Cur.Contents.Length - 1,
				para2Rev, para2Rev.Contents.Length - 16, para2Rev.Contents.Length - 1);

			// Verify paragraph missing in current
			Difference diff5 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaAddedDiff(diff5, new BCVRef(01030035), new BCVRef(01030035),
				DifferenceType.ParagraphMissingInCurrent, para3Rev, para3Cur,
				para3Cur.Contents.Length);

			// Revert text differnce in verse 32
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual("3032Versie 3@. 33For as churning the milk produces butter,",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Revert text changed in first para of verse 33
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual("3032Versie 3@. 33For as churning the cream produces butter,",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Revert para split and text diffs in verse 33.
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3032Versie 3@. 33For as churning the cream produces butter,",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("and as twisting the nose produces blood. 34Verse 34.",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);

			// Revert text changed in verse 34
			m_bookMerger.ReplaceCurrentWithRevision(diff4);
			Assert.AreEqual("and as twisting the nose produces blood. 34Versify thirty-four.",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);

			// Revert missing verse 35 in current
			m_bookMerger.ReplaceCurrentWithRevision(diff5);
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("35Verse 35.",
				((IScrTxtPara)sectionCur.ContentOA[2]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		// these new tests will need 'adjacent changes' too
		//
		// public void ReplaceCurWithRev_MultiParasInVerse_TwoToThreeParas_CorrFirst()
		// public void ReplaceCurWithRev_MultiParasInVerse_ThreeToTwoParas_CorrLast()

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the current
		/// has one verse in four paragraphs and when the corresponding revision verse also has four
		/// paragraphs.
		/// The first two pairs and last pair of the cluster correlate. The third pair do not
		/// correlate.
		///
		/// Current:
		///		3032Versie 3@. 33I was and am in the current,
		///		For as churning the milk produces butter,
		///		and as twisting the elbow produces blood,
		///		so stirring up anger produces strife. 34Verse 34.
		///
		/// Revision:
		///		3032Verse 32. 33I was and am in the revision,
		///		For as churning the cream produces butter,
		///		an' he wa goin' far
		///		then stirring up anger produces strife. 34Versify thirty-four.
		///		34Verse 35.
		/// </summary>
		[Test]
		public void ReplaceCurWithRev_MultiParasInVerse_FourToFourParas_CoreBoth()
		{
			// Build up the "current" paragraph
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 30, 32, "Verse 32. ");
			AddVerse(para1Cur, 0, 33, "I was and am in the current,");
			IScrTxtPara para2Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Cur, 0, 0, "For as churning the milk produces butter,");
			IScrTxtPara para3Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para3Cur, 0, 0, "and as twisting the elbow produces blood,");
			IScrTxtPara para4Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para4Cur, 0, 0, "so stirring up anger produces strife in aweful ways. ");
			AddVerse(para4Cur, 0, 34, "Verse 34.");

			// Build up the "revision" paragraphs
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 32, "Versie 3@. ");
			AddVerse(para1Rev, 0, 33, "I was and am in the revision,");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "For as churning the cream produces butter,");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 0, "an' he wa goin' far");
			IScrTxtPara para4Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para4Rev, 0, 0, "then stirring up anger produces strife in aweful ways. ");
			AddVerse(para4Rev, 0, 34, "Versify thirty-four.");
			IScrTxtPara para5Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para5Rev, 0, 35, "Verse 35.");

			m_bookMerger.DetectDifferences(null);

			//Verify the diffs
			Assert.AreEqual(7, m_bookMerger.Differences.Count);

			// Verify text changed in verse 32
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, new BCVRef(01030032), DifferenceType.TextDifference,
				para1Cur, 8, 12, para1Rev, 8, 13);

			// At start of verse 33, two paras in Rev are merged to one para in Curr
			// NOTE: By design, we must not have an orphan para left over at the start of the cluster. Instead
			//  we expect the ParaMerge diff shown here.
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff2, new BCVRef(01030033), DifferenceType.TextDifference,
				para1Cur, para1Cur.Contents.Length - 8, para1Cur.Contents.Length - 1,
				para1Rev, para1Rev.Contents.Length - 9, para1Rev.Contents.Length - 1);

			// Verify texted changed from "revision" to "current"
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff3, new BCVRef(01030033), DifferenceType.TextDifference,
				para2Cur, 20, 24, para2Rev, 20, 25);

			// Verify texted changed para 3
			Difference diff4 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff4, new BCVRef(01030033), DifferenceType.TextDifference,
				para3Cur, 2, para3Cur.Contents.Length, para3Rev, 2, para3Rev.Contents.Length);

			// Verify texted changed from "then" to "so"
			Difference diff5 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff5, new BCVRef(01030033), DifferenceType.TextDifference,
				para4Cur, 0, 2, para4Rev, 0, 4);

			// Verify texted changed in verse 34
			Difference diff6 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff6, new BCVRef(01030034), DifferenceType.TextDifference,
				para4Cur, para4Cur.Contents.Length - 5, para4Cur.Contents.Length - 1,
				para4Rev, para4Rev.Contents.Length - 16, para4Rev.Contents.Length - 1);

			// Verify paragraph missing in current
			Difference diff7 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaAddedDiff(diff7, new BCVRef(01030035), new BCVRef(01030035),
				DifferenceType.ParagraphMissingInCurrent, para5Rev, para4Cur,
				para4Cur.Contents.Length);

			// Revert text differnce in verse 32
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual("3032Versie 3@. 33I was and am in the current,",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Revert the complex difference in verse two: para merged, and text changes
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(4, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3032Versie 3@. 33I was and am in the revision,",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("For as churning the milk produces butter,",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);
			Assert.AreEqual("and as twisting the elbow produces blood,",
				((IScrTxtPara)sectionCur.ContentOA[2]).Contents.Text);
			Assert.AreEqual("so stirring up anger produces strife in aweful ways. 34Verse 34.",
				((IScrTxtPara)sectionCur.ContentOA[3]).Contents.Text);

			// Revert "milk" to "cream"
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual("For as churning the cream produces butter,",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);

			// Revert text differences in the third paragraph
			m_bookMerger.ReplaceCurrentWithRevision(diff4);
			Assert.AreEqual("an' he wa goin' far",
				((IScrTxtPara)sectionCur.ContentOA[2]).Contents.Text);

			// Revert "so" to "then"
			m_bookMerger.ReplaceCurrentWithRevision(diff5);
			Assert.AreEqual("then stirring up anger produces strife in aweful ways. 34Verse 34.",
				((IScrTxtPara)sectionCur.ContentOA[3]).Contents.Text);

			// Revert text changed in verse 34
			m_bookMerger.ReplaceCurrentWithRevision(diff6);
			Assert.AreEqual("then stirring up anger produces strife in aweful ways. 34Versify thirty-four.",
				((IScrTxtPara)sectionCur.ContentOA[3]).Contents.Text);

			// Revert missing verse 35 in current
			m_bookMerger.ReplaceCurrentWithRevision(diff7);
			Assert.AreEqual(5, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("35Verse 35.",
				((IScrTxtPara)sectionCur.ContentOA[4]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the current
		/// has one verse in three paragraphs and when the corresponding revision verse has four
		/// paragraphs.
		/// The last three pairs of the cluster correlate. However, by design we must not have an
		/// orphan para left over at the start of the cluster.
		///
		/// Current:
		///		3032Versie 3@. 33For as churning the milk produces butter,
		///		and as twisting the elbow produces blood,
		///		so stirring up anger produces strife. 34Verse 34.
		///
		/// Revision:
		///		3032Verse 32. 33I was deleted in the current,
		///		For as churning the cream produces butter,
		///		and as twisting the nose produces blood,
		///		then stirring up anger produces strife. 34Versify thirty-four.
		///		34Verse 35.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultiParasInVerse_FourToThreeParas_CorrLast3()
		{
			// Build up the "current" paragraph
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 30, 32, "Verse 32. ");
			AddVerse(para1Cur, 0, 33, "For as churning the milk produces butter,");
			IScrTxtPara para2Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Cur, 0, 0, "and as twisting the elbow produces blood,");
			IScrTxtPara para3Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para3Cur, 0, 0, "so stirring up anger produces strife in aweful ways. ");
			AddVerse(para3Cur, 0, 34, "Verse 34.");

			// Build up the "revision" paragraphs
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 32, "Versie 3@. ");
			AddVerse(para1Rev, 0, 33, "I was deleted in the current,"); // extra para at start of v33 Rev; we do NOT want to process this as an orphan
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "For as churning the cream produces butter,");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 0, "and as twisting the nose produces blood,");
			IScrTxtPara para4Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para4Rev, 0, 0, "then stirring up anger produces strife in aweful ways. ");
			AddVerse(para4Rev, 0, 34, "Versify thirty-four.");
			IScrTxtPara para5Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para5Rev, 0, 35, "Verse 35.");

			m_bookMerger.DetectDifferences(null);

			//Verify the diffs
			Assert.AreEqual(6, m_bookMerger.Differences.Count);

			// Verify text changed in verse 32
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, new BCVRef(01030032), DifferenceType.TextDifference,
				para1Cur, 8, 12, para1Rev, 8, 13);

			// At start of verse 33, two paras in Rev are merged to one para in Curr
			// NOTE: By design, we must not have an orphan para left over at the start of the cluster. Instead
			//  we expect the ParaMerge diff shown here.
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff2, new BCVRef(01030033), new BCVRef(01030033),
				DifferenceType.ParagraphMergedInCurrent);
			Assert.AreEqual(2, diff2.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 0, DifferenceType.TextDifference,
				para1Cur, 16, para1Cur.Contents.Length - 17,
				para1Rev, 17, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 1, DifferenceType.TextDifference,
				null, 0, 0,
				para2Rev, 0, para2Rev.Contents.Length - 17);

			// Verify texted changed from "nose" to "elbow"
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff3, new BCVRef(01030033), DifferenceType.TextDifference,
				para2Cur, 20, 25, para3Rev, 20, 24);

			// Verify texted changed from "then" to "so"
			Difference diff4 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff4, new BCVRef(01030033), DifferenceType.TextDifference,
				para3Cur, 0, 2, para4Rev, 0, 4);

			// Verify texted changed in verse 34
			Difference diff5 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff5, new BCVRef(01030034), DifferenceType.TextDifference,
				para3Cur, para3Cur.Contents.Length - 5, para3Cur.Contents.Length - 1,
				para4Rev, para4Rev.Contents.Length - 16, para4Rev.Contents.Length - 1);

			// Verify paragraph missing in current
			Difference diff6 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaAddedDiff(diff6, new BCVRef(01030035), new BCVRef(01030035),
				DifferenceType.ParagraphMissingInCurrent, para5Rev, para3Cur,
				para3Cur.Contents.Length);

			// Revert text differnce in verse 32
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual("3032Versie 3@. 33For as churning the milk produces butter,",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Revert the complex difference in verse two: para merged, and text changes
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(4, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3032Versie 3@. 33I was deleted in the current,",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("For as churning the cream produces butter,",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);
			Assert.AreEqual("and as twisting the elbow produces blood,",
				((IScrTxtPara)sectionCur.ContentOA[2]).Contents.Text);
			Assert.AreEqual("so stirring up anger produces strife in aweful ways. 34Verse 34.",
				((IScrTxtPara)sectionCur.ContentOA[3]).Contents.Text);

			// Revert "elbow" to "nose"
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual("and as twisting the nose produces blood,",
				((IScrTxtPara)sectionCur.ContentOA[2]).Contents.Text);

			// Revert "so" to "then"
			m_bookMerger.ReplaceCurrentWithRevision(diff4);
			Assert.AreEqual("then stirring up anger produces strife in aweful ways. 34Verse 34.",
				((IScrTxtPara)sectionCur.ContentOA[3]).Contents.Text);

			// Revert text changed in verse 34
			m_bookMerger.ReplaceCurrentWithRevision(diff5);
			Assert.AreEqual("then stirring up anger produces strife in aweful ways. 34Versify thirty-four.",
				((IScrTxtPara)sectionCur.ContentOA[3]).Contents.Text);

			// Revert missing verse 35 in current
			m_bookMerger.ReplaceCurrentWithRevision(diff6);
			Assert.AreEqual(5, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("35Verse 35.",
				((IScrTxtPara)sectionCur.ContentOA[4]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the current
		/// has one verse in three paragraphs and when the corresponding revision verse has four
		/// paragraphs.
		/// The first and last pairs correlate.
		///
		/// Current:
		///		3032Versie 3@. 33For as churning the milk produces butter,
		///		and as twisting the elbow produces blood,
		///		in awefuly redundant ways,
		///		so stirring up anger produces strife. 34Verse 34.
		///
		/// Revision:
		///		3032Verse 32. 33For as churning the cream produces butter,
		///		I was not ever in the current,
		///		then stirring up anger produces strife. 34Versify thirty-four.
		///		34Verse 35.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultiParasInVerse_ThreeToFourParas_CorrBoth()
		{
			// Build up the "current" paragraph
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 30, 32, "Verse 32. ");
			AddVerse(para1Cur, 0, 33, "For as churning the milk produces butter,");
			IScrTxtPara para2Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Cur, 0, 0, "and as twisting the elbow produces blood");
			IScrTxtPara para3Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para3Cur, 0, 0, "in awefuly redundant ways,");
			IScrTxtPara para4Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para4Cur, 0, 0, "so stirring up anger produces strife in aweful ways. ");
			AddVerse(para4Cur, 0, 34, "Verse 34.");

			// Build up the "revision" paragraphs
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 32, "Versie 3@. ");
			AddVerse(para1Rev, 0, 33, "For as churning the cream produces butter,");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "I was not ever in the current,");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 0, "then stirring up anger produces strife in aweful ways. ");
			AddVerse(para3Rev, 0, 34, "Versify thirty-four.");
			IScrTxtPara para4Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para4Rev, 0, 35, "Verse 35.");

			m_bookMerger.DetectDifferences(null);

			//Verify the diffs
			Assert.AreEqual(6, m_bookMerger.Differences.Count);

			// Verify text changed in verse 32
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, new BCVRef(01030032), DifferenceType.TextDifference,
				para1Cur, 8, 12, para1Rev, 8, 13);

			// Verify text difference at the begining of verse 33
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff2, new BCVRef(01030033), DifferenceType.TextDifference,
				para1Cur, para1Cur.Contents.Length - 21, para1Cur.Contents.Length - 17,
				para1Rev, para1Rev.Contents.Length - 22, para1Rev.Contents.Length - 17);

			// Verify complex diffs
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff3, new BCVRef(01030033), new BCVRef(01030033),
				DifferenceType.ParagraphSplitInCurrent);
			Assert.AreEqual(2, diff3.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff3, 0, DifferenceType.TextDifference,
				para2Cur, 0, para2Cur.Contents.Length,
				para2Rev, 0, para2Rev.Contents.Length - 1);
			DiffTestHelper.VerifySubDiffTextCompared(diff3, 1, DifferenceType.TextDifference,
				para3Cur, 0, para3Cur.Contents.Length - 1, null, 0, 0);

			// Verify texted changed from "then" to "so"
			Difference diff4 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff4, new BCVRef(01030033), DifferenceType.TextDifference,
				para4Cur, 0, 2, para3Rev, 0, 4);

			// Verify texted changed in verse 34
			Difference diff5 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff5, new BCVRef(01030034), DifferenceType.TextDifference,
				para4Cur, para4Cur.Contents.Length - 5, para4Cur.Contents.Length - 1,
				para3Rev, para3Rev.Contents.Length - 16, para3Rev.Contents.Length - 1);

			// Verify paragraph missing in current
			Difference diff6 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaAddedDiff(diff6, new BCVRef(01030035), new BCVRef(01030035),
				DifferenceType.ParagraphMissingInCurrent, para4Rev, para4Cur,
				para4Cur.Contents.Length);

			// Revert text differnce in verse 32
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual("3032Versie 3@. 33For as churning the milk produces butter,",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Revert "milk" to "cream" in verse 33
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual("3032Versie 3@. 33For as churning the cream produces butter,",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Revert Paragraph split and text differences
			Assert.AreEqual(4, sectionCur.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("I was not ever in the current,",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);
			Assert.AreEqual("so stirring up anger produces strife in aweful ways. 34Verse 34.",
				((IScrTxtPara)sectionCur.ContentOA[2]).Contents.Text);

			// Revert "so" to "then"
			m_bookMerger.ReplaceCurrentWithRevision(diff4);
			Assert.AreEqual("then stirring up anger produces strife in aweful ways. 34Verse 34.",
				((IScrTxtPara)sectionCur.ContentOA[2]).Contents.Text);

			// Revert text changed in verse 34
			m_bookMerger.ReplaceCurrentWithRevision(diff5);
			Assert.AreEqual("then stirring up anger produces strife in aweful ways. 34Versify thirty-four.",
				((IScrTxtPara)sectionCur.ContentOA[2]).Contents.Text);

			// Revert missing verse 35 in current
			m_bookMerger.ReplaceCurrentWithRevision(diff6);
			Assert.AreEqual(4, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("35Verse 35.",
				((IScrTxtPara)sectionCur.ContentOA[3]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the current
		/// has one verse in three paragraphs and when the corresponding revision verse has too
		/// paragraphs.
		/// The first and last pairs correlate
		///
		/// Current:
		///		3032Versie 3@. 33For as churning the milk produces butter,
		///		and as twisting the elbow produces blood,
		///		so stirring up anger produces strife. 34Verse 34.
		///
		/// Revision:
		///		3032Verse 32. 33I was deleted in the current,
		///		For as churning the cream produces butter,
		///		and as twisting the nose produces blood,
		///		then stirring up anger produces strife. 34Versify thirty-four.
		///		34Verse 35.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultiParasInVerse_ThreeToTwoParas_CorrBoth()
		{
			// Build up the "current" paragraph
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 30, 33, "For as churning the milk produces butter,");
			IScrTxtPara para2Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Cur, 0, 0, "so stirring up anger produces strife in aweful ways.");

			// Build up the "revision" paragraphs
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 33, "For as churning the cream produces butter,");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "and as twisting the elbow produces blood");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 0, "then stirring up anger produces strife in aweful ways.");

			m_bookMerger.DetectDifferences(null);

			//Verify the diffs
			Assert.AreEqual(3, m_bookMerger.Differences.Count);

			// Verify text difference at the begining of verse 33
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, new BCVRef(01030033), DifferenceType.TextDifference,
				para1Cur, para1Cur.Contents.Length - 21, para1Cur.Contents.Length - 17,
				para1Rev, para1Rev.Contents.Length - 22, para1Rev.Contents.Length - 17);

			// Verify paragraph missing in current
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff2, new BCVRef(01030033),
				DifferenceType.ParagraphStructureChange);
			Assert.AreEqual(2, diff2.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffParaReferencePoints(diff2, para1Cur, para1Cur.Contents.Length,
				para1Rev, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffParaAdded(diff2, 1, DifferenceType.ParagraphMissingInCurrent,
				para2Rev, para2Rev.Contents.Length);

			// Verify texted changed from "then" to "so"
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff3, new BCVRef(01030033), DifferenceType.TextDifference,
				para2Cur, 0, 2, para3Rev, 0, 4);

			// Revert "milk" to "cream" in verse 33
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual("3033For as churning the cream produces butter,",
				sectionCur.ContentOA[0].Contents.Text);

			// Revert Paragraph split and text differences
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("and as twisting the elbow produces blood",
				sectionCur.ContentOA[1].Contents.Text);
			Assert.AreEqual("so stirring up anger produces strife in aweful ways.",
				sectionCur.ContentOA[2].Contents.Text);

			// Revert "so" to "then"
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual("then stirring up anger produces strife in aweful ways.",
				sectionCur.ContentOA[2].Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the current
		/// has one verse in two paragraphs and when the corresponding revision verse has three
		/// paragraphs.
		/// The first two pairs of the cluster correlate. There is an orphan left over in the
		/// Revision.
		///
		/// Current:
		///		3032Versie 3@. 33For as churning the milk produces butter,
		///		and as twisting the elbow produces blood. 34Verse 34.
		///
		/// Revision:
		///		3032Verse 32. 33I was deleted in the current,
		///		For as churning the cream produces butter,
		///		and as twisting the nose produces blood,
		///		then stirring up anger produces strife. 34Versify thirty-four.
		///		34Verse 35.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultiParasInVerse_ThreeToTwoParas_CorrFirst2()
		{
			// Build up the "current" paragraph
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 30, 32, "Verse 32. ");
			AddVerse(para1Cur, 0, 33, "For as churning the milk produces butter,");
			IScrTxtPara para2Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Cur, 0, 0, "and as twisting the elbow produces blood. ");
			AddVerse(para2Cur, 0, 34, "Verse 34.");

			// Build up the "revision" paragraphs
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 32, "Versie 3@. ");
			AddVerse(para1Rev, 0, 33, "For as churning the cream produces butter,");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "and as twisting the nose produces blood,");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 0, "then stirring up anger produces strife in aweful ways. ");
			AddVerse(para3Rev, 0, 34, "Versify thirty-four.");
			IScrTxtPara para4Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para4Rev, 0, 35, "Verse 35.");

			m_bookMerger.DetectDifferences(null);

			//Verify the diffs
			Assert.AreEqual(6, m_bookMerger.Differences.Count);

			// Verify text changed in verse 32
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, new BCVRef(01030032), DifferenceType.TextDifference,
				para1Cur, 8, 12, para1Rev, 8, 13);

			// Verify text diff in first part of verse 33
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff2, new BCVRef(01030033), DifferenceType.TextDifference,
				para1Cur, 36, 40, para1Rev, 37, 42);

			// Verify text diff in second para of verse 33
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff3, new BCVRef(01030033), DifferenceType.TextDifference,
				para2Cur, 20, 42, para2Rev, 20, 40);

			// At start of verse 33, two paras in Rev are merged to one para in Curr
			Difference diff4 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff4, new BCVRef(01030033), new BCVRef(01030033),
				DifferenceType.ParagraphMergedInCurrent);
			Assert.AreEqual(2, diff4.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffParaReferencePoints(diff4, para2Cur, 42,
				para2Rev, para2Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff4, 1, DifferenceType.TextDifference,
				null, 0, 0,	para3Rev, 0, 55);

			// Verify texted changed in verse 34
			Difference diff5 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff5, new BCVRef(01030034), DifferenceType.TextDifference,
				para2Cur, para2Cur.Contents.Length - 5, para2Cur.Contents.Length - 1,
				para3Rev, para3Rev.Contents.Length - 16, para3Rev.Contents.Length - 1);

			// Verify paragraph missing in current
			Difference diff6 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaAddedDiff(diff6, new BCVRef(01030035), new BCVRef(01030035),
				DifferenceType.ParagraphMissingInCurrent, para4Rev, para2Cur,
				para2Cur.Contents.Length);

			// Revert text differnce in verse 32
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual("3032Versie 3@. 33For as churning the milk produces butter,",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Revert the text changed in first paragraph of verse 33
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual("3032Versie 3@. 33For as churning the cream produces butter,",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			// Revert "elbow" to "nose"
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual("and as twisting the nose produces blood,34Verse 34.",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);

			// Revert para merged in verse 33.
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff4);
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("then stirring up anger produces strife in aweful ways. 34Verse 34.",
				((IScrTxtPara)sectionCur.ContentOA[2]).Contents.Text);

			// Revert text changed in verse 34
			m_bookMerger.ReplaceCurrentWithRevision(diff5);
			Assert.AreEqual("then stirring up anger produces strife in aweful ways. 34Versify thirty-four.",
				((IScrTxtPara)sectionCur.ContentOA[2]).Contents.Text);

			// Revert missing verse 35 in current
			m_bookMerger.ReplaceCurrentWithRevision(diff6);
			Assert.AreEqual(4, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("35Verse 35.",
				((IScrTxtPara)sectionCur.ContentOA[3]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

			#endregion

			#region Multi-Paragraph Verse Bridges -Detect
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences
		/// method when a bridge of verses in Current is split between three paragraphs in the
		/// Revision.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_MultiParas_VerseBridge_3InRevToBridgeInCurr()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCurr = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// init text of the verses
			// note: verse 2 will win the correlation contest, and be correlated to the verse 1-3 bridge
			string verse1 = "In the big inning";
			string verse2 = "And the earth was formless and void with little or no definition (HDTV was not yet invented)... ";
			string verse3 = "And God said, 'Let there be light...'";

			// Current para 1: bridge verse 2-3
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 0, "1-3", verse1 + verse2);
			int ichLimCurr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 0, verse3);

			// Revision para 1: verse 1
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 0, 1, verse1);
			// Revision para 2: verse 2
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 2, verse2);
			// Revision para 3: verse 3
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 3, verse3);

			// Detect differences
			m_bookMerger.DetectDifferences(null);

			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01001001), new BCVRef(01001003),
				DifferenceType.ParagraphMergedInCurrent);
			Assert.AreEqual(3, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.TextDifference,
				para1Curr, 1, ichLimCurr, para1Rev, 1, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.TextDifference,
				null, 0, 0, para2Rev, 0, para2Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 2, DifferenceType.TextDifference,
				null, 0, 0, para3Rev, 0, 1);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences
		/// method when a bridge of verses in Current overlaps three paragraphs in the
		/// Revision.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_MultiParas_VerseBridge_BridgeInRevTo3InCurr()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCurr = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// init text of the verses
			// note: verse 2 will win the correlation contest, and be correlated to the verse 1-3 bridge
			string verse1 = "In the big inning";
			string verse2 = "And the earth was formless and void with little or no definition (HDTV was not yet invented)... ";
			string verse3 = "And God said, 'Let there be light...'";

			// Revision para 1: bridge verse 1-3
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 0, "1-3", verse1 + verse2);
			int ichLimRev = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 0, verse3);

			// Current para 1: verse 1
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 0, 1, verse1);
			// Current para 2: verse 2
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 2, verse2);
			// Current para 3: verse 3
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(para3Curr, 0, 3, verse3);

			// Detect differences
			m_bookMerger.DetectDifferences(null);

			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// Verify root diff
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01001001), new BCVRef(01001003),
				DifferenceType.ParagraphSplitInCurrent);
			Assert.AreEqual(3, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.TextDifference,
				para1Curr, 1, para1Curr.Contents.Length, para1Rev, 1, ichLimRev);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.TextDifference,
				para2Curr, 0, para2Curr.Contents.Length, null, 0, 0);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 2, DifferenceType.TextDifference,
				para3Curr, 0, 1, null, 0, 0);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when bridge paragraphs
		/// overlap with multi-verse paragraphs
		///
		/// revision    current
		///  1-3         1 2
		///              3
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_MultiParas_VerseBridge_BridgeInRevTo2InCurr()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCurr = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// verse text
			string verse1 = "In the big inning. ";
			string verse2 = "And the earth was formless and void with little or no definition (HDTV was not yet invented)...";
			string verse3 = "Let there be light!";

			// Build the revision
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 0, "1-3", verse1 + verse2);
			int ichSplitCurr = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 0, verse3);

			// make sure the rev was built correctly
			Assert.AreEqual(1, sectionRev.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual(01001001, sectionRev.VerseRefStart);
			Assert.AreEqual(01001003, sectionRev.VerseRefEnd);

			// Build the current
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 0, 1, verse1);
			AddVerse(para1Curr, 0, 2, verse2);
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 3, verse3);

			// make sure the curr was built correctly
			Assert.AreEqual(2, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual(01001001, sectionCurr.VerseRefStart);
			Assert.AreEqual(01001003, sectionCurr.VerseRefEnd);

			// Detect differences
			m_bookMerger.DetectDifferences(null);

			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// verify complex diff
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01001001), new BCVRef(01001003),
				DifferenceType.ParagraphSplitInCurrent);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.TextDifference,
				para1Curr, 1, para1Curr.Contents.Length, para1Rev, 1, ichSplitCurr);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.TextDifference,
				para2Curr, 0, 1, null, 0, 0);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when bridge paragraphs
		/// overlap with multi-verse paragraphs
		///
		/// revision    current
		///  1 2         1-3
		///  3
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_MultiParas_VerseBridge_2InRevToBridgeInCurr()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCurr = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// verse text
			string verse1 = "In the big inning. ";
			string verse2 = "And the earth was formless and void with little or no definition (HDTV was not yet invented)...";
			string verse3 = "Let there be light!";

			// Build the current
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 0, "1-3", verse1 + verse2);
			int iParaCurr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 0, verse3);

			// make sure the curr was built correctly
			Assert.AreEqual(1, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual(01001001, sectionCurr.VerseRefStart);
			Assert.AreEqual(01001003, sectionCurr.VerseRefEnd);

			// Build the revision
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 0, 1, verse1);
			AddVerse(para1Rev, 0, 2, verse2);
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 3, verse3);

			// make sure the revision was built correctly
			Assert.AreEqual(2, sectionRev.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual(01001001, sectionRev.VerseRefStart);
			Assert.AreEqual(01001003, sectionRev.VerseRefEnd);

			// Detect differences
			m_bookMerger.DetectDifferences(null);

			// Verify Diff
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01001001), new BCVRef(01001003),
				DifferenceType.ParagraphMergedInCurrent);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.TextDifference,
				para1Curr, 1, iParaCurr, para1Rev, 1, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.TextDifference,
				null, 0, 0, para2Rev, 0, 1);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
			#endregion
			#region Multi-Paragraph Verse Bridges -Revert
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences
		/// and <see cref="BookMerger.ReplaceCurrentWithRevision"/> methods when paragraphs
		/// overlap in a pathological manner!
		///
		/// revision    current
		///  1
		///  2           1-3
		///              4
		///  3-5         5-6
		///  6-8         7-8
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultiParasInVerse_PathologicalBridgeOverlaps()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCurr = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// verse text
			string verse1 = "In the big inning";
			string verse2 = "And the earth was formless and void with little or no definition (HDTV was not yet invented)...";
			string verse3 = "Let there be light ";
			string verse4 = "verse four;";
			string verse5 = "God added a brightness knob to the TV so He could turn it up in the day and down at night.";
			string verse6 = "verse six!";
			string verse7 = "verse seven?";
			string verse8 = "After the invention of HDTV, God saw that it was good, and decided that it was time to rest so he watched the Super Bowl :)";

			// Build the revision
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 0, 1, verse1);
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 2, verse2);
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, "3-5", verse3 + verse4 + verse5);
			IScrTxtPara para4Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para4Rev, 0, "6-8", verse6 + verse7 + verse8);
			// make sure the rev was built correctly
			Assert.AreEqual(4, sectionRev.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual(01001001, sectionRev.VerseRefStart);
			Assert.AreEqual(01001008, sectionRev.VerseRefEnd);

			// Build the current
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 0, "1-3", verse1 + verse2 + verse3);
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 4, verse4);
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(para3Curr, 0, "5-6", verse5 + verse6);
			IScrTxtPara para4Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(para4Curr, 0, "7-8", verse7 + verse8);
			// make sure the curr was built correctly
			Assert.AreEqual(4, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual(01001001, sectionCurr.VerseRefStart);
			Assert.AreEqual(01001008, sectionCurr.VerseRefEnd);

			// Detect differences
			m_bookMerger.DetectDifferences(null);

			// Verify Diffs
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// Verify diff 1
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, 01001001, 01001008, DifferenceType.ParagraphStructureChange);
			Assert.AreEqual(4, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.TextDifference,
				para1Curr, 1, para1Curr.Contents.Length,
				para1Rev, 1, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.TextDifference,
				para2Curr, 0, para2Curr.Contents.Length,
				para2Rev, 0, para2Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 2, DifferenceType.TextDifference,
				para3Curr, 0, para3Curr.Contents.Length,
				para3Rev, 0, para3Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 3, DifferenceType.TextDifference,
				para4Curr, 0, para4Curr.Contents.Length - verse7.Length - verse8.Length,
				para4Rev, 0, para4Rev.Contents.Length - verse7.Length - verse8.Length);

			// Revert diffs
			m_bookMerger.ReplaceCurrentWithRevision(diff);

			// Check that differences were reverted
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}
			#endregion

			#region Multi-para Verses: Split/Merge by Section Break
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when the current has one verse in three paragraphs and
		/// and when the corresponding revision verse has only one paragraph.
		/// There is a text change in the first and last parts of the verse.
		/// NOTE: Need to handle the clusters that span over section boundaries as a unit
		/// rather than attempting to break the clusters apart.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_MultiParasInVerse_SplitBySectionBreak()
		{
			// Build up the "current" paragraphs
			IScrSection sectionCur1 = CreateSection(m_genesis, "My Beautiful Verses");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur1, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 30, 33, "For as churning the cream produces butter,");

			IScrSection sectionCur2 = CreateSection(m_genesis, "My Beautiful Verses Part 2");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur2, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 0, "and as twisting the nose produces blood,");
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(sectionCur2, ScrStyleNames.NormalParagraph);
			AddVerse(para3Curr, 0, 0, "then stirring up anger produces strife.");

			// Build up the "revision" paragraph
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 33, "For as churning the milk produces butter, and as twisting "
				+ "the nose produces blood, so");
			int ichRev = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 0, " stirring up anger produces strife.");

			m_bookMerger.DetectDifferences(null);

			Assert.AreEqual(3, m_bookMerger.Differences.Count);
			// We expect a text change diff for the first portions of verse 33
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, 01030033, DifferenceType.TextDifference,
				para1Curr, 24, para1Curr.Contents.Length,
				para1Rev, 24, para1Rev.Contents.Length);

			// new section head added
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifySectionDiff(diff2, 01030033, 01030033, DifferenceType.SectionHeadAddedToCurrent,
				sectionCur2, (IScrTxtPara)sectionRev.ContentOA[0], para1Rev.Contents.Length);

			// more v33 paragraphs added in Curr in new section
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff3, 01030033, DifferenceType.ParagraphStructureChange);
			Assert.AreEqual(3, diff3.SubDiffsForParas.Count);
			// the ref point on Curr side should be para2Curr ich zero
			DiffTestHelper.VerifySubDiffParaReferencePoints(diff3, para2Curr, 0,
				para1Rev, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffParaAdded(diff3, 1, DifferenceType.ParagraphAddedToCurrent, para2Curr, para2Curr.Contents.Length);
			DiffTestHelper.VerifySubDiffParaAdded(diff3, 2, DifferenceType.ParagraphAddedToCurrent, para3Curr, para3Curr.Contents.Length);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the current
		/// has one verse in three paras and two sections. One verse segment is in the first
		/// section and two verse segments are in the second section.
		/// The revision is in one section and one paragraph.
		///
		/// Current (two sections, three paras):
		///		My Beautiful Verses
		///		3033For as churning the cream produces butter,
		///		My Beautiful Verses Part 2
		///		and as twisting the nose produces blood,
		///		then stirring up anger produces strife.
		///
		/// Revision (one section, one para):
		///		My Beautiful Verses
		///		3033For as churning the milk produces butter, and as twisting the nose produces
		///		blood, so stirring up anger produces strife.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultiParasInVerse_SplitBySectionBreak()
		{
			// Build up the "current" paragraphs
			IScrSection sectionCur1 = CreateSection(m_genesis, "My Beautiful Verses");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur1, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 30, 33, "For as churning the cream produces butter,");

			IScrSection sectionCur2 = CreateSection(m_genesis, "My Beautiful Verses Part 2");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur2, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 0, "and as twisting the nose produces blood,");
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(sectionCur2, ScrStyleNames.NormalParagraph);
			AddVerse(para3Curr, 0, 0, "then stirring up anger produces strife.");

			// Build up the "revision" paragraph
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 33, "For as churning the milk produces butter, and as twisting "
				+ "the nose produces blood, so");
			AddVerse(para1Rev, 0, 0, " stirring up anger produces strife.");

			m_bookMerger.DetectDifferences(null);

			Assert.AreEqual(3, m_bookMerger.Differences.Count);
			// We expect a text change diff for the first portions of verse 33
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, 01030033, DifferenceType.TextDifference,
				para1Curr, 24, para1Curr.Contents.Length,
				para1Rev, 24, para1Rev.Contents.Length);

			// new section head added
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifySectionDiff(diff2, 01030033, 01030033, DifferenceType.SectionHeadAddedToCurrent,
				sectionCur2, (IScrTxtPara)sectionRev.ContentOA[0], para1Rev.Contents.Length);

			// more v33 paragraphs added in Curr in new section
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff3, 01030033, DifferenceType.ParagraphStructureChange);

			// Revert the changed text in the first portions of verse 33.
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual("3033For as churning the milk produces butter, and as twisting " +
				"the nose produces blood, so stirring up anger produces strife.",
				((IScrTxtPara)sectionCur1.ContentOA[0]).Contents.Text);

			// Revert the added section head.
			Assert.AreEqual(2, m_genesis.SectionsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(1, m_genesis.SectionsOS.Count);
			Assert.AreEqual(3, m_genesis.SectionsOS[0].ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("and as twisting the nose produces blood,",
				((IScrTxtPara)sectionCur1.ContentOA[1]).Contents.Text);
			Assert.AreEqual("then stirring up anger produces strife.",
				((IScrTxtPara)sectionCur1.ContentOA[2]).Contents.Text);

			// Revert the added paragraphs.
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual(1, sectionCur1.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3033For as churning the milk produces butter, and as twisting " +
				"the nose produces blood, so stirring up anger produces strife.",
				((IScrTxtPara)sectionCur1.ContentOA[0]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the revision
		/// has one verse in three paras and two sections. One verse segment is in the first
		/// section and two verse segments are in the second section.
		/// The Current is in one section and one paragraph.
		///
		/// Current (one section, one para):
		///		My Beautiful Verses
		///		3033For as churning the milk produces butter, and as twisting the nose produces
		///		blood, so stirring up anger produces strife.
		///
		/// Revision (two sections, three paras):
		///		My Beautiful Verses
		///		3033For as churning the cream produces butter,
		///		My Beautiful Verses Part 2
		///		and as twisting the nose produces blood,
		///		then stirring up anger produces strife.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		[Ignore("TE-XXXX doesn't revert section missing right")]
		public void ReplaceCurWithRev_MultiParasInVerse_MergeBySectionHeadRemoved()
		{
			// Build up the "current" paragraph
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 30, 33, "For as churning the milk produces butter, and as twisting "
				+ "the nose produces blood, so");
			AddVerse(para1Curr, 0, 0, " stirring up anger produces strife.");

			// Build up the "revision" paragraphs
			IScrSection sectionRev1 = CreateSection(m_genesisRevision, "My Beautiful Verses");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev1, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 33, "For as churning the cream produces butter,");

			IScrSection sectionRev2 = CreateSection(m_genesisRevision, "My Beautiful Verses Part 2");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev2, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "and as twisting the nose produces blood,");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev2, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 0, "then stirring up anger produces strife.");


			m_bookMerger.DetectDifferences(null);

			// We expect four differences.
			Assert.AreEqual(3, m_bookMerger.Differences.Count);

			// THIS IS NOT THE CORRECT ORDER OF FIRST TWO DIFFS
			// Section head was removed within verse 33
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff1, 01030033, 01030033, DifferenceType.SectionHeadMissingInCurrent,
				sectionRev2, (IScrTxtPara)sectionCur.ContentOA[0], 0);

			// We expect a text change diff for the first portions of verse 33
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff2, 01030033, DifferenceType.TextDifference,
				para1Curr, 24, para1Curr.Contents.Length,
				para1Rev, 24, para1Rev.Contents.Length);

			// more v33 paragraphs missing in Curr from second section in Rev
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff3, 01030033, DifferenceType.ParagraphStructureChange);
			Assert.AreEqual(3, diff3.SubDiffsForParas.Count);
			// the ref point on Rev side should be para2Curr ich zero
			DiffTestHelper.VerifySubDiffParaReferencePoints(diff3, para1Curr, para1Curr.Contents.Length,
				para2Rev, 0);
			DiffTestHelper.VerifySubDiffParaAdded(diff3, 1, DifferenceType.ParagraphMissingInCurrent, para2Rev, para2Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffParaAdded(diff3, 2, DifferenceType.ParagraphMissingInCurrent, para3Rev, para3Rev.Contents.Length);

			// Revert the added section head, though this should be the second diff and reverted second in this test.
			Assert.AreEqual(1, m_genesis.SectionsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(2, m_genesis.SectionsOS.Count);

			// Revert the changed text in the first portions of verse 33.
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			// THIS VERSE SEGMENT IS IN THE WRONG SECTION
			Assert.AreEqual("3033For as churning the cream produces butter,",
				((IScrTxtPara)m_genesis.SectionsOS[1].ContentOA[0]).Contents.Text);

			// Revert the missing paragraphs.
			Assert.AreEqual(1, m_genesis.SectionsOS[1].ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			// THIS VERSE SEGMENT IS IN THE WRONG SECTION
			Assert.AreEqual("3033For as churning the cream produces butter,",
				((IScrTxtPara)m_genesis.SectionsOS[1].ContentOA[0]).Contents.Text);
			Assert.AreEqual("and as twisting the nose produces blood,",
				((IScrTxtPara)m_genesis.SectionsOS[1].ContentOA[1]).Contents.Text);
			Assert.AreEqual("then stirring up anger produces strife.",
				((IScrTxtPara)m_genesis.SectionsOS[1].ContentOA[2]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}
			#endregion

			#region Multi-para Verses: Missing
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Replaces the Current with the Revision when a a multi paragraph verse in whole paragraphs
		/// is missing at the beginning of a section.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultiParaVerse_ParasMissing_StartOfSection()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraph

			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 0, 34, "the nose produces blood,");
			IScrTxtPara para2Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Cur, 0, 35, "so stirring up anger produces strife.");

			// Build up the "revision" paragraphs
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 0, 33, "For as churning the milk produces butter,");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "and as twisting");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 34, "the nose produces blood,");
			IScrTxtPara para4Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para4Rev, 0, 35, "so stirring up anger produces strife.");

			m_bookMerger.DetectDifferences(null);


			// We expect 1 diff
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff1, 01001033, DifferenceType.ParagraphStructureChange);
			Assert.AreEqual(3, diff1.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffParaReferencePoints(diff1, para1Cur, 0, para1Rev, 0);
			DiffTestHelper.VerifySubDiffParaAdded(diff1, 1, DifferenceType.ParagraphMissingInCurrent, para1Rev, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffParaAdded(diff1, 2, DifferenceType.ParagraphMissingInCurrent, para2Rev, para2Rev.Contents.Length);

			//Revert Paras Missing in verse 33
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(4, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("33For as churning the milk produces butter,",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("and as twisting",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);
			Assert.AreEqual("34the nose produces blood,",
				((IScrTxtPara)sectionCur.ContentOA[2]).Contents.Text);
			Assert.AreEqual("35so stirring up anger produces strife.",
				((IScrTxtPara)sectionCur.ContentOA[3]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Replaces the Current with the Revision when a a multi paragraph verse in whole paragraphs
		/// is missing in the middle of a section.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultiParaVerse_ParasMissing_MidSection()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraph
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 30, 33, "For as churning the milk produces butter,");
			IScrTxtPara para2Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Cur, 0, 35, "so stirring up anger produces strife.");

			// Build up the "revision" paragraphs
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 33, "For as churning the milk produces butter,");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 34, "and as twisting");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 0, "the nose produces blood,");
			IScrTxtPara para4Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para4Rev, 0, 35, "so stirring up anger produces strife.");

			m_bookMerger.DetectDifferences(null);

			// We expect 1 diff
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff1, 01030034, DifferenceType.ParagraphStructureChange);
			Assert.AreEqual(3, diff1.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffParaReferencePoints(diff1, para1Cur, para1Cur.Contents.Length,
				para1Rev, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffParaAdded(diff1, 1, DifferenceType.ParagraphMissingInCurrent, para2Rev, para2Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffParaAdded(diff1, 2, DifferenceType.ParagraphMissingInCurrent, para3Rev, para3Rev.Contents.Length);

			//Revert Paras Missing of verse 34
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(4, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3033For as churning the milk produces butter,",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("34and as twisting",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);
			Assert.AreEqual("the nose produces blood,",
				((IScrTxtPara)sectionCur.ContentOA[2]).Contents.Text);
			Assert.AreEqual("35so stirring up anger produces strife.",
				((IScrTxtPara)sectionCur.ContentOA[3]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Replaces the Current with the Revision when a a multi paragraph verse touching
		/// existing paragraphs missing in the middle of a section.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		[Ignore("TE-7108 fails to detect a paraSplit difference")]
		public void ReplaceCurWithRev_MultiParaVerse_SegmentsMissing_MidSection()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraph
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 30, 33, "For as churning the milk produces butter, ");
			IScrTxtPara para2Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Cur, 0, 35, "so stirring up anger produces strife.");

			// Build up the "revision" paragraphs
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 33, "For as churning the milk produces butter, ");
			AddVerse(para1Rev, 0, 34, "and as twisting");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "the nose ");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 0, "produces blood, ");
			AddVerse(para3Rev, 0, 35, "so stirring up anger produces strife.");

			m_bookMerger.DetectDifferences(null);

			// We expect 1 diff for the missing verse 34
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff1, new BCVRef(01030034), DifferenceType.ParagraphStructureChange);
			Assert.AreEqual(3, diff1.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff1, 0, DifferenceType.TextDifference,
				para1Cur, para1Cur.Contents.Length, para1Cur.Contents.Length,
				para1Rev, para1Rev.Contents.Length - 17, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffParaAdded(diff1, 1, DifferenceType.ParagraphMissingInCurrent,
				para2Rev, para2Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffParaAdded(diff1, 2, DifferenceType.ParagraphMissingInCurrent,
				para3Rev, 16);

			// Revert verse 34 missing
			m_bookMerger.ReplaceCurrentWithRevision(diff1);

			Assert.AreEqual(4, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3033For as churning the milk produces butter, 34and as twisting",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("the nose ",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);
			Assert.AreEqual("produces blood, ",
				((IScrTxtPara)sectionCur.ContentOA[2]).Contents.Text);
			Assert.AreEqual("35so stirring up anger produces strife.",
				((IScrTxtPara)sectionCur.ContentOA[3]).Contents.Text);

			// Revert para split at start of verse 35
			// TE-7108 this is the correct result - probably with an additional parasplit diff reverted
			//Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			//Assert.AreEqual("3033For as churning the milk produces butter, 34and as twisting",
			//    ((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			//Assert.AreEqual("the nose ",
			//    ((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);
			//Assert.AreEqual("produces blood, 35so stirring up anger produces strife.",
			//    ((IScrTxtPara)sectionCur.ContentOA[2]).Contents.Text);

			//// Recheck that Current is now identical to Revision
			//m_bookMerger.DetectDifferences_ReCheck();
			//Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Replaces the Current with the Revision when a a multi paragraph verse touching
		/// existing paragraphs missing in the middle of a paragraph.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultiParaVerse_SegmentsMissing_MidPara()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraph
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 30, 33, "For as churning the milk produces butter, ");
			int ichV35Cur = para1Cur.Contents.Length;
			AddVerse(para1Cur, 0, 35, "so stirring up anger produces strife.");

			// Build up the "revision" paragraphs
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 33, "For as churning the milk produces butter, ");
			AddVerse(para1Rev, 0, 34, "and as twisting");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "the nose ");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 0, "produces blood, ");
			AddVerse(para3Rev, 0, 35, "so stirring up anger produces strife.");

			m_bookMerger.DetectDifferences(null);

			// We expect 1 diff for the missing verse 34
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff1, new BCVRef(01030034), DifferenceType.ParagraphStructureChange);
			Assert.AreEqual(3, diff1.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff1, 0, DifferenceType.TextDifference,
				para1Cur, ichV35Cur, ichV35Cur,
				para1Rev, para1Rev.Contents.Length - 17, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffParaAdded(diff1, 1, DifferenceType.ParagraphMissingInCurrent,
				para2Rev, para2Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff1, 2, DifferenceType.TextDifference, null, 0, 0,
				para3Rev, 0, 16);

			// Revert verse 34 missing
			m_bookMerger.ReplaceCurrentWithRevision(diff1);

			// this is the correct result
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3033For as churning the milk produces butter, 34and as twisting",
				sectionCur.ContentOA[0].Contents.Text);
			Assert.AreEqual("the nose ",
				sectionCur.ContentOA[1].Contents.Text);
			Assert.AreEqual("produces blood, 35so stirring up anger produces strife.",
				sectionCur.ContentOA[2].Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Replaces the Current with the Revision when a a multi paragraph verse in whole paragraphs
		/// is missing at the end of a section.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultiParaVerse_ParasMissing_EndOfSection()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraph
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 30, 33, "For as churning the milk produces butter,");
			IScrTxtPara para2Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Cur, 0, 34, "and as twisting");

			// Build up the "revision" paragraphs
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 33, "For as churning the milk produces butter,");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 34, "and as twisting");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 35, "the nose produces blood,");
			IScrTxtPara para4Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para4Rev, 0, 0, "so stirring up anger produces strife.");

			m_bookMerger.DetectDifferences(null);

			// We expect 1 diff
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// Verify verse 35 missing in current
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff1, new BCVRef(01030035), DifferenceType.ParagraphStructureChange);
			Assert.AreEqual(3, diff1.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffParaReferencePoints(diff1, para2Cur, para2Cur.Contents.Length,
				para2Rev, para2Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffParaAdded(diff1, 1, DifferenceType.ParagraphMissingInCurrent,
				para3Rev, para3Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffParaAdded(diff1, 2, DifferenceType.ParagraphMissingInCurrent,
				para4Rev, para4Rev.Contents.Length);

			// Revert paras of verse 35
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(4, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3033For as churning the milk produces butter,",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("34and as twisting",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);
			Assert.AreEqual("35the nose produces blood,",
				((IScrTxtPara)sectionCur.ContentOA[2]).Contents.Text);
			Assert.AreEqual("so stirring up anger produces strife.",
				((IScrTxtPara)sectionCur.ContentOA[3]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}
			#endregion

			#region Multi-para Verses: Added
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Replaces the Current with the Revision when a a multi paragraph verse is added
		/// in new paragraphs at the begining of a section.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultiParaVerse_ParasAdded_StartOfSection()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraph
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 0, 33, "For as churning the milk produces butter,");
			IScrTxtPara para2Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Cur, 0, 0, "and as twisting");
			IScrTxtPara para3Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para3Cur, 0, 34, "the nose produces blood,");
			IScrTxtPara para4Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para4Cur, 0, 35, "so stirring up anger produces strife.");

			// Build up the "revision" paragraphs
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 0, 34, "the nose produces blood,");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 35, "so stirring up anger produces strife.");

			m_bookMerger.DetectDifferences(null);

			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// verse 33 added in current
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff1, new BCVRef(01001033), DifferenceType.ParagraphStructureChange);
			Assert.AreEqual(3, diff1.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffParaReferencePoints(diff1, para1Cur, 0, para1Rev, 0);
			DiffTestHelper.VerifySubDiffParaAdded(diff1, 1, DifferenceType.ParagraphAddedToCurrent, para1Cur, para1Cur.Contents.Length);
			DiffTestHelper.VerifySubDiffParaAdded(diff1, 2, DifferenceType.ParagraphAddedToCurrent, para2Cur, para2Cur.Contents.Length);

			// Revert verse 33 added in current
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("34the nose produces blood,",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("35so stirring up anger produces strife.",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Replaces the Current with the Revision when a a multi paragraph verse is added
		/// in new paragraphs in the middle of a section.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultiParaVerse_ParasAdded_MidSection()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraph
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 30, 33, "For as churning the milk produces butter,");
			IScrTxtPara para2Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Cur, 0, 34, "and as twisting" );
			IScrTxtPara para3Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para3Cur, 0, 0, "the nose produces blood,");
			IScrTxtPara para4Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para4Cur, 0, 35, "so stirring up anger produces strife.");

			// Build up the "revision" paragraphs
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 33, "For as churning the milk produces butter,");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 35, "so stirring up anger produces strife.");

			m_bookMerger.DetectDifferences(null);

			// We expect 1 diff
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// verse 34 added in Current
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff1, new BCVRef(01030034), DifferenceType.ParagraphStructureChange);
			Assert.AreEqual(3, diff1.SubDiffsForParas.Count);
				DiffTestHelper.VerifySubDiffParaReferencePoints(diff1, para1Cur, para1Cur.Contents.Length,
				para1Rev, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffParaAdded(diff1, 1, DifferenceType.ParagraphAddedToCurrent, para2Cur, para2Cur.Contents.Length);
			DiffTestHelper.VerifySubDiffParaAdded(diff1, 2, DifferenceType.ParagraphAddedToCurrent, para3Cur, para3Cur.Contents.Length);

			// Revert verse 34
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3033For as churning the milk produces butter,",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("35so stirring up anger produces strife.",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Replaces the Current with the Revision when a a multi paragraph verse is added
		/// to existing paragraphs in the middle of a section.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		[Ignore("TE-7108 fails to detect para merge")]
		public void ReplaceCurWithRev_MultiParaVerse_SegmentsAdded_MidSection()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraph
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 30, 33, "For as churning the milk produces butter, ");
			AddVerse(para1Cur, 0, 34, "and as");
			IScrTxtPara para2Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Cur, 0, 0, "twisting the nose");
			IScrTxtPara para3Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para3Cur, 0, 0, "produces blood,");
			AddVerse(para3Cur, 0, 35, "so stirring up anger produces strife.");

			// Build up the "revision" paragraphs
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 33, "For as churning the milk produces butter, ");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 35, "so stirring up anger produces strife.");

			m_bookMerger.DetectDifferences(null);

			// We expect 2 differences
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			// Multi-para Verse 34 was added to Current
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff1, new BCVRef(01030034), DifferenceType.ParagraphStructureChange);
			Assert.AreEqual(3, diff1.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff1, 0, DifferenceType.TextDifference,
				para1Cur, para1Cur.Contents.Length - 8, para1Cur.Contents.Length,
				para1Rev, para1Rev.Contents.Length, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffParaAdded(diff1, 1, DifferenceType.ParagraphAddedToCurrent,
				para2Cur, para2Cur.Contents.Length);
			DiffTestHelper.VerifySubDiffParaAdded(diff1, 2, DifferenceType.ParagraphAddedToCurrent,
				para3Cur, 15);

			// TE-7108 should have this...
			//// Paragraph merged in Current before verse 35
			//Difference diff2 = m_bookMerger.Differences.MoveNext();
			//DiffTestHelper.VerifyParaStructDiff(diff2, new BCVRef(01030034), DifferenceType.ParagraphMergedInCurrent);
			//Assert.AreEqual(2, diff2.SubDiffsForParas.Count);
			//DiffTestHelper.VerifySubDiffTextCompared(diff2, 0, DifferenceType.NoDifference,
			//    para3Cur, 15, 15,
			//    para1Rev, para1Rev.Contents.Length, para1Rev.Contents.Length);
			//DiffTestHelper.VerifySubDiffParaReferencePoints(diff2, 0, para3Cur, 15, para1Rev, para1Rev.Contents.Length);
			//DiffTestHelper.VerifySubDiffTextCompared(diff1, 1, DifferenceType.NoDifference,
			//    null, 0, 0,
			//    para2Rev, 0, 0);

			// Revert verse 34 added
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3033For as churning the milk produces butter, 35so stirring up anger produces strife.",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);

			//// Revert merge at verse boundary before verse 35
			//m_bookMerger.ReplaceCurrentWithRevision(diff2);
			//Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			//Assert.AreEqual("3033For as churning the milk produces butter, ",
			//    ((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			//Assert.AreEqual("35so stirring up anger produces strife.",
			//    ((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Replaces the Current with the Revision when a a multi paragraph verse is added
		/// to existing paragraphs in the middle of a paragraph.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultiParaVerse_SegmentsAdded_MidPara()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraph
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 30, 33, "For as churning the milk produces butter, ");
			AddVerse(para1Cur, 0, 34, "and as");
			IScrTxtPara para2Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Cur, 0, 0, "twisting the nose");
			IScrTxtPara para3Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para3Cur, 0, 0, "produces blood,");
			AddVerse(para3Cur, 0, 35, "so stirring up anger produces strife.");

			// Build up the "revision" paragraphs
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 33, "For as churning the milk produces butter, ");
			int ichV35Rev = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 35, "so stirring up anger produces strife.");

			m_bookMerger.DetectDifferences(null);

			// We expect 1 difference
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// Multi-para Verse 34 was added to Current
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff1, new BCVRef(01030034), DifferenceType.ParagraphStructureChange);
			Assert.AreEqual(3, diff1.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff1, 0, DifferenceType.TextDifference,
				para1Cur, para1Cur.Contents.Length - 8, para1Cur.Contents.Length,
				para1Rev, ichV35Rev, ichV35Rev);
			DiffTestHelper.VerifySubDiffParaAdded(diff1, 1, DifferenceType.ParagraphAddedToCurrent,
				para2Cur, para2Cur.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff1, 2, DifferenceType.TextDifference,
				para3Cur, 0, 15, null, 0, 0);

			// Revert verse 34 added
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3033For as churning the milk produces butter, 35so stirring up anger produces strife.",
				sectionCur.ContentOA[0].Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Replaces the Current with the Revision when a a multi paragraph verse is added
		/// in new paragraphs at the end of a section.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultiParaVerse_ParasAdded_EndOfSection()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My Beautiful Verses");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Verses");

			// Build up the "current" paragraph
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 30, 33, "For as churning the milk produces butter,");
			IScrTxtPara para2Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Cur, 0, 34, "and as twisting");
			IScrTxtPara para3Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para3Cur, 0, 35, "the nose produces blood,");
			IScrTxtPara para4Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para4Cur, 0, 0, "so stirring up anger produces strife.");

			// Build up the "revision" paragraphs
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 30, 33, "For as churning the milk produces butter,");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 34, "and as twisting");

			m_bookMerger.DetectDifferences(null);

			// We expect 1 diff
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// verse 35 was added to Current
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff1, new BCVRef(01030035), DifferenceType.ParagraphStructureChange);
			Assert.AreEqual(3, diff1.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffParaReferencePoints(diff1, para2Cur, para2Cur.Contents.Length,
				para2Rev, para2Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffParaAdded(diff1, 1, DifferenceType.ParagraphAddedToCurrent,
				para3Cur, para3Cur.Contents.Length);
			DiffTestHelper.VerifySubDiffParaAdded(diff1, 2, DifferenceType.ParagraphAddedToCurrent,
				para4Cur, para4Cur.Contents.Length);

			// Revert verse 35
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3033For as churning the milk produces butter,",
				((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("34and as twisting",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}
			#endregion

		#endregion

		#region DetectDifferences for Moved Verses to Adjacent Paragraphs
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences
		/// method when the current book and the revision have a verse difference, and the verse
		/// spans a paragraph break. TODO: Someday detect as a verse moved (TE-6889) instead of para
		/// split and merge.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_VerseSegmentMovedToNextPara_Split()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// create Current, para 1
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 1, 0, "In the beginning, God created the heavens and the earth. ");
			int ichTxtChgMinCurr = para1Curr.Contents.Length + 11; // start of "was formless..."
			AddVerse(para1Curr, 0, 2, "The earth was formless...");

			// create Current, para 2
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 0, "and had no substance. ");
			int ichTxtChgLimCurr = para2Curr.Contents.Length;
			int ichV3StartCurr = para2Curr.Contents.Length;
			AddVerse(para2Curr, 0, 3, "And God said, 'Let there be light...' ");

			// create Revision, para 1
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 1, 0, "In the beginning, God created the heavens and the earth. ");
			int ichTxtChgMinRev = para1Rev.Contents.Length + 11; // start of "had no form..."
			AddVerse(para1Rev, 0, 2, "The earth had no form or substance.");
			int ichTxtChgLimRev = para1Rev.Contents.Length;

			// create Revsion, para 2
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 3, "And God said, 'Let there be light...' ");
			int ichLimRev3 = para2Rev.Contents.Length;

			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis

			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// We expect a mid-verse para split in verse two...
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01001002), DifferenceType.ParagraphSplitInCurrent);
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.TextDifference,
				para1Curr, ichTxtChgMinCurr, para1Curr.Contents.Length,
				para1Rev, ichTxtChgMinRev, ichTxtChgLimRev);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.TextDifference,
				para2Curr, 0, ichTxtChgLimCurr,
				null, 0, 0);

			// and a paragraph merge at the start of verse 3.
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01001002), DifferenceType.ParagraphMergedInCurrent);
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.NoDifference,
				para2Curr, ichV3StartCurr, ichV3StartCurr,
				para1Rev, para1Rev.Contents.Length, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.NoDifference,
				null, 0, 0, para2Rev, 0, 0);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences
		/// method when the current book and the revision have a verse difference, and the verse
		/// spans a paragraph break.
		/// TODO: Someday detect as a verse moved (TE-6889) instead of para split and merge.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_VerseSegmentMovedToPrevPara_Merge()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// create Current, para 1
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 1, 0, "In the beginning, God created the heavens and the earth. ");
			int ichTxtChgMinCurr = para1Curr.Contents.Length + 11; // start of "had no form..."
			AddVerse(para1Curr, 0, 2, "The earth had no form or substance.");
			int ichTxtChgLimCurr = para1Curr.Contents.Length;

			// create Current, para 2
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 3, "And God said, 'Let there be light...' ");

			// create Revsion, para 1
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 1, 0, "In the beginning, God created the heavens and the earth. ");
			AddVerse(para1Rev, 0, 2, "The earth was formless and null... ");

			// create Revsion, para 2
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "and had no substance. ");
			int ichTxtChgLimRev = para2Rev.Contents.Length;
			int ichV3StartRev = para2Rev.Contents.Length;
			AddVerse(para2Rev, 0, 3, "And God said, 'Let there be light...' ");

			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis

			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// We expect a mid-verse paragraph merge in verse 2...
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01001002), DifferenceType.ParagraphMergedInCurrent);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.TextDifference,
				para1Curr, ichTxtChgMinCurr, ichTxtChgLimCurr,
				para1Rev, ichTxtChgMinCurr, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.TextDifference,
				null, 0, 0, para2Rev, 0, ichTxtChgLimRev);

			// and a paragraph split at the start of verse 3.
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff, new BCVRef(01001002), DifferenceType.ParagraphSplitInCurrent);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.NoDifference,
				para1Curr, para1Curr.Contents.Length, para1Curr.Contents.Length,
				para2Rev, ichV3StartRev, ichV3StartRev);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 1, DifferenceType.NoDifference,
				para2Curr, 0, 0, null, 0, 0);
		}
		#endregion

		#region Detect Differences with missing and added pictures
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test DetectDifferences when a picture is added to the current
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_PictureAddedToCurrent()
		{
			IScrTxtPara paraCur;
			IScrTxtPara paraRev;
			int picPos = SetupPictureDiffTests(false, out paraCur, out paraRev);

			// verify the differences
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff, 01001001, DifferenceType.PictureAddedToCurrent,
				paraCur, picPos, picPos + 1, paraRev, picPos, picPos);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test DetectDifferences when a picture is missing in the current
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_PictureMissingInCurrent()
		{
			IScrTxtPara paraCur;
			IScrTxtPara paraRev;
			int picPos = SetupPictureDiffTests(true, out paraCur, out paraRev);

			// verify the differences
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff, 01001001, DifferenceType.PictureMissingInCurrent,
				paraCur, picPos, picPos, paraRev, picPos, picPos + 1);
		}


		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Sets up current and revision paragraphs, inserting a picture in the specified
		/// paragraph. This returns the position where the picture was inserted.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		private int SetupPictureDiffTests(bool putPicInRev, out IScrTxtPara paraCur,
			out IScrTxtPara paraRev)
		{
			// create Current section
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			paraCur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraCur, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(paraCur, "Hello.", Cache.DefaultVernWs);

			// create Revision section
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			paraRev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraRev, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(paraRev, "Hello.", Cache.DefaultVernWs);

			int picPos = 7;
			IScrTxtPara para = (putPicInRev ? paraRev : paraCur);

			// Add picture to revision.
			using (DummyFileMaker fileMaker = new DummyFileMaker("junk.jpg", true))
			{
				ICmPicture pict = Cache.ServiceLocator.GetInstance<ICmPictureFactory>().Create(fileMaker.Filename,
					TsStringUtils.MakeString("Test picture", Cache.DefaultVernWs),
					CmFolderTags.LocalPictures);

				para.Contents = pict.InsertORCAt(para.Contents, picPos);
			}

			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			return picPos;
		}
		#endregion

		#region DetectDifferences in Section Heads
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences
		/// method when the current and revision section heads are different.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_SectionHeadsDifferent()
		{
			// Create a section for both the current version of Genesis and the stored revision,
			//  with different text in the headings.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My other aching head!");

			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.CreateParagraph(sectionCur.ContentOA);

			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.CreateParagraph(sectionRev.ContentOA);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			//verify text difference in section head
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefEnd);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(sectionCur.HeadingOA[0], diff.ParaCurr);
			Assert.AreEqual(sectionRev.HeadingOA[0], diff.ParaRev);
			Assert.AreEqual(3, diff.IchMinCurr);
			Assert.AreEqual(3, diff.IchLimCurr);
			Assert.AreEqual(3, diff.IchMinRev);
			Assert.AreEqual(9, diff.IchLimRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences
		/// method when the current and revision section heads have different paragraph styles.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_SectionHeads_ParagraphStyleAndTextDifferent()
		{
			// create section head for Current
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");

			// create section head for Revision, with different paragraph style
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My head!");
			IScrTxtPara revHeadingPara = (IScrTxtPara)sectionRev.HeadingOA[0];
			revHeadingPara.StyleRules = StyleUtils.ParaStyleTextProps("Section Head Minor");

			// create a paragraph, for current.
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.CreateParagraph(sectionCur.ContentOA);

			// create identical paragraph for revision
			paraBldr = new StTxtParaBldr(Cache);
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.CreateParagraph(sectionRev.ContentOA);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			//verify difference in section head paragraph style
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphStyleDifference, diff.DiffType);
			Assert.AreEqual(sectionCur.HeadingOA[0], diff.ParaCurr);
			Assert.AreEqual(sectionRev.HeadingOA[0], diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(15, diff.IchLimCurr);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(8, diff.IchLimRev);

			//verify difference in section head text
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefEnd);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(sectionCur.HeadingOA[0], diff.ParaCurr);
			Assert.AreEqual(sectionRev.HeadingOA[0], diff.ParaRev);
			Assert.AreEqual(3, diff.IchMinCurr);
			Assert.AreEqual(10, diff.IchLimCurr);
			Assert.AreEqual(3, diff.IchMinRev);
			Assert.AreEqual(3, diff.IchLimRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences
		/// method when the revision section head has a second paragraph added at the end.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_SectionHeads_AddedHeadingParaAtEnd()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			// construct additional paragraph for Revision heading
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			paraBldr.ParaStyleName = ScrStyleNames.SectionHead;
			paraBldr.AppendRun("This is the second paragraph in the revision heading.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimAddedHeadingPara = paraBldr.Length;
			paraBldr.CreateParagraph(sectionRev.HeadingOA, 1); // insert at the end of heading

			// construct paragraph for Current section content
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.CreateParagraph(sectionCur.ContentOA);

			// construct paragraph for Revision section content
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.CreateParagraph(sectionRev.ContentOA);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			//verify the results
			Difference diff = m_bookMerger.Differences.MoveFirst();

			// verify that the second paragraph is missing in the Current section head
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefEnd);
			Assert.AreEqual(sectionCur.HeadingOA[0], diff.ParaCurr);
			Assert.AreEqual(sectionRev.HeadingOA[1], diff.ParaRev);
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff.DiffType);
			Assert.AreEqual(15, diff.IchMinCurr);
			Assert.AreEqual(15, diff.IchLimCurr);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(ichLimAddedHeadingPara, diff.IchLimRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences
		/// method when the revison has a verse added at the end of a section, i.e. just before
		/// the following section head.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_AddedVerseBeforeSectionHead()
		{
			// Create the current stuff
			IScrSection sectionCur1 = CreateSection(m_genesis, "My aching head!");

			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun(" One. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoCurr1 = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur1.ContentOA);

			IScrSection sectionCur2 = CreateSection(m_genesis, "My other aching head!");

			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("3", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun(" Three.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoCurr2 = (IScrTxtPara)paraBldr.CreateParagraph(sectionCur2.ContentOA);

			// create the revision stuff
			IScrSection sectionRev1 = CreateSection(m_genesisRevision, "My aching head!");

			// revision para 0 has an added verse 2
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun(" One. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("2", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun(" Two.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoRev1 = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev1.ContentOA);

			IScrSection sectionRev2 = CreateSection(m_genesisRevision, "My other aching head!");

			paraBldr.AppendRun("3", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun(" Three.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			IScrTxtPara hvoRev2 = (IScrTxtPara)paraBldr.CreateParagraph(sectionRev2.ContentOA);

			// Detect differences in the versions
			m_bookMerger.DetectDifferences(null);

			// verify verse 2 missing in Current
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.IsNotNull(diff, "There should be a diff for verse 2 missing in the Current");
			Assert.AreEqual(01001002, diff.RefStart);
			Assert.AreEqual(01001002, diff.RefEnd);
			Assert.AreEqual(DifferenceType.VerseMissingInCurrent, diff.DiffType);
			Assert.AreEqual(hvoCurr1, diff.ParaCurr);
			Assert.AreEqual(hvoRev1, diff.ParaRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences
		/// method when the current has a section head added and there is a verse before the
		/// section head. The same reference spans the sections in the both the current and the
		/// revision.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_AddedHead_SameRef_VerseBefore()
		{
			// Create the current stuff
			IScrSection sectionCur1 = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara paraCur1 = AddParaToMockedSectionContent(sectionCur1, ScrStyleNames.NormalParagraph);
			AddVerse(paraCur1, 1, 1, "Start of verse");
			IScrSection sectionCur2 = CreateSection(m_genesis, "My other aching head!");
			IScrTxtPara paraCur2 = AddParaToMockedSectionContent(sectionCur2, ScrStyleNames.NormalParagraph);
			AddVerse(paraCur2, 0, 0, "and the same verse continues");
			IScrSection sectionCur3 = CreateSection(m_genesis, "My new (and third) aching head!");
			// Section 3 has no content.
			AddEmptyPara(sectionCur3, ScrStyleNames.StanzaBreak);
			//AddVerse((IScrTxtPara)sectionCur3.ContentOA[0], 0, 0, " ");

			// Create the revision stuff
			IScrSection sectionRev1 = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara paraRev1 = AddParaToMockedSectionContent(sectionRev1, ScrStyleNames.NormalParagraph);
			AddVerse(paraRev1, 1, 1, "Start of verse");
			IScrSection sectionRev2 = CreateSection(m_genesisRevision, "My other aching head!");
			IScrTxtPara paraRev2 = AddParaToMockedSectionContent(sectionRev2, ScrStyleNames.NormalParagraph);
			AddVerse(paraRev2, 0, 0, "and the same verse continues");

			// Detect differences between current and the revision.
			m_bookMerger.DetectDifferences(null);

			// We expect one difference.
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff1, 01001001, 01001001, DifferenceType.SectionAddedToCurrent,
				sectionCur3, paraRev2, paraRev2.Contents.Length);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences
		/// method when the current has a section head added and there is a verse after the added
		/// section head. The same reference spans the sections in the both the current and the
		/// revision.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		[Ignore("TE-7209: Don't handle correlation of empty sections well now.")]
		public void DetectDifferences_AddedHead_SameRef_VerseAfter()
		{
			// Create the current stuff
			IScrSection sectionCur1 = CreateSection(m_genesis, "My aching head!");
			AddParaToMockedSectionContent(sectionCur1, ScrStyleNames.NormalParagraph);
			AddVerse((IScrTxtPara)sectionCur1.ContentOA[0], 0, 0, " ");
			// REVIEW: SectionHeadAdded difference does not see this next section as the added section.
			// It thinks the final section is the added one. This, then, throws off the indices
			// and the destination point becomes the end of the content in the last section
			// rather than to the end of the content of the first section.
			IScrSection sectionCur2 = CreateSection(m_genesis, "My New Section");
			AddParaToMockedSectionContent(sectionCur2, ScrStyleNames.NormalParagraph);
			AddVerse((IScrTxtPara)sectionCur2.ContentOA[0], 0, 0, " ");
			IScrSection sectionCur3 = CreateSection(m_genesis, "My other aching head!");
			IScrTxtPara paraCur3 = AddParaToMockedSectionContent(sectionCur3, ScrStyleNames.NormalParagraph);
			AddVerse(paraCur3, 0, 0, "And we finally get some verse text.");

			// Create the revision stuff
			IScrSection sectionRev1 = CreateSection(m_genesisRevision, "My aching head!");
			AddParaToMockedSectionContent(sectionRev1, ScrStyleNames.NormalParagraph);
			AddVerse((IScrTxtPara)sectionRev1.ContentOA[0], 0, 0, " ");
			IScrSection sectionRev2 = CreateSection(m_genesisRevision, "My other aching head!");
			IScrTxtPara paraRev2 = AddParaToMockedSectionContent(sectionRev2, ScrStyleNames.NormalParagraph);
			AddVerse(paraRev2, 0, 0, "And we finally get some verse text.");

			// REVIEW: The comparison is from the f
			// Detect differences between current and the revision.
			m_bookMerger.DetectDifferences(null);

			// We expect one difference: the insertion point in the revision for the new section
			// head should be at the end of the (only empty) paragraph in the first section of the
			// revision.
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff, 01001001, 01001001, DifferenceType.SectionHeadAddedToCurrent,
				sectionCur2, (IScrTxtPara)sectionRev2.ContentOA[0], 0);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences
		/// method when the current has a section head added but there is no verse text after the
		/// added section head. The same reference spans the sections in the both the current and
		/// the revision.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		[Ignore("TE-7209: Don't handle correlation of empty sections well now.")]
		public void DetectDifferences_AddedHead_SameRef_NoVerseText()
		{
			// Create the current stuff
			IScrSection sectionCur1 = CreateSection(m_genesis, "My aching head!");
			AddParaToMockedSectionContent(sectionCur1, ScrStyleNames.NormalParagraph);
			AddVerse((IScrTxtPara)sectionCur1.ContentOA[0], 0, 0, " ");
			IScrSection sectionCur2 = CreateSection(m_genesis, "My New Section");
			AddParaToMockedSectionContent(sectionCur2, ScrStyleNames.NormalParagraph);
			AddVerse((IScrTxtPara)sectionCur2.ContentOA[0], 0, 0, " ");
			IScrSection sectionCur3 = CreateSection(m_genesis, "My other aching head!");
			AddParaToMockedSectionContent(sectionCur3, ScrStyleNames.NormalParagraph);
			AddVerse((IScrTxtPara)sectionCur3.ContentOA[0], 0, 0, " ");

			// Create the revision stuff
			IScrSection sectionRev1 = CreateSection(m_genesisRevision, "My aching head!");
			AddParaToMockedSectionContent(sectionRev1, ScrStyleNames.NormalParagraph);
			AddVerse((IScrTxtPara)sectionRev1.ContentOA[0], 0, 0, " ");
			IScrSection sectionRev2 = CreateSection(m_genesisRevision, "My other aching head!");
			AddParaToMockedSectionContent(sectionRev2, ScrStyleNames.NormalParagraph);
			AddVerse((IScrTxtPara)sectionRev2.ContentOA[0], 0, 0, " ");

			// Detect differences between current and the revision.
			m_bookMerger.DetectDifferences(null);

			// We expect one difference: the insertion point in the revision for the new section
			// head should be at the end of the (only empty) paragraph in the first section of the
			// revision.
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.CurrentDifference;
			DiffTestHelper.VerifySectionDiff(diff, 01001001, 01001001, DifferenceType.SectionHeadAddedToCurrent,
				sectionCur2, (IScrTxtPara)sectionRev2.ContentOA[0], 0);
		}
		#endregion

		#region DetectDifferences in Titles
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the current book and
		/// the revision have identical titles.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_TitlesIdentical()
		{
			// Set identical titles for the current and revised versions of Genesis.
			AddTitleToMockedBook(m_genesis, "Genesis");
			AddTitleToMockedBook(m_genesisRevision, "Genesis");

			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.CreateParagraph(sectionCur.ContentOA);

			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.CreateParagraph(sectionRev.ContentOA);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			//verify the results
			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the current book and
		/// the revision have different titles.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_TitlesDifferent()
		{
			// Set different titles for the current and revised versions of Genesis.
			AddTitleToMockedBook(m_genesis, "Gensis");
			AddTitleToMockedBook(m_genesisRevision, "Genesis");

			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.CreateParagraph(sectionCur.ContentOA);

			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.CreateParagraph(sectionRev.ContentOA);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			//verify the results
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001000, diff.RefStart);
			Assert.AreEqual(01001000, diff.RefEnd);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual( m_genesis.TitleOA[0], diff.ParaCurr);
			Assert.AreEqual( m_genesisRevision.TitleOA[0], diff.ParaRev);
			Assert.AreEqual(3, diff.IchMinCurr);
			Assert.AreEqual(3, diff.IchLimCurr);
			Assert.AreEqual(3, diff.IchMinRev);
			Assert.AreEqual(4, diff.IchLimRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when the revision title
		/// has an additional paragraph.
		/// This is a regression test for bug TE-2964.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_Titles_AddedTitleParaAtEnd()
		{
			// Set identical titles for the current and revised versions of Genesis.
			AddTitleToMockedBook(m_genesis, "Genesis");
			AddTitleToMockedBook(m_genesisRevision, "Genesis");

			// construct additional paragraph for Revision title
			int ichLimAddedTitlePara;
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			paraBldr.ParaStyleName = ScrStyleNames.SecondaryBookTitle;
			paraBldr.AppendRun("This is the second paragraph in the revision title.",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
				ichLimAddedTitlePara = paraBldr.Length;
			paraBldr.CreateParagraph(m_genesisRevision.TitleOA, 1); // insert at the end of title

			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			paraBldr = new StTxtParaBldr(Cache);
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.CreateParagraph(sectionCur.ContentOA);

			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.CreateParagraph(sectionRev.ContentOA);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			//verify second paragraph in title is missing Current
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001000, diff.RefStart);
			Assert.AreEqual(01001000, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff.DiffType);
			Assert.AreEqual( m_genesis.TitleOA[0], diff.ParaCurr);
			Assert.AreEqual( m_genesisRevision.TitleOA[1], diff.ParaRev);
			Assert.AreEqual(7, diff.IchMinCurr);
			Assert.AreEqual(7, diff.IchLimCurr);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(ichLimAddedTitlePara, diff.IchLimRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		#endregion

		#region DetectDifferences in Minimally Overlapped Scripture Sections
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when sections have only
		/// minimal verse range overlap, and text is different.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_MinimalOverlap_TextDifferences()
		{
			ITsTextProps verseRunProps = StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs);
			ITsTextProps textRunProps = StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs);
			string sectionHeadText = "My aching head!";

			// section refs are set up with only minimal overlap

			// construct Current section: one para, range is verses 6-14
			IScrSection sectionCur = CreateSection(m_genesis, sectionHeadText);
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("6", verseRunProps);
			paraBldr.AppendRun("Verse 6.", textRunProps);
			int ichLimV6Cur = paraBldr.Length;
			paraBldr.AppendRun("12", verseRunProps);
			paraBldr.AppendRun("Verse 12.", textRunProps);
			int ichLimV12Cur = paraBldr.Length;
			paraBldr.AppendRun("14", verseRunProps);
			paraBldr.AppendRun("something different! ", textRunProps);
			int ichLimV14Cur = paraBldr.Length;
			paraBldr.CreateParagraph(sectionCur.ContentOA);

			// construct Revision section: one para, range is verses 12-21
			IScrSection sectionRev = CreateSection(m_genesisRevision, sectionHeadText);
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("12", verseRunProps);
			paraBldr.AppendRun("Verse 12.", textRunProps);
			int ichLimV12Rev = paraBldr.Length;
			paraBldr.AppendRun("14", verseRunProps);
			paraBldr.AppendRun("Verse 14.", textRunProps);
			int ichLimV14Rev = paraBldr.Length;
			paraBldr.AppendRun("21", verseRunProps);
			paraBldr.AppendRun("Verse 21.", textRunProps);
			int ichLimV21Rev = paraBldr.Length;
			paraBldr.CreateParagraph(sectionRev.ContentOA);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(3, m_bookMerger.Differences.Count);

			// Missing verse 6 from revision
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001006, diff.RefStart);
			Assert.AreEqual(01001006, diff.RefEnd);
			Assert.AreEqual(DifferenceType.VerseAddedToCurrent, diff.DiffType);
			Assert.AreEqual(sectionCur.ContentOA[0], diff.ParaCurr);
			Assert.AreEqual(sectionRev.ContentOA[0], diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(ichLimV6Cur, diff.IchLimCurr);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(0, diff.IchLimRev);

			// verse 14 text difference
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001014, diff.RefStart);
			Assert.AreEqual(01001014, diff.RefEnd);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(sectionCur.ContentOA[0], diff.ParaCurr);
			Assert.AreEqual(sectionRev.ContentOA[0], diff.ParaRev);
			Assert.AreEqual(ichLimV12Cur + 2, diff.IchMinCurr); // verse number matches
			Assert.AreEqual(ichLimV14Cur, diff.IchLimCurr);
			Assert.AreEqual(ichLimV12Rev + 2, diff.IchMinRev); // verse number matches
			Assert.AreEqual(ichLimV14Rev, diff.IchLimRev);

			// verse 21 missing in current
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001021, diff.RefStart);
			Assert.AreEqual(01001021, diff.RefEnd);
			Assert.AreEqual(DifferenceType.VerseMissingInCurrent, diff.DiffType);
			Assert.AreEqual(sectionCur.ContentOA[0], diff.ParaCurr);
			Assert.AreEqual(sectionRev.ContentOA[0], diff.ParaRev);
			Assert.AreEqual(ichLimV14Cur, diff.IchMinCurr);
			Assert.AreEqual(ichLimV14Cur, diff.IchLimCurr);
			Assert.AreEqual(ichLimV14Rev, diff.IchMinRev);
			Assert.AreEqual(ichLimV21Rev, diff.IchLimRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Tests DetectDifferences when headings of minimal overlap sections are different.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_MinimalOverlap_SectionHeadDifference()
		{
			ITsTextProps verseNumProps = StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber, Cache.DefaultVernWs);
			ITsTextProps textRunProps = StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs);

			// section refs are set up with only minimal overlap

			// construct Current section: one para, range is verses 1-14
			IScrSection sectionCur = CreateSection(m_genesis, "My section head.");
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", verseNumProps);
			paraBldr.AppendRun("something", textRunProps);
			int ichLimV1Cur = paraBldr.Length;
			paraBldr.AppendRun("12", verseNumProps);
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ", textRunProps);
			int ichLimV12Cur = paraBldr.Length;
			paraBldr.AppendRun("14", verseNumProps);
			int ichLimV14Cur = paraBldr.Length;
			paraBldr.CreateParagraph(sectionCur.ContentOA);
			// section refs are set up to cause processing as unmatched sections

			// construct Current section: one para, range is verses 11-21
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("11", verseNumProps);
			paraBldr.AppendRun("something", textRunProps);
			int ichLimV11Rev = paraBldr.Length;
			paraBldr.AppendRun("12", verseNumProps);
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ", textRunProps);
			int ichLimV12Rev = paraBldr.Length;
			paraBldr.AppendRun("21", verseNumProps);
			int ichLimV21Rev = paraBldr.Length;
			paraBldr.CreateParagraph(sectionRev.ContentOA);
			// section refs are set up to cause processing as unmatched sections

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(5, m_bookMerger.Differences.Count);

			// Text difference in section head
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefEnd);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(sectionCur.HeadingOA[0], diff.ParaCurr);
			Assert.AreEqual(sectionRev.HeadingOA[0], diff.ParaRev);
			Assert.AreEqual(3, diff.IchMinCurr);
			Assert.AreEqual(16, diff.IchLimCurr);
			Assert.AreEqual(3, diff.IchMinRev);
			Assert.AreEqual(15, diff.IchLimRev);

			// verse 1 missing in revision
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefEnd);
			Assert.AreEqual(DifferenceType.VerseAddedToCurrent, diff.DiffType);
			Assert.AreEqual(sectionCur.ContentOA[0], diff.ParaCurr);
			Assert.AreEqual(sectionRev.ContentOA[0], diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(ichLimV1Cur, diff.IchLimCurr);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(0, diff.IchLimRev);

			// verse 11 missing in current
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001011, diff.RefStart);
			Assert.AreEqual(01001011, diff.RefEnd);
			Assert.AreEqual(DifferenceType.VerseMissingInCurrent, diff.DiffType);
			Assert.AreEqual(sectionCur.ContentOA[0], diff.ParaCurr);
			Assert.AreEqual(sectionRev.ContentOA[0], diff.ParaRev);
			Assert.AreEqual(ichLimV1Cur, diff.IchMinCurr);
			Assert.AreEqual(ichLimV1Cur, diff.IchLimCurr);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(ichLimV11Rev, diff.IchLimRev);

			// verse 14 missing in revision
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001014, diff.RefStart);
			Assert.AreEqual(01001014, diff.RefEnd);
			Assert.AreEqual(DifferenceType.VerseAddedToCurrent, diff.DiffType);
			Assert.AreEqual(sectionCur.ContentOA[0], diff.ParaCurr);
			Assert.AreEqual(sectionRev.ContentOA[0], diff.ParaRev);
			Assert.AreEqual(ichLimV12Cur, diff.IchMinCurr);
			Assert.AreEqual(ichLimV14Cur, diff.IchLimCurr);
			Assert.AreEqual(ichLimV12Rev, diff.IchMinRev);
			Assert.AreEqual(ichLimV12Rev, diff.IchLimRev);

			// verse 21 missing in current
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001021, diff.RefStart);
			Assert.AreEqual(01001021, diff.RefEnd);
			Assert.AreEqual(DifferenceType.VerseMissingInCurrent, diff.DiffType);
			Assert.AreEqual(sectionCur.ContentOA[0], diff.ParaCurr);
			Assert.AreEqual(sectionRev.ContentOA[0], diff.ParaRev);
			Assert.AreEqual(ichLimV14Cur, diff.IchMinCurr);
			Assert.AreEqual(ichLimV14Cur, diff.IchLimCurr);
			Assert.AreEqual(ichLimV12Rev, diff.IchMinRev);
			Assert.AreEqual(ichLimV21Rev, diff.IchLimRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}
		#endregion

		#region DetectDifferences in Intro Sections (text correlation)
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when one intro paragraph is split into two.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		[Ignore("Do as part of TE-2900")]
		public void DetectDifferences_ParaSplitInIntro()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = CreateIntroSection(m_genesis, "My Beautiful Intro");
			IScrSection sectionRev = CreateIntroSection(m_genesisRevision, "My Beautiful Intro");

			// Build up the "current" paragraphs
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur,
				ScrStyleNames.NormalParagraph);
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur,
				ScrStyleNames.NormalParagraph);

			AddRunToMockedPara(para1Curr, "Intro text part one. part two. ",
				ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "part three.", ScrStyleNames.NormalParagraph);

			// Build up the "revision" paragraph
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev,
				ScrStyleNames.NormalParagraph);

			AddRunToMockedPara(para1Rev, "Intro text part one. part two. part three.",
				ScrStyleNames.NormalParagraph);

			// Detect differences and verify them
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// Verify diff
			// The intro section content should be in the same paragraph in the revision,
			// but in two separate paragraphs in the current version.
			Difference diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01000000, diff.RefStart);
			Assert.AreEqual(01000000, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphSplitInCurrent, diff.DiffType);
			Assert.AreEqual(para1Curr, diff.ParaCurr);
			Assert.AreEqual(para1Rev, diff.ParaRev);
			Assert.AreEqual(para1Curr.Contents.Length - 1, diff.IchMinCurr);
			Assert.AreEqual(para1Curr.Contents.Length, diff.IchLimCurr);
			Assert.AreEqual(31, diff.IchMinRev);
			Assert.AreEqual(31, diff.IchLimRev);

			// MoveNext should return null because there are no more differences
			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when crossovers exist between the correlated paragraphs.
		///
		/// Rev      Curr
		///  D        A
		///	 A        B
		///	 B        C
		///	 C        D
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_Intro_MultipleCrossovers()
		{
			// Set identical titles for the current and revised versions of Genesis.
			AddTitleToMockedBook(m_genesis, "Genesis");
			AddTitleToMockedBook(m_genesisRevision, "Genesis");

			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = AddSectionToMockedBook(m_genesis, true);
			AddSectionHeadParaToSection(sectionCur, "My aching head!", ScrStyleNames.SectionHead);

			IScrSection sectionRev = AddSectionToMockedBook(m_genesisRevision, true);
			AddSectionHeadParaToSection(sectionRev, "My aching head!", ScrStyleNames.SectionHead);

			// add paragraphs of text to the "current" intro section
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para1Curr, "Ayee", Cache.DefaultVernWs);
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para2Curr, "Beee", Cache.DefaultVernWs);
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para3Curr, "Ceeee", Cache.DefaultVernWs);
			IScrTxtPara para4Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para4Curr, "Dee", Cache.DefaultVernWs);

			// add a paragraph of text to the "revision" intro section
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para1Rev, "Dee", Cache.DefaultVernWs);
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para2Rev, "Ayee", Cache.DefaultVernWs);
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para3Rev, "Beee", Cache.DefaultVernWs);
			IScrTxtPara para4Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para4Rev, "Ceeee", Cache.DefaultVernWs);


			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(2, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff.DiffType);
			Assert.AreEqual(para1Rev, diff.ParaRev);
			Assert.AreEqual(para1Curr, diff.ParaCurr);

			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff.DiffType);
			Assert.AreEqual(para4Rev, diff.ParaRev);
			Assert.AreEqual(para4Curr, diff.ParaCurr);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences when a single crossover exists between the correlated paragraphs.
		///
		/// Rev      Curr
		///  B        A
		///	 A        B
		///	 C        C
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_Intro_SingleCrossover()
		{
			// Set identical titles for the current and revised versions of Genesis.
			AddTitleToMockedBook(m_genesis, "Genesis");
			AddTitleToMockedBook(m_genesisRevision, "Genesis");

			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = AddSectionToMockedBook(m_genesis, true);
			AddSectionHeadParaToSection(sectionCur, "My aching head!", ScrStyleNames.SectionHead);

			IScrSection sectionRev = AddSectionToMockedBook(m_genesisRevision, true);
			AddSectionHeadParaToSection(sectionRev, "My aching head!", ScrStyleNames.SectionHead);

			// add paragraphs of text to the "current" intro section
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para1Curr, "Ayee", Cache.DefaultVernWs);
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para2Curr, "Beee", Cache.DefaultVernWs);
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para3Curr, "Ceeee", Cache.DefaultVernWs);

			// add a paragraph of text to the "revision" intro section
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para1Rev, "Beee", Cache.DefaultVernWs);
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para2Rev, "Ayee", Cache.DefaultVernWs);
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para3Rev, "Ceeee", Cache.DefaultVernWs);


			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff.DiffType);
			Assert.AreEqual(para1Rev, diff.ParaRev);
			Assert.AreEqual(para1Curr, diff.ParaCurr);

			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff.DiffType);
			Assert.AreEqual(para3Rev, diff.ParaRev);
			Assert.AreEqual(para2Curr, diff.ParaCurr);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Compare a single intro paragraph to a single intro paragraph
		///
		/// Rev      Curr
		///  A        A
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_Intro_SingleParaToSinglePara()
		{
			// Set identical titles for the current and revised versions of Genesis.
			AddTitleToMockedBook(m_genesis, "Genesis");
			AddTitleToMockedBook(m_genesisRevision, "Genesis");

			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = AddSectionToMockedBook(m_genesis, true);
			AddSectionHeadParaToSection(sectionCur, "My aching head!", ScrStyleNames.SectionHead);

			IScrSection sectionRev = AddSectionToMockedBook(m_genesisRevision, true);
			AddSectionHeadParaToSection(sectionRev, "My aching head!", ScrStyleNames.SectionHead);

			// add a paragraph of text to the "current" intro section
			IScrTxtPara paraCurr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(paraCurr, "Here is my first paragraph of text!", Cache.DefaultVernWs);

			// add a paragraph of text to the "revision" intro section
			IScrTxtPara paraRev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(paraRev, "Here is my first discourse of text!", Cache.DefaultVernWs);


			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences in intro paragraphs. This tests for proper correlation of
		/// text paragraphs.
		///
		/// Rev      Curr
		///  A        A
		///  B
		///  C
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_Intro_ABCtoA()
		{
			// Set identical titles for the current and revised versions of Genesis.
			AddTitleToMockedBook(m_genesis, "Genesis");
			AddTitleToMockedBook(m_genesisRevision, "Genesis");

			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = AddSectionToMockedBook(m_genesis, true);
			AddSectionHeadParaToSection(sectionCur, "My aching head!", ScrStyleNames.SectionHead);

			IScrSection sectionRev = AddSectionToMockedBook(m_genesisRevision, true);
			AddSectionHeadParaToSection(sectionRev, "My aching head!", ScrStyleNames.SectionHead);

			// add 3 paragraphs of text to the "revision" intro section
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para1Rev, "A body of text about A", Cache.DefaultVernWs);
			int lenPara1Rev = para1Rev.Contents.Length;

			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para2Rev, "More discourse on the second letter B", Cache.DefaultVernWs);
			int lenPara2Rev = para2Rev.Contents.Length;

			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para3Rev, "Finally, some conclusions about the letter C", Cache.DefaultVernWs);
			int lenPara3Rev = para3Rev.Contents.Length;

			// add a paragraph of text to the "current" intro section
			IScrTxtPara paraCurr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(paraCurr, "The body of text about A", Cache.DefaultVernWs);
			int lenParaCurr = paraCurr.Contents.Length;


			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(3, m_bookMerger.Differences.Count);

			Difference diff;

			// This difference will indicate a text difference in "A"
			diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001000, diff.RefStart);
			Assert.AreEqual(01001000, diff.RefEnd);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(paraCurr, diff.ParaCurr);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(3, diff.IchLimCurr);
			Assert.AreEqual(para1Rev, diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(1, diff.IchLimRev);

			// the first difference will be "B" missing in current
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001000, diff.RefStart);
			Assert.AreEqual(01001000, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff.DiffType);
			Assert.AreEqual(paraCurr, diff.ParaCurr);
			Assert.AreEqual(lenParaCurr, diff.IchMinCurr);
			Assert.AreEqual(lenParaCurr, diff.IchLimCurr);
			Assert.AreEqual(para2Rev, diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(lenPara2Rev, diff.IchLimRev);

			// the last difference will be "C" missing in current
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001000, diff.RefStart);
			Assert.AreEqual(01001000, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff.DiffType);
			Assert.AreEqual(paraCurr, diff.ParaCurr);
			Assert.AreEqual(lenParaCurr, diff.IchMinCurr);
			Assert.AreEqual(lenParaCurr, diff.IchLimCurr);
			Assert.AreEqual(para3Rev, diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(lenPara3Rev, diff.IchLimRev);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences in intro paragraphs. This tests for proper correlation of
		/// text paragraphs.
		///
		/// Rev      Curr
		///  A
		///  B        B
		///  C
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_Intro_ABCtoB()
		{
			// Set identical titles for the current and revised versions of Genesis.
			AddTitleToMockedBook(m_genesis, "Genesis");
			AddTitleToMockedBook(m_genesisRevision, "Genesis");

			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = AddSectionToMockedBook(m_genesis, true);
			AddSectionHeadParaToSection(sectionCur, "My aching head!", ScrStyleNames.SectionHead);

			IScrSection sectionRev = AddSectionToMockedBook(m_genesisRevision, true);
			AddSectionHeadParaToSection(sectionRev, "My aching head!", ScrStyleNames.SectionHead);

			// add 3 paragraphs of text to the "revision" intro section
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para1Rev, "A body of text about A", Cache.DefaultVernWs);
			int lenPara1Rev = para1Rev.Contents.Length;

			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para2Rev, "More discourse on the second letter B", Cache.DefaultVernWs);
			int lenPara2Rev = para2Rev.Contents.Length;

			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para3Rev, "Finally, some conclusions about the letter C", Cache.DefaultVernWs);
			int lenPara3Rev = para3Rev.Contents.Length;

			// add a paragraph of text to the "current" intro section
			IScrTxtPara paraCurr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(paraCurr, "More discourse about the second letter B", Cache.DefaultVernWs);
			int lenParaCurr = paraCurr.Contents.Length;


			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(3, m_bookMerger.Differences.Count);

			Difference diff;

			// the first difference will be "A" missing in current
			diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001000, diff.RefStart);
			Assert.AreEqual(01001000, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff.DiffType);
			Assert.AreEqual(paraCurr, diff.ParaCurr);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(0, diff.IchLimCurr);
			Assert.AreEqual(para1Rev, diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(lenPara1Rev, diff.IchLimRev);

			// This difference will indicate a text difference in "B"
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001000, diff.RefStart);
			Assert.AreEqual(01001000, diff.RefEnd);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(paraCurr, diff.ParaCurr);
			Assert.AreEqual(15, diff.IchMinCurr);
			Assert.AreEqual(20, diff.IchLimCurr);
			Assert.AreEqual(para2Rev, diff.ParaRev);
			Assert.AreEqual(15, diff.IchMinRev);
			Assert.AreEqual(17, diff.IchLimRev);

			// the last difference will be "C" missing in current
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001000, diff.RefStart);
			Assert.AreEqual(01001000, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff.DiffType);
			Assert.AreEqual(paraCurr, diff.ParaCurr);
			Assert.AreEqual(lenParaCurr, diff.IchMinCurr);
			Assert.AreEqual(lenParaCurr, diff.IchLimCurr);
			Assert.AreEqual(para3Rev, diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(lenPara3Rev, diff.IchLimRev);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences in intro paragraphs. This tests for proper correlation of
		/// text paragraphs.
		///
		/// Rev      Curr
		///  A
		///  B
		///  C        C
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_Intro_ABCtoC()
		{
			// Set identical titles for the current and revised versions of Genesis.
			AddTitleToMockedBook(m_genesis, "Genesis");
			AddTitleToMockedBook(m_genesisRevision, "Genesis");

			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = AddSectionToMockedBook(m_genesis, true);
			AddSectionHeadParaToSection(sectionCur, "My aching head!", ScrStyleNames.SectionHead);

			IScrSection sectionRev = AddSectionToMockedBook(m_genesisRevision, true);
			AddSectionHeadParaToSection(sectionRev, "My aching head!", ScrStyleNames.SectionHead);

			// add 3 paragraphs of text to the "revision" intro section
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para1Rev, "A body of text about A", Cache.DefaultVernWs);
			int lenPara1Rev = para1Rev.Contents.Length;

			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para2Rev, "More discourse on the second letter B", Cache.DefaultVernWs);
			int lenPara2Rev = para2Rev.Contents.Length;

			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para3Rev, "Finally, some conclusions about the letter C", Cache.DefaultVernWs);
			int lenPara3Rev = para3Rev.Contents.Length;

			// add a paragraph of text to the "current" intro section
			IScrTxtPara paraCurr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(paraCurr, "Finally, a few conclusions about the letter C", Cache.DefaultVernWs);
			int lenParaCurr = paraCurr.Contents.Length;


			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(3, m_bookMerger.Differences.Count);

			Difference diff;

			// the first difference will be "A" missing in current
			diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001000, diff.RefStart);
			Assert.AreEqual(01001000, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff.DiffType);
			Assert.AreEqual(paraCurr, diff.ParaCurr);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(0, diff.IchLimCurr);
			Assert.AreEqual(para1Rev, diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(lenPara1Rev, diff.IchLimRev);

			// This difference will be "B" missing in current
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001000, diff.RefStart);
			Assert.AreEqual(01001000, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff.DiffType);
			Assert.AreEqual(paraCurr, diff.ParaCurr);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(0, diff.IchLimCurr);
			Assert.AreEqual(para2Rev, diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(lenPara2Rev, diff.IchLimRev);

			// This difference will indicate a text difference in "C"
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001000, diff.RefStart);
			Assert.AreEqual(01001000, diff.RefEnd);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(paraCurr, diff.ParaCurr);
			Assert.AreEqual(9, diff.IchMinCurr);
			Assert.AreEqual(14, diff.IchLimCurr);
			Assert.AreEqual(para3Rev, diff.ParaRev);
			Assert.AreEqual(9, diff.IchMinRev);
			Assert.AreEqual(13, diff.IchLimRev);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences in intro paragraphs. This tests for proper correlation of
		/// text paragraphs.
		///
		/// Rev      Curr
		///  A        A
		///           B
		///           C
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_Intro_AtoABC()
		{
			// Set identical titles for the current and revised versions of Genesis.
			AddTitleToMockedBook(m_genesis, "Genesis");
			AddTitleToMockedBook(m_genesisRevision, "Genesis");

			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = AddSectionToMockedBook(m_genesis, true);
			AddSectionHeadParaToSection(sectionCur, "My aching head!", ScrStyleNames.SectionHead);

			IScrSection sectionRev = AddSectionToMockedBook(m_genesisRevision, true);
			AddSectionHeadParaToSection(sectionRev, "My aching head!", ScrStyleNames.SectionHead);

			// add 1 paragraph of text to the "revision" intro section
			IScrTxtPara paraRev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(paraRev, "A body of text about A", Cache.DefaultVernWs);
			int lenParaRev = paraRev.Contents.Length;

			// add 3 paragraphs of text to the "current" intro section
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para1Curr, "The body of text about A", Cache.DefaultVernWs);
			int lenPara1Curr = para1Curr.Contents.Length;

			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para2Curr, "More discourse on the second letter B", Cache.DefaultVernWs);
			int lenPara2Curr = para2Curr.Contents.Length;

			IScrTxtPara para3Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para3Curr, "Finally, some conclusions about the letter C", Cache.DefaultVernWs);
			int lenPara3Curr = para3Curr.Contents.Length;


			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(3, m_bookMerger.Differences.Count);

			Difference diff;

			// This difference will indicate a text difference in "A"
			diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001000, diff.RefStart);
			Assert.AreEqual(01001000, diff.RefEnd);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(para1Curr, diff.ParaCurr);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(3, diff.IchLimCurr);
			Assert.AreEqual(paraRev, diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(1, diff.IchLimRev);

			// the first difference will be "B" added to current
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001000, diff.RefStart);
			Assert.AreEqual(01001000, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff.DiffType);
			Assert.AreEqual(para2Curr, diff.ParaCurr);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(lenPara2Curr, diff.IchLimCurr);
			Assert.AreEqual(paraRev, diff.ParaRev);
			Assert.AreEqual(lenParaRev, diff.IchMinRev);
			Assert.AreEqual(lenParaRev, diff.IchLimRev);

			// the last difference will be "C" added to current
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001000, diff.RefStart);
			Assert.AreEqual(01001000, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff.DiffType);
			Assert.AreEqual(para3Curr, diff.ParaCurr);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(lenPara3Curr, diff.IchLimCurr);
			Assert.AreEqual(paraRev, diff.ParaRev);
			Assert.AreEqual(lenParaRev, diff.IchMinRev);
			Assert.AreEqual(lenParaRev, diff.IchLimRev);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences in intro paragraphs. This tests for proper correlation of
		/// text paragraphs.
		///
		/// Rev      Curr
		///           A
		///  B        B
		///           C
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_Intro_BtoABC()
		{
			// Set identical titles for the current and revised versions of Genesis.
			AddTitleToMockedBook(m_genesis, "Genesis");
			AddTitleToMockedBook(m_genesisRevision, "Genesis");

			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = AddSectionToMockedBook(m_genesis, true);
			AddSectionHeadParaToSection(sectionCur, "My aching head!", ScrStyleNames.SectionHead);

			IScrSection sectionRev = AddSectionToMockedBook(m_genesisRevision, true);
			AddSectionHeadParaToSection(sectionRev, "My aching head!", ScrStyleNames.SectionHead);

			// add 1 paragraph of text to the "revision" intro section
			IScrTxtPara paraRev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(paraRev, "Other discourse on the second letter B", Cache.DefaultVernWs);
			int lenParaRev = paraRev.Contents.Length;

			// add 3 paragraphs of text to the "current" intro section
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para1Curr, "The body of text about A", Cache.DefaultVernWs);
			int lenPara1Curr = para1Curr.Contents.Length;

			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para2Curr, "More discourse on the second letter B", Cache.DefaultVernWs);
			int lenPara2Curr = para2Curr.Contents.Length;

			IScrTxtPara para3Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para3Curr, "Finally, some conclusions about the letter C", Cache.DefaultVernWs);
			int lenPara3Curr = para3Curr.Contents.Length;


			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(3, m_bookMerger.Differences.Count);

			Difference diff;

			// the first difference will be "A" added in current
			diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001000, diff.RefStart);
			Assert.AreEqual(01001000, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff.DiffType);
			Assert.AreEqual(para1Curr, diff.ParaCurr);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(lenPara1Curr, diff.IchLimCurr);
			Assert.AreEqual(paraRev, diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(0, diff.IchLimRev);

			// This difference will indicate a text difference in "B"
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001000, diff.RefStart);
			Assert.AreEqual(01001000, diff.RefEnd);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(para2Curr, diff.ParaCurr);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(4, diff.IchLimCurr);
			Assert.AreEqual(paraRev, diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(5, diff.IchLimRev);

			// the last difference will be "C" added to current
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001000, diff.RefStart);
			Assert.AreEqual(01001000, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff.DiffType);
			Assert.AreEqual(para3Curr, diff.ParaCurr);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(lenPara3Curr, diff.IchLimCurr);
			Assert.AreEqual(paraRev, diff.ParaRev);
			Assert.AreEqual(lenParaRev, diff.IchMinRev);
			Assert.AreEqual(lenParaRev, diff.IchLimRev);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences in intro paragraphs. This tests for proper correlation of
		/// text paragraphs.
		///
		/// Rev      Curr
		///           A
		///           B
		///  C        C
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_Intro_CtoABC()
		{
			// Set identical titles for the current and revised versions of Genesis.
			AddTitleToMockedBook(m_genesis, "Genesis");
			AddTitleToMockedBook(m_genesisRevision, "Genesis");

			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = AddSectionToMockedBook(m_genesis, true);
			AddSectionHeadParaToSection(sectionCur, "My aching head!", ScrStyleNames.SectionHead);

			IScrSection sectionRev = AddSectionToMockedBook(m_genesisRevision, true);
			AddSectionHeadParaToSection(sectionRev, "My aching head!", ScrStyleNames.SectionHead);

			// add 1 paragraph of text to the "revision" intro section
			IScrTxtPara paraRev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(paraRev, "Finally, a few conclusions about the letter C", Cache.DefaultVernWs);
			int lenParaRev = paraRev.Contents.Length;

			// add 3 paragraphs of text to the "current" intro section
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para1Curr, "The body of text about A", Cache.DefaultVernWs);
			int lenPara1Curr = para1Curr.Contents.Length;

			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para2Curr, "More discourse on the second letter B", Cache.DefaultVernWs);
			int lenPara2Curr = para2Curr.Contents.Length;

			IScrTxtPara para3Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para3Curr, "Finally, some conclusions about the letter C", Cache.DefaultVernWs);
			int lenPara3Curr = para3Curr.Contents.Length;


			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(3, m_bookMerger.Differences.Count);

			Difference diff;

			// the first difference will be "A" added to current
			diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001000, diff.RefStart);
			Assert.AreEqual(01001000, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff.DiffType);
			Assert.AreEqual(para1Curr, diff.ParaCurr);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(lenPara1Curr, diff.IchLimCurr);
			Assert.AreEqual(paraRev, diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(0, diff.IchLimRev);

			// This difference will be "B" added to current
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001000, diff.RefStart);
			Assert.AreEqual(01001000, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff.DiffType);
			Assert.AreEqual(para2Curr, diff.ParaCurr);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(lenPara2Curr, diff.IchLimCurr);
			Assert.AreEqual(paraRev, diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(0, diff.IchLimRev);

			// This difference will indicate a text difference in "C"
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001000, diff.RefStart);
			Assert.AreEqual(01001000, diff.RefEnd);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(para3Curr, diff.ParaCurr);
			Assert.AreEqual(9, diff.IchMinCurr);
			Assert.AreEqual(13, diff.IchLimCurr);
			Assert.AreEqual(paraRev, diff.ParaRev);
			Assert.AreEqual(9, diff.IchMinRev);
			Assert.AreEqual(14, diff.IchLimRev);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences in intro paragraphs. This tests for proper correlation of
		/// text paragraphs.
		///
		/// Rev      Curr
		///  A        J
		///  B ------ B  - these paragraph correlate
		///  C        L
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_Intro_ABCtoJBL()
		{
			// Set identical titles for the current and revised versions of Genesis.
			AddTitleToMockedBook(m_genesis, "Genesis");
			AddTitleToMockedBook(m_genesisRevision, "Genesis");

			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = AddSectionToMockedBook(m_genesis, true);
			AddSectionHeadParaToSection(sectionCur, "My aching head!", ScrStyleNames.SectionHead);

			IScrSection sectionRev = AddSectionToMockedBook(m_genesisRevision, true);
			AddSectionHeadParaToSection(sectionRev, "My aching head!", ScrStyleNames.SectionHead);

			// add 3 paragraphs of text to the "revision" intro section
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para1Rev, "A body of text about A", Cache.DefaultVernWs);
			int lenPara1Rev = para1Rev.Contents.Length;

			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para2Rev, "More discourse on the second letter B", Cache.DefaultVernWs);
			int lenPara2Rev = para2Rev.Contents.Length;

			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para3Rev, "Finally, some conclusions about the letter C", Cache.DefaultVernWs);
			int lenPara3Rev = para3Rev.Contents.Length;

			// add 3 paragraphs of text to the "current" intro section
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para1Curr, "I will do me own thing here, if you please (J)", Cache.DefaultVernWs);
			int lenPara1Curr = para1Curr.Contents.Length;

			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para2Curr, "Other discourse on the second letter B", Cache.DefaultVernWs);
			int lenPara2Curr = para2Curr.Contents.Length;

			IScrTxtPara para3Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para3Curr, "So, you think I will correlate to someone? (L)", Cache.DefaultVernWs);
			int lenPara3Curr = para3Curr.Contents.Length;


			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(5, m_bookMerger.Differences.Count);

			Difference diff;

			// This difference will be "J" added to current
			diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001000, diff.RefStart);
			Assert.AreEqual(01001000, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff.DiffType);
			Assert.AreEqual(para1Curr, diff.ParaCurr);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(lenPara1Curr, diff.IchLimCurr);
			Assert.AreEqual(para2Rev, diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(0, diff.IchLimRev);

			// This difference will be "A" deleted from current
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001000, diff.RefStart);
			Assert.AreEqual(01001000, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff.DiffType);
			Assert.AreEqual(para2Curr, diff.ParaCurr);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(0, diff.IchLimCurr);
			Assert.AreEqual(para1Rev, diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(lenPara1Rev, diff.IchLimRev);

			// This difference will be "B" compared to "B"
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001000, diff.RefStart);
			Assert.AreEqual(01001000, diff.RefEnd);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(para2Curr, diff.ParaCurr);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(5, diff.IchLimCurr);
			Assert.AreEqual(para2Rev, diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(4, diff.IchLimRev);

			// This difference will indicate "L" added to current
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001000, diff.RefStart);
			Assert.AreEqual(01001000, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff.DiffType);
			Assert.AreEqual(para3Curr, diff.ParaCurr);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(lenPara3Curr, diff.IchLimCurr);
			Assert.AreEqual(para3Rev, diff.ParaRev);
			Assert.AreEqual(lenPara3Rev, diff.IchMinRev);
			Assert.AreEqual(lenPara3Rev, diff.IchLimRev);

			// This difference will indicate "C" missing from current
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001000, diff.RefStart);
			Assert.AreEqual(01001000, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff.DiffType);
			Assert.AreEqual(para3Curr, diff.ParaCurr);
			Assert.AreEqual(lenPara3Curr, diff.IchMinCurr);
			Assert.AreEqual(lenPara3Curr, diff.IchLimCurr);
			Assert.AreEqual(para3Rev, diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(lenPara3Rev, diff.IchLimRev);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences in intro paragraphs. This tests for proper correlation of
		/// text paragraphs.
		///
		/// Rev      Curr
		///  A ------ A
		///  B        K
		///  C ------ C
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_Intro_ABCtoAKC()
		{
			// Set identical titles for the current and revised versions of Genesis.
			AddTitleToMockedBook(m_genesis, "Genesis");
			AddTitleToMockedBook(m_genesisRevision, "Genesis");

			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = AddSectionToMockedBook(m_genesis, true);
			AddSectionHeadParaToSection(sectionCur, "My aching head!", ScrStyleNames.SectionHead);

			IScrSection sectionRev = AddSectionToMockedBook(m_genesisRevision, true);
			AddSectionHeadParaToSection(sectionRev, "My aching head!", ScrStyleNames.SectionHead);

			// add 3 paragraphs of text to the "revision" intro section
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para1Rev, "A body of text about A", Cache.DefaultVernWs);
			int lenPara1Rev = para1Rev.Contents.Length;

			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para2Rev, "More discourse on the second letter B", Cache.DefaultVernWs);
			int lenPara2Rev = para2Rev.Contents.Length;

			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para3Rev, "Finally, some conclusions about the letter C", Cache.DefaultVernWs);
			int lenPara3Rev = para3Rev.Contents.Length;

			// add 3 paragraphs of text to the "current" intro section
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para1Curr, "A body of text about A", Cache.DefaultVernWs);
			int lenPara1Curr = para1Curr.Contents.Length;

			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para2Curr, "new stuff that doesn't match (K)", Cache.DefaultVernWs);
			int lenPara2Curr = para2Curr.Contents.Length;

			IScrTxtPara para3Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para3Curr, "Finally, some conclusions about the letter C", Cache.DefaultVernWs);
			int lenPara3Curr = para3Curr.Contents.Length;


			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			Difference diff;

			// This difference will be "K" added to current
			diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001000, diff.RefStart);
			Assert.AreEqual(01001000, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff.DiffType);
			Assert.AreEqual(para2Curr, diff.ParaCurr);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(lenPara2Curr, diff.IchLimCurr);
			Assert.AreEqual(para3Rev, diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(0, diff.IchLimRev);

			// This difference will be "B" deleted from current
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001000, diff.RefStart);
			Assert.AreEqual(01001000, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff.DiffType);
			Assert.AreEqual(para3Curr, diff.ParaCurr);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(0, diff.IchLimCurr);
			Assert.AreEqual(para2Rev, diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(lenPara2Rev, diff.IchLimRev);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Detect differences with a partially duplicated intro section (identical except for
		/// missing first section head para). Jira TE-9222
		///
		/// Rev                Curr
		///  Introduction       Introduction
		///  Intro Section H2   Intro Section H2
		///  Intro Para	        Intro Para
		///                     Intro Section H2
		///                     Intro Para
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_Intro_S1S2A_to_S1S2AS2A()
		{
			AddTitleToMockedBook(m_genesis, "Genesis");
			IScrSection section1Cur = AddSectionToMockedBook(m_genesis, true);
			AddSectionHeadParaToSection(section1Cur, "Introduction", ScrStyleNames.IntroSectionHead);
			AddSectionHeadParaToSection(section1Cur, "Stuff", ScrStyleNames.IntroSectionHead);
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(section1Cur, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para1Cur, "One paragraph.", Cache.DefaultVernWs);
			IScrSection section2Cur = AddSectionToMockedBook(m_genesis, true);
			AddSectionHeadParaToSection(section2Cur, "Stuff", ScrStyleNames.IntroSectionHead);
			IScrTxtPara para2Cur = AddParaToMockedSectionContent(section2Cur, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para2Cur, "One paragraph.", Cache.DefaultVernWs);

			// Create a section for both the current version of Genesis and the stored revision.

			AddTitleToMockedBook(m_genesisRevision, "Genesis");
			IScrSection section1Rev = AddSectionToMockedBook(m_genesisRevision, true);
			AddSectionHeadParaToSection(section1Rev, "Introduction", ScrStyleNames.IntroSectionHead);
			AddSectionHeadParaToSection(section1Rev, "Stuff", ScrStyleNames.IntroSectionHead);
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para1Rev, "One paragraph.", Cache.DefaultVernWs);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// The difference will be section added to current
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff, 01001000, 01001000, DifferenceType.SectionAddedToCurrent,
				section2Cur, para1Rev, para1Rev.Contents.Length);
		}
		#endregion

		#region DetectDifferences for Missing/Added Intro Section
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when entire sections are
		/// added.
		/// Sections:
		/// Rev      Curr
		///   A       A
		///           B
		///           C
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_Intro_SectionsAddedInCurrent()
		{
			//TODO: TE-2898 should update this test to be very similar to DetectDifferences_SectionsAddedInCurrent()
			//  including the Revision having only a B section.

			// Set up the curr sections
			IScrSection section1Curr = CreateIntroSection(m_genesis, "Section Eins");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para1Curr, "A body of text about A", Cache.DefaultVernWs);

			//IScrSection section2Curr = CreateIntroSection(m_genesis, "Section Zwei");
			//IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.IntroParagraph);
			//AddRunToMockedPara(para2Curr, "More discourse on the second letter B", Cache.DefaultVernWs);

			IScrSection section3Curr = CreateIntroSection(m_genesis, "Section Drei");
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(section3Curr, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para3Curr, "Finally, some conclusions about the letter C", Cache.DefaultVernWs);

			// Set up the revision section
			IScrSection sectionRev = CreateIntroSection(m_genesisRevision, "Section Eins");
			IScrTxtPara paraRev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(paraRev, "A body of text about A", Cache.DefaultVernWs);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// Section C added to the current
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff, 01001000, 01001000, DifferenceType.SectionAddedToCurrent,
				section3Curr, paraRev, paraRev.Contents.Length);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when entire sections are
		/// missing.
		/// Sections:
		/// Rev      Curr
		///   A       A
		///   B
		///   C
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_Intro_SectionsMissingInCurrent()
		{
			//TODO: TE-2898 should update this test to be very similar to DetectDifferences_SectionsAddedInCurrent()
			//  including the Revision having only a B section.

			// Set up the curr sections
			IScrSection section1Curr = CreateIntroSection(m_genesis, "Section Eins");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para1Curr, "A body of text about A", Cache.DefaultVernWs);

			//IScrSection section2Curr = CreateIntroSection(m_genesis, "Section Zwei");
			//IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.IntroParagraph);
			//AddRunToMockedPara(para2Curr, "More discourse on the second letter B", Cache.DefaultVernWs);

			//IScrSection section3Curr = CreateIntroSection(m_genesis, "Section Drei");
			//IScrTxtPara para3Curr = AddParaToMockedSectionContent(section3Curr, ScrStyleNames.IntroParagraph);
			//AddRunToMockedPara(para3Curr, "Finally, some conclusions about the letter C", Cache.DefaultVernWs);

			// Set up the revision section
			IScrSection section1Rev = CreateIntroSection(m_genesisRevision, "Section Eins");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para1Rev, "A body of text about A", Cache.DefaultVernWs);

			IScrSection section2Rev = CreateIntroSection(m_genesisRevision, "Section Zwei");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para2Rev, "A body of text about A", Cache.DefaultVernWs);

			IScrSection section3Rev = CreateIntroSection(m_genesisRevision, "Section Drei");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(section3Rev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para3Rev, "A body of text about A", Cache.DefaultVernWs);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// Sections B & C missing in current
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff, 01001000, 01001000, DifferenceType.SectionMissingInCurrent,
				new IScrSection[] { section2Rev, section3Rev },
				para1Curr, para1Curr.Contents.Length);
		}
		#endregion

		#region DetectDifferences for Missing/Added Scripture Sections
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when entire sections are
		/// added
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_SectionsAddedInCurrentFollowingVerseBridge()
		{
			// Set up the first current section
			IScrSection section1Curr = CreateSection(m_genesis, "Section One");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.VerseNumber);

			// Set up the second current section
			IScrSection section2Curr = CreateSection(m_genesis, "Section Two");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "2-3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "Hello there", Cache.DefaultVernWs);

			// Set up the third current section
			IScrSection section3Curr = CreateSection(m_genesis, string.Empty);
			AddParaToMockedSectionContent(section3Curr, ScrStyleNames.NormalParagraph);

			// Set up the first revision section
			IScrSection section1Rev = CreateSection(m_genesisRevision, "Section One");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.VerseNumber);

			// Set up the second revision section
			IScrSection section2Rev = CreateSection(m_genesisRevision, "Section Two");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "2-3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "Hello there", Cache.DefaultVernWs);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// If we haven't crashed by now, then the test was a success. See TE-6705.
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when entire sections are
		/// added
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_SectionsAddedInCurrent()
		{
			// Set up the curr sections
			IScrSection section1Curr = CreateSection(m_genesis, "Section Eins");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.VerseNumber);

			IScrSection section2Curr = CreateSection(m_genesis, "Section Zwei");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "2", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "Hello there", Cache.DefaultVernWs);

			IScrSection section3Curr = CreateSection(m_genesis, "Section Drei");
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(section3Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Curr, "3", ScrStyleNames.VerseNumber);

			// Set up the revision section
			IScrSection sectionRev = CreateSection(m_genesisRevision, "Section Zwei");
			IScrTxtPara paraRev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraRev, "2", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(paraRev, "Hi there", Cache.DefaultVernWs);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(3, m_bookMerger.Differences.Count);

			// section one added to current
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff, 01001001, 01001001, DifferenceType.SectionAddedToCurrent,
				section1Curr, (IScrTxtPara)sectionRev.HeadingOA[0], 0);

			// section two has a text difference
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001002, diff.RefStart);
			Assert.AreEqual(01001002, diff.RefEnd);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(para2Curr, diff.ParaCurr);
			Assert.AreEqual(2, diff.IchMinCurr);
			Assert.AreEqual(6, diff.IchLimCurr);
			Assert.AreEqual(paraRev, diff.ParaRev);
			Assert.AreEqual(2, diff.IchMinRev);
			Assert.AreEqual(3, diff.IchLimRev);

			// Missing three is added to current
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifySectionDiff(diff, 01001003, 01001003, DifferenceType.SectionAddedToCurrent,
				section3Curr, paraRev, paraRev.Contents.Length);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when consecutive entire
		/// sections are added.
		/// </summary>
		/// <remarks> Here is a diagram of which sections will correlate.
		///    Revision      Current
		///					 Gen 1:1
		///					 Gen 1:2
		///		Gen 1:3		 Gen 1:3
		///					 Gen 1:4
		///					 Gen 1:5
		///					 Gen 1:6
		/// </remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_SectionsAddedInCurrent_Consecutive()
		{
			// Set up the curr sections
			IScrSection section1Curr = CreateSection(m_genesis, "Section Eins");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.VerseNumber);

			IScrSection section2Curr = CreateSection(m_genesis, "Section Zwei");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "2", ScrStyleNames.VerseNumber);

			IScrSection section3Curr = CreateSection(m_genesis, "Section Drei");
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(section3Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Curr, "3", ScrStyleNames.VerseNumber);

			IScrSection section4Curr = CreateSection(m_genesis, "Section Vier");
			IScrTxtPara para4Curr = AddParaToMockedSectionContent(section4Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para4Curr, "4", ScrStyleNames.VerseNumber);

			IScrSection section5Curr = CreateSection(m_genesis, "Section Fnf");
			IScrTxtPara para5Curr = AddParaToMockedSectionContent(section5Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para5Curr, "5", ScrStyleNames.VerseNumber);

			IScrSection section6Curr = CreateSection(m_genesis, "Section Sechs");
			IScrTxtPara para6Curr = AddParaToMockedSectionContent(section6Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para6Curr, "6", ScrStyleNames.VerseNumber);

			// Set up the revision section
			IScrSection sectionRev = CreateSection(m_genesisRevision, "Section Drei");
			IScrTxtPara paraRev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraRev, "3", ScrStyleNames.VerseNumber);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// sections 1&2 added to current
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff, 01001001, 01001002, DifferenceType.SectionAddedToCurrent,
				new IScrSection[] { section1Curr, section2Curr },(IScrTxtPara)sectionRev.HeadingOA[0], 0);

			// sections 4, 5, & 6 added to current
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifySectionDiff(diff, 01001004, 01001006, DifferenceType.SectionAddedToCurrent,
				new IScrSection[] { section4Curr, section5Curr, section6Curr },
				paraRev, paraRev.Contents.Length);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when entire sections are
		/// missing
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_SectionMissingInCurrent()
		{
			// Create the rev sections
			IScrSection section1Rev = CreateSection(m_genesisRevision, "Section Eins");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.VerseNumber);

			IScrSection section2Rev = CreateSection(m_genesisRevision, "Section Zwei");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "2", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "Hello there", Cache.DefaultVernWs);

			IScrSection section3Rev = CreateSection(m_genesisRevision, "Section Drei");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(section3Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Rev, "3", ScrStyleNames.VerseNumber);

			// Create the curr section
			IScrSection sectionCurr = CreateSection(m_genesis, "Section Zwei");
			IScrTxtPara paraCurr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraCurr, "2", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(paraCurr, "Hi there", Cache.DefaultVernWs);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(3, m_bookMerger.Differences.Count);

			// rev section one missing in current
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff, 01001001, 01001001, DifferenceType.SectionMissingInCurrent,
				section1Rev, (IScrTxtPara)sectionCurr.HeadingOA[0], 0);

			// section two has a text difference
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(01001002, diff.RefStart);
			Assert.AreEqual(01001002, diff.RefEnd);
			Assert.AreEqual(paraCurr, diff.ParaCurr);
			Assert.AreEqual(2, diff.IchMinCurr);
			Assert.AreEqual(3, diff.IchLimCurr);
			Assert.AreEqual(para2Rev, diff.ParaRev);
			Assert.AreEqual(2, diff.IchMinRev);
			Assert.AreEqual(6, diff.IchLimRev);

			// section three is missing in current
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifySectionDiff(diff, 01001003, 01001003, DifferenceType.SectionMissingInCurrent,
				section3Rev, paraCurr, paraCurr.Contents.Length);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when consecutive entire
		/// sections are missing.
		/// </summary>
		/// <remarks> Here is a diagram of which sections will correlate.
		///    Revision      Current
		///		Gen 1:1
		///		Gen 1:2
		///		Gen 1:3
		///		Gen 1:4		 Gen 1:4
		///		Gen 1:5
		///		Gen 1:6
		/// </remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_SectionMissingInCurrent_Consecutive()
		{
			// Create the rev sections
			IScrSection section1Rev = CreateSection(m_genesisRevision, "Section Eins");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.VerseNumber);

			IScrSection section2Rev = CreateSection(m_genesisRevision, "Section Zwei");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "2", ScrStyleNames.VerseNumber);

			IScrSection section3Rev = CreateSection(m_genesisRevision, "Section Drei");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(section3Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Rev, "3", ScrStyleNames.VerseNumber);

			IScrSection section4Rev = CreateSection(m_genesisRevision, "Section Vier");
			IScrTxtPara para4Rev = AddParaToMockedSectionContent(section4Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para4Rev, "4", ScrStyleNames.VerseNumber);

			IScrSection section5Rev = CreateSection(m_genesisRevision, "Section Fnf");
			IScrTxtPara para5Rev = AddParaToMockedSectionContent(section5Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para5Rev, "5", ScrStyleNames.VerseNumber);

			IScrSection section6Rev = CreateSection(m_genesisRevision, "Section Sechs");
			IScrTxtPara para6Rev = AddParaToMockedSectionContent(section6Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para6Rev, "6", ScrStyleNames.VerseNumber);

			// Create the curr section
			IScrSection sectionCurr = CreateSection(m_genesis, "Section Vier");
			IScrTxtPara paraCurr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraCurr, "4", ScrStyleNames.VerseNumber);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// rev sections 1,2,&3 missing in current
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff, 01001001, 01001003, DifferenceType.SectionMissingInCurrent,
				new IScrSection[] { section1Rev, section2Rev, section3Rev },
				(IScrTxtPara)sectionCurr.HeadingOA[0], 0);

			// rev sections 5&6 missing in current
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifySectionDiff(diff, 01001005, 01001006, DifferenceType.SectionMissingInCurrent,
				new IScrSection[] { section5Rev, section6Rev },
				paraCurr, paraCurr.Contents.Length);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Tests the DetectDifferences method for sections that do not match, and are all
		/// "added" in the Current and Revision.
		/// </summary>
		/// <remarks> Here is a diagram of which sections will match.
		///    Revision          Current
		///						 0 Gen 1:2-3
		///		0 Gen 1:24-25
		///		1 Gen 2:10
		///						 1 Gen 3:1
		/// </remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_SectionsAllAddedOrMissing()
		{
			// Build the Current section 0
			IScrSection section0Curr = CreateSection(m_genesis, "My Beautiful Section");
			IScrTxtPara para0Curr = AddParaToMockedSectionContent(section0Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para0Curr, "2", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para0Curr, "Google at my verse two", Cache.DefaultVernWs);
			AddRunToMockedPara(para0Curr, "3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para0Curr, "Google at my verse three", Cache.DefaultVernWs);

			// Build the Current section 1
			IScrSection section1Curr = CreateSection(m_genesis, "My Beautiful Section");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "3", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "chapter three verse one", Cache.DefaultVernWs);

			// Build the Revision section 0
			IScrSection section0Rev = CreateSection(m_genesisRevision, "My Beautiful Section");
			IScrTxtPara para0Rev = AddParaToMockedSectionContent(section0Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para0Rev, "24", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para0Rev, "Observe the text of verse twenty-four", Cache.DefaultVernWs);
			AddRunToMockedPara(para0Rev, "25", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para0Rev, "Look at the text of verse twenty-five", Cache.DefaultVernWs);

			// Build the Revision section 1
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My Beautiful Section");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "2", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Rev, "10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "verse ten", Cache.DefaultVernWs);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(3, m_bookMerger.Differences.Count);

			// Verify diff1: the curr section0 is "added to current"
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff1, 01001002, 01001003, DifferenceType.SectionAddedToCurrent,
				section0Curr, (IScrTxtPara)section0Rev.HeadingOA[0], 0);

			// Verify diff 2: the Rev sections 0 and 1 are "missing in current"
			Difference diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifySectionDiff(diff, 01001024, 01002010, DifferenceType.SectionMissingInCurrent,
				new IScrSection[] { section0Rev, section1Rev }, (IScrTxtPara)section1Curr.HeadingOA[0], 0);

			// Verify diff 3: the curr section1 is "added to current"
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifySectionDiff(diff, 01003001, 01003001, DifferenceType.SectionAddedToCurrent,
				section1Curr, para1Rev, para1Rev.Contents.Length);
		}
		#endregion

		#region DetectDifferences in Split/Combined Scripture Sections
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the DetectDifferences method when a section head is added in the Current
		/// (Scripture sections in Current are split portions of one section in the Revision).
		///
		/// Revision sections         Current sections
		///   verses 1-4			    verse 1
		///					            verse 2
		///								verse 3
		///								verse 4
		/// </summary>
		/// <remarks>regression test for TE-4226</remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_SectionSplitInCurr()
		{
			// Set up the four curr sections
			IScrSection section1Curr = CreateSection(m_genesis, "Section Eins");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "eins ", Cache.DefaultVernWs);

			IScrSection section2Curr = CreateSection(m_genesis, "Section Zwei");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "2", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "zwei ", Cache.DefaultVernWs);

			IScrSection section3Curr = CreateSection(m_genesis, "Section Drei");
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(section3Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Curr, "3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3Curr, "drei ", Cache.DefaultVernWs);

			IScrSection section4Curr = CreateSection(m_genesis, "Section Vier");
			IScrTxtPara para4Curr = AddParaToMockedSectionContent(section4Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para4Curr, "4", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para4Curr, "vier ", Cache.DefaultVernWs);

			// Set up the revision section
			IScrSection section1Rev = CreateSection(m_genesisRevision, "Section Eins");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "eins ", Cache.DefaultVernWs);
			int ichV2Rev = para1Rev.Contents.Length;
			AddRunToMockedPara(para1Rev, "2", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "zwei ", Cache.DefaultVernWs);
			int ichV3Rev = para1Rev.Contents.Length;
			AddRunToMockedPara(para1Rev, "3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "drei ", Cache.DefaultVernWs);
			int ichV4Rev = para1Rev.Contents.Length;
			AddRunToMockedPara(para1Rev, "4", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "vier ", Cache.DefaultVernWs);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(3, m_bookMerger.Differences.Count);

			// We expect section 2 heading is added in Current
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff, 01001002, 01001002, DifferenceType.SectionHeadAddedToCurrent,
				section2Curr, para1Rev, ichV2Rev);

			// We expect section 3 heading is added in Current
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifySectionDiff(diff, 01001003, 01001003, DifferenceType.SectionHeadAddedToCurrent,
				section3Curr, para1Rev, ichV3Rev);

			// We expect section 4 heading is added in Current
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifySectionDiff(diff, 01001004, 01001004, DifferenceType.SectionHeadAddedToCurrent,
				section4Curr, para1Rev, ichV4Rev);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the DetectDifferences method when a section head is missing in the Current
		/// (Scripture section in Current is a combination of two in the Revision).
		///
		/// Revision sections         Current sections
		///   verse 2                   verse 2
		///	  verse 3					verses 3-4 (combined section)
		///	  verse 4
		///	  verse 5					verse 5
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_SectionsCombinedInCurr()
		{
			// Set up the four curr sections
			IScrSection section1Curr = CreateSection(m_genesis, "Section Zwei");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "2", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "zwei ", Cache.DefaultVernWs);

			IScrSection section2Curr = CreateSection(m_genesis, "Section Drei");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "drei ", Cache.DefaultVernWs);
			int ichV4Curr = para2Curr.Contents.Length;
			AddRunToMockedPara(para2Curr, "4", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "vier ", Cache.DefaultVernWs);

			IScrSection section3Curr = CreateSection(m_genesis, "Section Fünf");
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(section3Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Curr, "5", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3Curr, "fünf ", Cache.DefaultVernWs);

			// Set up the revision sections
			IScrSection section1Rev = CreateSection(m_genesisRevision, "Section Zwei");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "2", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "zwei ", Cache.DefaultVernWs);

			IScrSection section2Rev = CreateSection(m_genesisRevision, "Section Drei");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "drei ", Cache.DefaultVernWs);

			IScrSection section3Rev = CreateSection(m_genesisRevision, "Section Vier");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(section3Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Rev, "4", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3Rev, "vier ", Cache.DefaultVernWs);

			IScrSection section4Rev = CreateSection(m_genesisRevision, "Section Fünf");
			IScrTxtPara para4Rev = AddParaToMockedSectionContent(section4Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para4Rev, "5", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para4Rev, "fünf ", Cache.DefaultVernWs);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// We expect the head for section 3 to be missing in the current
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff, 01001004, 01001004, DifferenceType.SectionHeadMissingInCurrent,
				section3Rev, para2Curr, ichV4Curr);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the DetectDifferences method when a section head is added in the Current
		/// (Scripture sections in Current are split portions of one section in the Revision),
		/// when the uncorrelated orphan section head is the first section in the cluster.
		/// This special case can happen only when the user added verses to the beginning of the
		/// orphan section (or deleted them in the combined section).
		///
		/// Revision sections         Current sections
		///  Section Zilch			   Section Zilch (verses 1-2 form their own section overlap cluster)
		///   verses 1-2				verses 1-2
		///  Section Ek	(combined)	   Section Uno (the orphan that is first in cluster; vs 3,9 added)
		///   verses 10,12,20		    verses 3,9,10
		///							   Section Dos
		///					            verses 12-20
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_SectionSplitInCurr_AddedHeadIsFirst()
		{
			// Set up the three curr sections
			IScrSection section0Curr = CreateSection(m_genesis, "Section Zilch");
			IScrTxtPara para0Curr = AddParaToMockedSectionContent(section0Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para0Curr, "1-2", ScrStyleNames.VerseNumber);

			IScrSection section1Curr = CreateSection(m_genesis, "Section Uno");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "tres ", Cache.DefaultVernWs);
			AddRunToMockedPara(para1Curr, "9", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "nueve ", Cache.DefaultVernWs);
			int ichV10Curr = para1Curr.Contents.Length;
			AddRunToMockedPara(para1Curr, "10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "diez ", Cache.DefaultVernWs);

			IScrSection section2Curr = CreateSection(m_genesis, "Section Dos");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "12", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "doce ", Cache.DefaultVernWs);
			AddRunToMockedPara(para2Curr, "20", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "vente ", Cache.DefaultVernWs);

			// Set up two revision sections
			IScrSection section0Rev = CreateSection(m_genesisRevision, "Section Zilch");
			IScrTxtPara para0Rev = AddParaToMockedSectionContent(section0Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para0Rev, "1-2", ScrStyleNames.VerseNumber);

			IScrSection section1Rev = CreateSection(m_genesisRevision, "Section Ek");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "diez ", Cache.DefaultVernWs);
			int ichV12Rev = para1Rev.Contents.Length;
			AddRunToMockedPara(para1Rev, "12", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "doce ", Cache.DefaultVernWs);
			int ichV20Rev = para1Rev.Contents.Length;
			AddRunToMockedPara(para1Rev, "20", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "vente ", Cache.DefaultVernWs);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// We expect section 1 added in Current, but with verse 10 moved into it
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff, 01001003, 01001010, DifferenceType.SectionAddedToCurrent,
				section1Curr, para1Rev, 0); // destination IP various values could be okay
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0,
				01001010, 01001010, DifferenceType.VerseMoved,
				para1Curr, ichV10Curr, para1Curr.Contents.Length,
				para1Rev, 0, ichV12Rev);
			Assert.AreEqual(para2Curr, diff.SubDiffsForParas[0].ParaMovedFrom);
			Assert.AreEqual(0, diff.SubDiffsForParas[0].IchMovedFrom);

			// Section head text different (S2Curr <> S1Rev) at V10 in Rev
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, 01001010, DifferenceType.TextDifference,
				(IScrTxtPara)section2Curr.HeadingOA[0], 8, 11,
				(IScrTxtPara)section1Rev.HeadingOA[0], 8, 10);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the DetectDifferences method when a section head is added in the Current
		/// (Scripture sections in Current are split portions of one section in the Revision),
		/// when the uncorrelated orphan section head is the first section in the cluster.
		/// In this scenario, the orphan section has separate paragraphs for each added and
		/// moved verse.
		///
		/// Revision sections         Current sections
		///  Section Ek	(combined)	   Section Uno (the orphan that is first in cluster; vs 3,9 added)
		///   vs 10,12,20			    verse 3 para
		///									  9 para
		///									 10 para
		///							   Section Dos
		///					            verses 12-20
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_SectionSplitInCurr_AddedHeadIsFirst_MultiParas()
		{
			// Set up the two curr sections
			IScrSection section1Curr = CreateSection(m_genesis, "Section Uno");
			IScrTxtPara para1aCurr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1aCurr, "3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1aCurr, "tres ", Cache.DefaultVernWs);
			IScrTxtPara para1bCurr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1bCurr, "9", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1bCurr, "nueve ", Cache.DefaultVernWs);
			IScrTxtPara para1cCurr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1cCurr, "10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1cCurr, "diez ", Cache.DefaultVernWs);

			IScrSection section2Curr = CreateSection(m_genesis, "Section Dos");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "12", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "doce ", Cache.DefaultVernWs);
			AddRunToMockedPara(para2Curr, "20", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "vente ", Cache.DefaultVernWs);

			// Set up one revision section
			IScrSection section1Rev = CreateSection(m_genesisRevision, "Section Ek");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "diez ", Cache.DefaultVernWs);
			int ichV12Rev = para1Rev.Contents.Length;
			AddRunToMockedPara(para1Rev, "12", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "doce ", Cache.DefaultVernWs);
			int ichV20Rev = para1Rev.Contents.Length;
			AddRunToMockedPara(para1Rev, "20", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "vente ", Cache.DefaultVernWs);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// We expect section 1 added in Current, but with verse 10 moved into it in its own para
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff, 01001003, 01001010, DifferenceType.SectionAddedToCurrent,
				section1Curr, para1Rev, 0); // destination IP various values could be okay
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0,
				01001010, 01001010, DifferenceType.VerseMoved,
				para1cCurr, 0, para1cCurr.Contents.Length,
				para1Rev, 0, ichV12Rev);
			Assert.AreEqual(para2Curr, diff.SubDiffsForParas[0].ParaMovedFrom);
			Assert.AreEqual(0, diff.SubDiffsForParas[0].IchMovedFrom);

			// Section head text different (S2Curr <> S1Rev) at V10 in Rev
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, 01001010, DifferenceType.TextDifference, //no firm requirement on section head ref
				(IScrTxtPara)section2Curr.HeadingOA[0], 8, 11,
				(IScrTxtPara)section1Rev.HeadingOA[0], 8, 10);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences
		/// method when a Scripture section in the Current is a combination of two in the Revision,
		/// when the uncorrelated orphan section head is the first section in the cluster.
		/// This special case can happen only when the user deleted verses at the beginning of
		/// the combined section (or added them to the orphan).
		///
		/// Revision sections         Current sections
		///  Section Zilch			   Section Zilch (verses 1-2 form their own section overlap cluster)
		///   verses 1-2				verses 1-2
		///	 Section Uno (the orphan)  Section Ek (combined section; vs 3,9 were removed)
		///	  Ch2, vs 3,9,10,11			Ch2, vs 10,11,12,20
		///  Section Dos
		///	  verses 12,20
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_SectionsCombinedInCurr_AddedHeadIsFirst()
		{
			// Set up the two Current sections
			IScrSection section0Curr = CreateSection(m_genesis, "Section Zilch");
			IScrTxtPara para0Curr = AddParaToMockedSectionContent(section0Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para0Curr, "1-2", ScrStyleNames.VerseNumber);

			IScrSection section1Curr = CreateSection(m_genesis, "Section Ek");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "2", ScrStyleNames.ChapterNumber);
			int ichV10Curr = para1Curr.Contents.Length;
			AddRunToMockedPara(para1Curr, "10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, " ", Cache.DefaultVernWs); //"diez" was deleted
			int ichV11Curr = para1Curr.Contents.Length;
			AddRunToMockedPara(para1Curr, "11", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "QQonce ", Cache.DefaultVernWs);
			int ichV12Curr = para1Curr.Contents.Length;
			AddRunToMockedPara(para1Curr, "12", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "XXdoce ", Cache.DefaultVernWs);
			AddRunToMockedPara(para1Curr, "20", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "vente ", Cache.DefaultVernWs);

			// Set up three revision sections
			IScrSection section0Rev = CreateSection(m_genesisRevision, "Section Zilch");
			IScrTxtPara para0Rev = AddParaToMockedSectionContent(section0Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para0Rev, "1-2", ScrStyleNames.VerseNumber);

			IScrSection section1Rev = CreateSection(m_genesisRevision, "Section Uno");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "2", ScrStyleNames.ChapterNumber);
			int ichV3Rev = para1Rev.Contents.Length;
			AddRunToMockedPara(para1Rev, "3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "tres ", Cache.DefaultVernWs);
			int ichV9Rev = para1Rev.Contents.Length;
			AddRunToMockedPara(para1Rev, "9", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "nueve ", Cache.DefaultVernWs);
			int ichV10Rev = para1Rev.Contents.Length;
			AddRunToMockedPara(para1Rev, "10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "diez ", Cache.DefaultVernWs);
			int ichV11Rev = para1Rev.Contents.Length;
			AddRunToMockedPara(para1Rev, "11", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "once ", Cache.DefaultVernWs);

			IScrSection section2Rev = CreateSection(m_genesisRevision, "Section Uno");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "12", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "doce ", Cache.DefaultVernWs);
			int ichV20Rev = para2Rev.Contents.Length;
			AddRunToMockedPara(para2Rev, "20", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "vente ", Cache.DefaultVernWs);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

	//TODO: TE-4768 The following is the not a logical sequence of diffs for the user,
	// and it leads to incorrect Reverts. But for now, verify the diffs as shown.
	// Work on TE-4768 will change these diffs and their order.
			// Verify the differences found
			Assert.AreEqual(6, m_bookMerger.Differences.Count);

			// Section head text different (S2Rev <> S1Curr) at V10 in Curr
			Difference diff0 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff0, 01002010, DifferenceType.TextDifference, //no firm reqmt for verse ref of section head
				(IScrTxtPara)section1Curr.HeadingOA[0], 8, 10,
				(IScrTxtPara)section2Rev.HeadingOA[0], 8, 11);

			// We expect section head Uno missing in Current
			Difference diff1 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifySectionDiff(diff1, 01002003, 01002003, DifferenceType.SectionHeadMissingInCurrent,
				section1Rev, para1Curr, 0);
			// TE-4768: normally the section diff should be the first diff

			// verses 3,9 missing in Current
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff2, 01002003, 01002009, DifferenceType.VerseMissingInCurrent,
				para1Curr, ichV10Curr, ichV10Curr,
				para1Rev, ichV3Rev, ichV10Rev);

			// verses 10,11 moved

			// text difference in verse 10 - "diez" was deleted in current
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff3, 01002010, DifferenceType.TextDifference,
				para1Curr, ichV10Curr + 2,
				para1Rev, ichV10Rev + 2, ichV10Rev + 6);

			// text difference in verse 11 - "QQ was added to current
			Difference diff4 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff4, 01002011, DifferenceType.TextDifference,
				para1Curr, ichV11Curr + 2, ichV11Curr + 4,
				para1Rev, ichV11Rev + 2);

			// text difference in verse 12 - "ZZ" was added to current
			Difference diff5 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff5, 01002012, DifferenceType.TextDifference,
				para1Curr, ichV12Curr + 2, ichV12Curr + 4,
				para2Rev, 2);
		}
		#endregion

		#region DetectDifferences in Multiple Overlapped Scripture Sections
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences
		/// method when a verse has been moved from the beginning of a section to the end of the
		/// prior section.
		/// </summary>
		/// <remarks>Here is a readable version of the test data we will construct. The current
		/// has verse 3 moved to the first section...
		///
		/// *********************** Current (newer)******************************
		/// My aching head!
		///     1 In the beginning, God created the heavens and the earth. 2 The earth was
		/// formless and void... 3 And God said, 'Let there be light...'
		/// My other aching head!
		///     4 And God saw that it was good. 5 God called the light 'day' and the darkness
		/// 'night'.
		///
		/// *********************** Revision (original)******************************
		/// My aching head!
		///     1 In the beginning, God created the heavens and the earth. 2 The earth was
		/// formless and void...
		/// Section Head 2
		///     3 And God said, 'Let there be light...' 4 And God saw that it was good. 5 God
		/// called the light 'day' and the darkness 'night'.
		/// </remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		[Ignore("TE-4704: We need to detect the moved verses correctly")]
		public void DetectDifferences_1VerseMovedToPriorSection()
		{
			// Create the current sections
			IScrSection section1Curr = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 0, 1, "In the beginning, God created the heavens and the earth. ");
			AddVerse(para1Curr, 0, 2, "The earth was formless and void... ");
			int ichV3Curr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 3, "And God said, 'Let there be light...' ");

			IScrSection section2Curr = CreateSection(m_genesis, "Section Head 2");
			IScrTxtPara headingPara2Curr = (IScrTxtPara)section2Curr.HeadingOA[0];
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 4, "And God saw that it was good. ");
			AddVerse(para2Curr, 0, 5, "God called the light 'day' and the darkness 'night'.");

			// Create the revision sections
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 0, 1, "In the beginning, God created the heavens and the earth. ");
			AddVerse(para1Rev, 0, 2, "The earth was formless and void... ");

			IScrSection section2Rev = CreateSection(m_genesisRevision, "Section Head 2");
			IScrTxtPara headingPara2Rev = (IScrTxtPara)section2Rev.HeadingOA[0];
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 3, "And God said, 'Let there be light...' ");
			int ichV4Rev = para2Rev.Contents.Length;
			AddVerse(para2Rev, 0, 4, "And God saw that it was good. ");
			AddVerse(para2Rev, 0, 5, "God called the light 'day' and the darkness 'night'.");

			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis

			// Check the number of differences
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// Verse 3 in the Revision section 2 is moved to first section in the Current
			Difference diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001003, diff.RefStart);
			Assert.AreEqual(01001003, diff.RefEnd);
			Assert.AreEqual(DifferenceType.VerseMoved, diff.DiffType);
			Assert.AreEqual(para1Curr, diff.ParaCurr);
			Assert.AreEqual(ichV3Curr, diff.IchMinCurr);
			Assert.AreEqual(para1Curr.Contents.Length, diff.IchLimCurr);
			Assert.AreEqual(para2Rev, diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(ichV4Rev, diff.IchLimRev);
			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Tests DetectDifferences when two verses have been moved from the end of a
		/// section to the beginning of the next section.
		/// </summary>
		/// <remarks>Here is an outline of the test data we will construct. The current has
		/// verses 13 and 14 moved to the second section.
		///
		/// *********************** Current ******************************
		/// section one (1-12)
		///     1 One.
		///     12 Twelve.
		/// section two (13-15)
		///     13 Thirteen.
		///     14 Fourteen.
		///     15 Fifteen.
		///
		/// *********************** Revision ******************************
		/// section one (1-14)
		///     1 One.
		///     12 Twelve.
		///     13 Thirteen.
		///     14 Fourteen.
		/// section two (15)
		///     15 Fifteen.
		/// </remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		[Ignore("TE-4704: We need to detect the moved verses correctly")]
		public void DetectDifferences_2VersesMovedToNextSection()
		{
			// Set up the curr sections
			IScrSection section1Curr = CreateSection(m_genesis, "section one");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 0, 1, "One. ");
			AddVerse(para1Curr, 0, 12, "Twelve. ");

			IScrSection section2Curr = CreateSection(m_genesis, "section two");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 13, "Thirteen. ");
			AddVerse(para2Curr, 0, 14, "Fourteen. ");
			int ichV15Curr = para2Curr.Contents.Length;
			AddVerse(para2Curr, 0, 15, "Fifteen. ");

			// Set up the revision sections
			IScrSection section1Rev = CreateSection(m_genesisRevision, "section one");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 0, 1, "One. ");
			AddVerse(para1Rev, 0, 12, "Twelve. ");
			int ichV13Rev = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 13, "Thirteen. ");
			AddVerse(para1Rev, 0, 14, "Fourteen. ");

			IScrSection section2Rev = CreateSection(m_genesisRevision, "section two");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 15, "Fifteen. ");

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			Difference diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001013, diff.RefStart);
			Assert.AreEqual(01001014, diff.RefEnd);
			Assert.AreEqual(DifferenceType.VerseMoved, diff.DiffType);
			Assert.AreEqual(para2Curr, diff.ParaCurr);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(ichV15Curr, diff.IchLimCurr);
			Assert.AreEqual(para1Rev, diff.ParaRev);
			Assert.AreEqual(ichV13Rev, diff.IchMinRev);
			Assert.AreEqual(para1Rev.Contents.Length, diff.IchLimRev);
			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Tests DetectDifferences when two verses from the end of a first section and a verse
		/// from the beginning of an end section are combined to create a middle section
		/// </summary>
		/// <remarks>Here is an outline of the test data we will construct. The current has
		/// verses 13 and 14 moved from the first section and verse 15 from the second section
		/// have been merged to create a section.
		///
		/// *********************** Current ******************************
		/// section one (1-12)
		///     1 One. 12 Twelve.
		/// section two (13-15)
		///     13 Thirteen. 14 Fourteen. 15 Verse Fifteen.
		/// section three (16-18)
		///     16 Sixteen. 17 Seventeen. 18 Eighteen.
		///
		/// *********************** Revision ******************************
		/// section one (1-14)
		///     1 One. 12 Twelve. 13 Thirteen. 14 Fourteen.
		/// section two (15-17)
		///     15 Verse Fifteen. 16 Sixteen. 17 Seventeen.
		/// </remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_SectionVersesSplitBetweenSections()
		{
			// Set up the curr sections
			IScrSection section1Curr = CreateSection(m_genesis, "section one");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "One. ", Cache.DefaultVernWs);
			AddRunToMockedPara(para1Curr, "12", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "Twelve. ", Cache.DefaultVernWs);

			IScrSection section2Curr = CreateSection(m_genesis, "section two");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "13", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "Thirteen. ", Cache.DefaultVernWs);
			AddRunToMockedPara(para2Curr, "14", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "Fourteen. ", Cache.DefaultVernWs);
			int ichV15Curr = para2Curr.Contents.Length;
			AddRunToMockedPara(para2Curr, "15", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "Verse Fifteen. ", Cache.DefaultVernWs);

			IScrSection section3Curr = CreateSection(m_genesis, "section three");
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(section3Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Curr, "16", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3Curr, "Sixteen. ", Cache.DefaultVernWs);
			AddRunToMockedPara(para3Curr, "17", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3Curr, "Seventeen. ", Cache.DefaultVernWs);
			int ichV18Curr = para3Curr.Contents.Length;
			AddRunToMockedPara(para3Curr, "18", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3Curr, "Eighteen. ", Cache.DefaultVernWs);

			// Set up the revision sections
			IScrSection section1Rev = CreateSection(m_genesisRevision, "section one");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "One. ", Cache.DefaultVernWs);
			AddRunToMockedPara(para1Rev, "12", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "Twelve. ", Cache.DefaultVernWs);
			int ichV13Rev = para1Rev.Contents.Length;
			AddRunToMockedPara(para1Rev, "13", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "Thirteen. ", Cache.DefaultVernWs);
			AddRunToMockedPara(para1Rev, "14", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "Fourteen. ", Cache.DefaultVernWs);

			IScrSection section2Rev = CreateSection(m_genesisRevision, "section two");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "15", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "Verse Fifteen. ", Cache.DefaultVernWs);
			int ichV16Rev = para2Rev.Contents.Length;
			AddRunToMockedPara(para2Rev, "16", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "Sixteen. ", Cache.DefaultVernWs);
			AddRunToMockedPara(para2Rev, "17", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "Seventeen. ", Cache.DefaultVernWs);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// Section head at verse 16 added in current (S3Curr)
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff, 01001016, 01001016, DifferenceType.SectionHeadAddedToCurrent,
				section3Curr, para2Rev, ichV16Rev);

			// verse 18 added to current
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, 01001018, DifferenceType.VerseAddedToCurrent,
				para3Curr, ichV18Curr, para3Curr.Contents.Length,
				para2Rev, para2Rev.Contents.Length);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Tests DetectDifferences when multiple sections are unmatched.
		/// </summary>
		/// <remarks>Here is an outline of the data we will construct. The section ref ranges
		/// are overlapping but differ by more than 2 verses (which is maximum separation
		/// at which we correlate the section heads and compare them).
		///
		/// *********************** Current ******************************
		/// section one (7-18)
		///     7 Verse 7. 13 Verse 13. 18 Verse 18.
		/// section two (19-30)
		///     19 Verse 19. 24 Verse 24. 25 Verse 25. 30 Verse 30.
		/// section three (35)
		///		35 Verse 35.
		///
		/// *********************** Revision ******************************
		/// section one (1-12)
		///     1 Verse 1. 7 Verse 7. 12 Verse 12.
		/// section two (13-24)
		///     13 Verse 13. 18 Verse 18. 19 Verse 19. 24 Verse 24
		/// section three (25-36)
		///     25 Verse 25. 30 Verse 30. 36 Verse 36
		/// </remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_NonCorrelatedSectionHeads()
		{
			// Create threeS sections for the current
			IScrSection section1Curr = CreateSection(m_genesis, "section one");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "7", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "Verse 7. ", Cache.DefaultVernWs);
			int ichV13Curr = para1Curr.Contents.Length;
			AddRunToMockedPara(para1Curr, "13", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "Verse 13. ", Cache.DefaultVernWs);
			AddRunToMockedPara(para1Curr, "18", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "Verse 18. ", Cache.DefaultVernWs);

			IScrSection section2Curr = CreateSection(m_genesis, "section two");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "19", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "Verse 19. ", Cache.DefaultVernWs);
			AddRunToMockedPara(para2Curr, "22", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "Verse 22. ", Cache.DefaultVernWs);
			AddRunToMockedPara(para2Curr, "23", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "Verse 23. ", Cache.DefaultVernWs);
			AddRunToMockedPara(para2Curr, "26", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "Verse 26. ", Cache.DefaultVernWs);

			IScrSection section3Curr = CreateSection(m_genesis, "section three");
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(section3Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Curr, "30", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3Curr, "Verse 30. ", Cache.DefaultVernWs);

			// Create three sections for the revision
			IScrSection section1Rev = CreateSection(m_genesisRevision, "section one");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "Verse 1. ", Cache.DefaultVernWs);
			int ichV7Rev = para1Rev.Contents.Length;
			AddRunToMockedPara(para1Rev, "7", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "Verse 7. ", Cache.DefaultVernWs);
			int ichV12Rev = para1Rev.Contents.Length;
			AddRunToMockedPara(para1Rev, "12", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "Verse 12. ", Cache.DefaultVernWs);

			IScrSection section2Rev = CreateSection(m_genesisRevision, "section two");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "13", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "Verse 13. ", Cache.DefaultVernWs);
			AddRunToMockedPara(para2Rev, "18", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "Verse 18. ", Cache.DefaultVernWs);
			int ichV19Rev = para2Rev.Contents.Length;
			AddRunToMockedPara(para2Rev, "19", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "Verse 19. ", Cache.DefaultVernWs);
			AddRunToMockedPara(para2Rev, "22", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "Verse 22. ", Cache.DefaultVernWs);

			IScrSection section3Rev = CreateSection(m_genesisRevision, "section three");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(section3Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Rev, "23", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3Rev, "Verse 23. ", Cache.DefaultVernWs);
			AddRunToMockedPara(para3Rev, "26", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3Rev, "Verse 26. ", Cache.DefaultVernWs);
			int ichV36Rev = para3Rev.Contents.Length;
			AddRunToMockedPara(para3Rev, "31", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3Rev, "Verse 31. ", Cache.DefaultVernWs);

			// Find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(6, m_bookMerger.Differences.Count);

			// Verse 1 added to Revision
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff, 01001001, DifferenceType.VerseMissingInCurrent,
				para1Curr, 0,
				para1Rev, 0, ichV7Rev);

			// Verse 12 added to Revision
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, 01001012, DifferenceType.VerseMissingInCurrent,
				para1Curr, ichV13Curr,
				para1Rev, ichV12Rev, para1Rev.Contents.Length);

			// Section head at verse 13 added in Revision
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifySectionDiff(diff, 01001013, 01001013, DifferenceType.SectionHeadMissingInCurrent,
				section2Rev, para1Curr, ichV13Curr);

			// Section head at verse 19 added in Current
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifySectionDiff(diff, 01001019, 01001019, DifferenceType.SectionHeadAddedToCurrent,
				section2Curr, para2Rev, ichV19Rev);

			//Review: Need VerseMoved diffs ?

			// Verse 30 (whole paragraph) is added in current
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, 01001030, DifferenceType.ParagraphAddedToCurrent,
				para3Curr, 0, para3Curr.Contents.Length,
				para3Rev, ichV36Rev);

			// Verse 31 is added to Revision
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, 01001031, DifferenceType.VerseMissingInCurrent,
				para3Curr, para3Curr.Contents.Length,
				para3Rev, ichV36Rev, para3Rev.Contents.Length);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Creates the Scripture data for non-correlated section heads in scenario 1A.
		/// Scenario 1A: The destination IP (where the corresponding section break should be added)
		/// is found via the first ScrVerse in the section.
		/// </summary>
		/// <remarks>
		/// Here is an outline of the data we will construct. The section ref ranges
		/// are overlapping but differ by more than 2 verses (which is maximum separation
		/// at which we correlate the section heads and compare them).
		/// * - indicate where Sections heads have been added in the Current or where they are
		/// missing from the Current (in the Revision).
		/// *********************** Current ******************************
		/// section one (4-10)
		///     4 Verse 4. 5 Verse 5. 8 Verse 8.
		/// *section dos (11-15)
		///     11 Verse 11. 14 Verse 14. 15 Verse 15.
		/// *section tres (18-22)
		///		18 Verse 18. 22 Verse 22.
		/// section four (25)
		///		25 Verse 25.
		///
		/// *********************** Revision ******************************
		/// section one (1-4)
		///     1 Verse 1. 4 Verse 4.
		/// *section two (7-11)
		///     7 Verse 7. 10 Verse 10. 11 Verse 11.
		/// *section three (15-19)
		///		15 Verse 15. 17 Verse 17. 19 Verse 19.
		/// section four (22-25)
		///		22 Verse 22. Verse 25.
		/// </remarks>
		/// <param name="verseToIchRev">Lookup table from the verse number to the character offset
		/// with its paragraph for Scripture data in the Revision.</param>
		/// <param name="verseToIchCur">Lookup table from the verse number to the character offset
		/// with its paragraph for Scripture data in the Current.</param>
		/// ------------------------------------------------------------------------------------
		private void CreateNonCorrelatedSectionHeadData_1A(Dictionary<int, int> verseToIchRev,
			Dictionary<int, int> verseToIchCur)
		{
			// Create Scripture for Current
			IScrSection section1Curr = CreateSection(m_genesis, "section one");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddVerseWithIch(para1Curr, 0, 4, "Verse 4. ", verseToIchCur);
			AddVerseWithIch(para1Curr, 0, 5, "Verse 5. ", verseToIchCur);
			AddVerseWithIch(para1Curr, 0, 8, "Verse 8. ", verseToIchCur);

			IScrSection section2Curr = CreateSection(m_genesis, "section dos");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddVerseWithIch(para2Curr, 0, 11, "Verse 11. ", verseToIchCur);
			AddVerseWithIch(para2Curr, 0, 14, "Verse 14. ", verseToIchCur);
			AddVerseWithIch(para2Curr, 0, 15, "Verse 15. ", verseToIchCur);

			IScrSection section3Curr = CreateSection(m_genesis, "section tres");
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(section3Curr, ScrStyleNames.NormalParagraph);
			AddVerseWithIch(para3Curr, 0, 18, "Verse 18. ", verseToIchCur);
			AddVerseWithIch(para3Curr, 0, 22, "Verse 22. ", verseToIchCur);

			IScrSection section4Curr = CreateSection(m_genesis, "section four");
			IScrTxtPara para4Curr = AddParaToMockedSectionContent(section4Curr, ScrStyleNames.NormalParagraph);
			AddVerseWithIch(para4Curr, 0, 25, "Verse 25. ", verseToIchCur);

			// Create Scripture for Revision
			IScrSection section1Rev = CreateSection(m_genesisRevision, "section one");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerseWithIch(para1Rev, 0, 1, "Verse 1. ", verseToIchRev);
			AddVerseWithIch(para1Rev, 0, 4, "Verse 4. ", verseToIchRev);

			IScrSection section2Rev = CreateSection(m_genesisRevision, "section two");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddVerseWithIch(para2Rev, 0, 7, "Verse 7. ", verseToIchRev);
			AddVerseWithIch(para2Rev, 0, 10, "Verse 10. ", verseToIchRev);
			AddVerseWithIch(para2Rev, 0, 11, "Verse 11. ", verseToIchRev);

			IScrSection section3Rev = CreateSection(m_genesisRevision, "section three");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(section3Rev, ScrStyleNames.NormalParagraph);
			AddVerseWithIch(para3Rev, 0, 15, "Verse 15. ", verseToIchRev);
			AddVerseWithIch(para3Rev, 0, 17, "Verse 17. ", verseToIchRev);
			AddVerseWithIch(para3Rev, 0, 19, "Verse 19. ", verseToIchRev);

			IScrSection section4Rev = CreateSection(m_genesisRevision, "section four");
			IScrTxtPara para4Rev = AddParaToMockedSectionContent(section4Rev, ScrStyleNames.NormalParagraph);
			AddVerseWithIch(para4Rev, 0, 22, "Verse 22. ", verseToIchRev);
			AddVerseWithIch(para4Rev, 0, 25, "Verse 25. ", verseToIchRev);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Tests DetectDifferences when multiple sections are not correlated.
		/// Scenario 1A: The destination IP (where the corresponding section break should be added)
		/// is found via the first ScrVerse in the section.
		/// Differences are reverted from the first difference to the last difference.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_NonCorrelatedSectionHeads_1A_Fwd()
		{
			// Create Scripture data
			Dictionary<int, int> verseToIchRev = new Dictionary<int, int>();
			Dictionary<int, int> verseToIchCur = new Dictionary<int, int>();
			CreateNonCorrelatedSectionHeadData_1A(verseToIchRev, verseToIchCur);

			// Detect the differences for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences.
			VerifyNonCorrelatedSectionHeads_1A(verseToIchRev, verseToIchCur);

			RevertAllDifferences(true);
			// Confirm that the current is the same as the revision.
			CompareToRevision();
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Tests DetectDifferences when multiple sections are not correlated.
		/// Scenario 1A: The destination IP (where the corresponding section break should be added)
		/// is found via the first ScrVerse in the section.
		/// Differences are reverted from the last difference to the first difference.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_NonCorrelatedSectionHeads_1A_Bckwrd()
		{
			// Create Scripture data
			Dictionary<int, int> verseToIchRev = new Dictionary<int, int>();
			Dictionary<int, int> verseToIchCur = new Dictionary<int, int>();
			CreateNonCorrelatedSectionHeadData_1A(verseToIchRev, verseToIchCur);

			// Detect the differences for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences.
			VerifyNonCorrelatedSectionHeads_1A(verseToIchRev, verseToIchCur);

			RevertAllDifferences(false);
			// Confirm that the current is the same as the revision.
			CompareToRevision();
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Verifies the differences for non-correlated section heads for scenario 1A.
		/// </summary>
		/// <param name="verseToIchRev">Lookup table from the verse number to the character offset
		/// with its paragraph for Scripture data in the Revision.</param>
		/// <param name="verseToIchCur">Lookup table from the verse number to the character offset
		/// with its paragraph for Scripture data in the Current.</param>
		/// ------------------------------------------------------------------------------------
		private void VerifyNonCorrelatedSectionHeads_1A(Dictionary<int, int> verseToIchRev,
			Dictionary<int, int> verseToIchCur)
		{
			// Create local accessors to Scripture data.
			IScrTxtPara para1Curr = (IScrTxtPara)m_genesis.SectionsOS[0].ContentOA[0];
			IScrSection section2Cur = (IScrSection)m_genesis.SectionsOS[1];
			IScrTxtPara para2Curr = (IScrTxtPara)section2Cur.ContentOA[0];
			IScrSection section3Cur = (IScrSection)m_genesis.SectionsOS[2];
			IScrTxtPara para3Curr = (IScrTxtPara)section3Cur.ContentOA[0];
			IScrTxtPara para1Rev = (IScrTxtPara)m_genesisRevision.SectionsOS[0].ContentOA[0];
			IScrSection section2Rev = (IScrSection)m_genesisRevision.SectionsOS[1];
			IScrTxtPara para2Rev = (IScrTxtPara)section2Rev.ContentOA[0];
			IScrSection section3Rev = (IScrSection)m_genesisRevision.SectionsOS[2];
			IScrTxtPara para3Rev = (IScrTxtPara)section3Rev.ContentOA[0];

			// Verify the differences found
			Assert.AreEqual(13, m_bookMerger.Differences.Count);

			// Verse 1 missing in Current
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff, 01001001, DifferenceType.VerseMissingInCurrent,
				para1Curr, 0,
				para1Rev, 0, verseToIchRev[4]);

			// Verse 5 added to Current
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, 01001005, DifferenceType.VerseAddedToCurrent,
				para1Curr, verseToIchCur[5], verseToIchCur[8],
				para1Rev, para1Rev.Contents.Length, para1Rev.Contents.Length);

			// Section head two (v7) missing in Current.
			// Need to find the destination IP for the missing section break via the first ScrVerse in the Section (7),
			// which is missing in Current so we use the verse 7 destination IP, which is verse 8 in
			// the Current.
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifySectionDiff(diff, 01001007, 01001007, DifferenceType.SectionHeadMissingInCurrent,
				section2Rev, para1Curr, verseToIchCur[8]);

			// Verse 7 missing in Current
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, 01001007, DifferenceType.VerseMissingInCurrent,
				para1Curr, verseToIchCur[8],
				para2Rev, 0, verseToIchRev[10]);

			// Verse 8 added to Current
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, 01001008, DifferenceType.VerseAddedToCurrent,
				para1Curr, verseToIchCur[8], para1Curr.Contents.Length,
				para2Rev, verseToIchRev[10]);

			// Verse 10 missing in Current
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, 01001010, DifferenceType.VerseMissingInCurrent,
				para1Curr, para1Curr.Contents.Length,
				para2Rev, verseToIchRev[10], verseToIchRev[11]);

			// Section head dos (v11) added to Current.
			// Need to find the destination IP for the added section break via the first ScrVerse in the Section (11),
			// which is has match in the Revision.
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifySectionDiff(diff, 01001011, 01001011, DifferenceType.SectionHeadAddedToCurrent,
				section2Cur, para2Rev, verseToIchRev[11]);

			// Verses 14 added to Current
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, 01001014, 01001014, DifferenceType.VerseAddedToCurrent,
				para2Curr, verseToIchCur[14], verseToIchCur[15],
				para2Rev, para2Rev.Contents.Length, para2Rev.Contents.Length);

			// Section head three (v15) missing in Current.
			// Need to find the destination IP for the missing section break via the first ScrVerse in the Section(15),
			// which is has a match in the Current.
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifySectionDiff(diff, 01001015, 01001015, DifferenceType.SectionHeadMissingInCurrent,
				section3Rev, para2Curr, verseToIchCur[15]);

			// Verse 17 missing in Current
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, 01001017, DifferenceType.VerseMissingInCurrent,
				para2Curr, para2Curr.Contents.Length,
				para3Rev, verseToIchRev[17], verseToIchRev[19]);

			// Section head tres (v18) added to Current.
			// Need to find the destination IP for the added section break via the first ScrVerse in section (18),
			// which is has no match in the Revision, so we use verse 19.
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifySectionDiff(diff, 01001018, 01001018, DifferenceType.SectionHeadAddedToCurrent,
				section3Cur, para3Rev, verseToIchRev[19]);

			// Verses 18 added to Current
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, 01001018, 01001018, DifferenceType.VerseAddedToCurrent,
				para3Curr, 0, verseToIchCur[22],
				para3Rev, verseToIchRev[19], verseToIchRev[19]);

			// Verse 19 missing in Current
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, 01001019, DifferenceType.VerseMissingInCurrent,
				para3Curr, verseToIchCur[22],
				para3Rev, verseToIchRev[19], para3Rev.Contents.Length);

			// NOTE: For now, the missing section head at v22 in Current is not detected.
			// Likewise, the added section head at v25 in Current is not detected.
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Creates the Scripture data for non-correlated section heads in scenario 1B.
		/// Scenario 1B: The destination IP (where the corresponding section break should be added)
		/// is found via the first ScrVerse in the section. The ScrVerses are part of multi-para
		/// verses.
		/// </summary>
		/// <remarks>
		/// Here is an outline of the data we will construct. The section ref ranges
		/// are overlapping but differ by more than 2 verses (which is maximum separation
		/// at which we correlate the section heads and compare them).
		/// * - indicate where Sections heads have been added in the Current or where they are
		/// missing from the Current (in the Revision).
		/// *********************** Current ******************************
		/// section one (4-10)
		///     4 Verse 4. 5 Verse 5. 8 Verse 8.
		///     eight cont.
		/// *section dos (11-15)
		///     11 Verse 11.
		///     eleven cont. 14 Verse 14. 15 Verse 15.
		///     fifteen cont.
		/// *section tres (18-22)
		///		18 Verse 18.
		///		eighteen cont. 22 Verse 22.
		/// section four (25)
		///		25 Verse 25.
		///
		/// *********************** Revision ******************************
		/// section one (1-4)
		///     1 Verse 1. 4 Verse 4.
		/// *section two (7-11)
		///     7 Verse 7.
		///     seven cont. 10 Verse 10. 11 Verse 11.
		///     eleven cont.
		/// *section three (15-19)
		///		15 Verse 15.
		///		fifteen cont. 17 Verse 17. 19 Verse 19.
		///		nineteen cont.
		/// section four (22-25)
		///		22 Verse 22. Verse 25.
		/// </remarks>
		/// <param name="verseToIchRev">Lookup table from the verse number to the character offset
		/// with its paragraph for Scripture data in the Revision.</param>
		/// <param name="verseToIchCur">Lookup table from the verse number to the character offset
		/// with its paragraph for Scripture data in the Current.</param>
		/// ------------------------------------------------------------------------------------
		private void CreateNonCorrelatedSectionHeadData_1B(Dictionary<int, int> verseToIchRev,
			Dictionary<int, int> verseToIchCur)
		{
			// Create Scripture for Current
			IScrSection section1Curr = CreateSection(m_genesis, "section one");
			IScrTxtPara para1aCurr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddVerseWithIch(para1aCurr, 0, 4, "Verse 4. ", verseToIchCur);
			AddVerseWithIch(para1aCurr, 0, 5, "Verse 5. ", verseToIchCur);
			AddVerseWithIch(para1aCurr, 0, 8, "Verse 8. ", verseToIchCur);
			IScrTxtPara para1bCurr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddVerseWithIch(para1bCurr, 0, 0, "eight cont. ", verseToIchCur);

			IScrSection section2Curr = CreateSection(m_genesis, "section dos");
			IScrTxtPara para2aCurr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddVerseWithIch(para2aCurr, 0, 11, "Verse 11. ", verseToIchCur);
			IScrTxtPara para2bCurr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddVerseWithIch(para2bCurr, 0, 0, "eleven cont. ", verseToIchCur);
			AddVerseWithIch(para2bCurr, 0, 14, "Verse 14. ", verseToIchCur);
			AddVerseWithIch(para2bCurr, 0, 15, "Verse 15. ", verseToIchCur);
			IScrTxtPara para2cCurr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddVerseWithIch(para2cCurr, 0, 0, "fifteen cont. ", verseToIchCur);

			IScrSection section3Curr = CreateSection(m_genesis, "section tres");
			IScrTxtPara para3aCurr = AddParaToMockedSectionContent(section3Curr, ScrStyleNames.NormalParagraph);
			AddVerseWithIch(para3aCurr, 0, 18, "Verse 18. ", verseToIchCur);
			IScrTxtPara para3bCurr = AddParaToMockedSectionContent(section3Curr, ScrStyleNames.NormalParagraph);
			AddVerseWithIch(para3bCurr, 0, 18, "eighteen cont. ", verseToIchCur);
			AddVerseWithIch(para3bCurr, 0, 22, "Verse 22. ", verseToIchCur);

			IScrSection section4Curr = CreateSection(m_genesis, "section four");
			IScrTxtPara para4Curr = AddParaToMockedSectionContent(section4Curr, ScrStyleNames.NormalParagraph);
			AddVerseWithIch(para4Curr, 0, 25, "Verse 25. ", verseToIchCur);

			// Create Scripture for Revision
			IScrSection section1Rev = CreateSection(m_genesisRevision, "section one");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerseWithIch(para1Rev, 0, 1, "Verse 1. ", verseToIchRev);
			AddVerseWithIch(para1Rev, 0, 4, "Verse 4. ", verseToIchRev);

			IScrSection section2Rev = CreateSection(m_genesisRevision, "section two");
			IScrTxtPara para2aRev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddVerseWithIch(para2aRev, 0, 7, "Verse 7. ", verseToIchRev);
			IScrTxtPara para2bRev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddVerseWithIch(para2bRev, 0, 0, "seven cont. ", verseToIchRev);
			AddVerseWithIch(para2bRev, 0, 10, "Verse 10. ", verseToIchRev);
			AddVerseWithIch(para2bRev, 0, 11, "Verse 11. ", verseToIchRev);
			IScrTxtPara para2cRev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddVerseWithIch(para2cRev, 0, 0, "eleven cont. ", verseToIchRev);

			IScrSection section3Rev = CreateSection(m_genesisRevision, "section three");
			IScrTxtPara para3aRev = AddParaToMockedSectionContent(section3Rev, ScrStyleNames.NormalParagraph);
			AddVerseWithIch(para3aRev, 0, 15, "Verse 15. ", verseToIchRev);
			IScrTxtPara para3bRev = AddParaToMockedSectionContent(section3Rev, ScrStyleNames.NormalParagraph);
			AddVerseWithIch(para3bRev, 0, 0, "fifteen cont. ", verseToIchRev);
			AddVerseWithIch(para3bRev, 0, 17, "Verse 17. ", verseToIchRev);
			AddVerseWithIch(para3bRev, 0, 19, "Verse 19. ", verseToIchRev);
			IScrTxtPara para3cRev = AddParaToMockedSectionContent(section3Rev, ScrStyleNames.NormalParagraph);
			AddVerseWithIch(para3cRev, 0, 0, "ninteen cont. ", verseToIchRev);

			IScrSection section4Rev = CreateSection(m_genesisRevision, "section four");
			IScrTxtPara para4Rev = AddParaToMockedSectionContent(section4Rev, ScrStyleNames.NormalParagraph);
			AddVerseWithIch(para4Rev, 0, 22, "Verse 22. ", verseToIchRev);
			AddVerseWithIch(para4Rev, 0, 25, "Verse 25. ", verseToIchRev);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Tests DetectDifferences when multiple sections are not correlated.
		/// Scenario 1B: The destination IP (where the corresponding section break should be added)
		/// is found via the first ScrVerse in the section. The ScrVerses are part of multi-para
		/// verses.
		/// Differences are reverted from the first to the last.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		[Ignore("TE-7664: Needs to be fixed")]
		public void ReplaceCurWithRev_NonCorrelatedSectionHeads_1B_Fwd()
		{
			// Create Scripture data
			Dictionary<int, int> verseToIchRev = new Dictionary<int, int>();
			Dictionary<int, int> verseToIchCur = new Dictionary<int, int>();
			CreateNonCorrelatedSectionHeadData_1B(verseToIchRev, verseToIchCur);

			// Detect the differences for Genesis
			m_bookMerger.DetectDifferences(null);

			Verify_NonCorrelatedSectionHeads_1B(verseToIchRev, verseToIchCur);

			RevertAllDifferences(true);
			// Confirm that the current is the same as the revision.
			CompareToRevision();
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Tests DetectDifferences when multiple sections are not correlated.
		/// Scenario 1B: The destination IP (where the corresponding section break should be added)
		/// is found via the first ScrVerse in the section. The ScrVerses are part of multi-para
		/// verses.
		/// Differences are reverted from the last to the first.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		[Ignore("TE-7664: Needs to be fixed")]
		public void ReplaceCurWithRev_NonCorrelatedSectionHeads_1B_Bckwrd()
		{
			// Create Scripture data
			Dictionary<int, int> verseToIchRev = new Dictionary<int, int>();
			Dictionary<int, int> verseToIchCur = new Dictionary<int, int>();
			CreateNonCorrelatedSectionHeadData_1B(verseToIchRev, verseToIchCur);

			// Detect the differences for Genesis
			m_bookMerger.DetectDifferences(null);

			Verify_NonCorrelatedSectionHeads_1B(verseToIchRev, verseToIchCur);

			RevertAllDifferences(true);
			// Confirm that the current is the same as the revision.
			CompareToRevision();
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Verifies the differences for non-correlated section heads for scenario 1A.
		/// </summary>
		/// <param name="verseToIchRev">Lookup table from the verse number to the character offset
		/// with its paragraph for Scripture data in the Revision.</param>
		/// <param name="verseToIchCur">Lookup table from the verse number to the character offset
		/// with its paragraph for Scripture data in the Current.</param>
		/// ------------------------------------------------------------------------------------
		private void Verify_NonCorrelatedSectionHeads_1B(Dictionary<int, int> verseToIchRev, Dictionary<int, int> verseToIchCur)
		{
			// Create local accessors to Scripture data.
			IScrTxtPara para1aCurr = (IScrTxtPara)m_genesis.SectionsOS[0].ContentOA[0];
			IScrTxtPara para1bCurr = (IScrTxtPara)m_genesis.SectionsOS[0].ContentOA[1];
			IScrSection section2Cur = (IScrSection)m_genesis.SectionsOS[1];
			IScrTxtPara para2aCurr = (IScrTxtPara)section2Cur.ContentOA[0];
			IScrTxtPara para2bCurr = (IScrTxtPara)section2Cur.ContentOA[1];
			IScrTxtPara para2cCurr = (IScrTxtPara)section2Cur.ContentOA[2];
			IScrSection section3Cur = (IScrSection)m_genesis.SectionsOS[2];
			IScrTxtPara para3aCurr = (IScrTxtPara)section3Cur.ContentOA[0];
			IScrTxtPara para3bCurr = (IScrTxtPara)section3Cur.ContentOA[1];
			IScrTxtPara para1Rev = (IScrTxtPara)m_genesisRevision.SectionsOS[0].ContentOA[0];
			IScrSection section2Rev = (IScrSection)m_genesisRevision.SectionsOS[1];
			IScrTxtPara para2aRev = (IScrTxtPara)section2Rev.ContentOA[0];
			IScrTxtPara para2bRev = (IScrTxtPara)section2Rev.ContentOA[1];
			IScrTxtPara para2cRev = (IScrTxtPara)section2Rev.ContentOA[2];
			IScrSection section3Rev = (IScrSection)m_genesisRevision.SectionsOS[2];
			IScrTxtPara para3aRev = (IScrTxtPara)section3Rev.ContentOA[0];
			IScrTxtPara para3bRev = (IScrTxtPara)section3Rev.ContentOA[1];
			IScrTxtPara para3cRev = (IScrTxtPara)section3Rev.ContentOA[2];

			// Verify the differences found
			Assert.AreEqual(13, m_bookMerger.Differences.Count);

			// Verse 1 missing in Current
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff, 01001001, DifferenceType.VerseMissingInCurrent,
				para1aCurr, 0,
				para1Rev, 0, verseToIchRev[4]);

			// Verse 5 added to Current
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, 01001005, DifferenceType.VerseAddedToCurrent,
				para1aCurr, verseToIchCur[5], verseToIchCur[8],
				para1Rev, para1Rev.Contents.Length, para1Rev.Contents.Length);

			// Section head two (v7) missing in Current.
			// Need to find the destination IP for the missing section break via the first ScrVerse in the Section (7),
			// which is missing in Current so we use the verse 7 destination IP, which is verse 8 in
			// the Current.
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifySectionDiff(diff, 01001007, 01001007, DifferenceType.SectionHeadMissingInCurrent,
				section2Rev, para1aCurr, verseToIchCur[8]);

			// Verse 7 has paragraph structure change (Verse 7 missing in Current, but in multi-paras)
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff, 01001007, DifferenceType.ParagraphStructureChange);
			DiffTestHelper.VerifySubDiffParaReferencePoints(diff, para1aCurr, verseToIchCur[8], para2aRev, 0);
			DiffTestHelper.VerifySubDiffParaAdded(diff, 1, DifferenceType.ParagraphMissingInCurrent,
				para2aRev, para2aRev.Contents.Length);
			DiffTestHelper.VerifySubDiffParaAdded(diff, 2, DifferenceType.ParagraphMissingInCurrent,
				para2bRev, verseToIchRev[10]);

			// Verse 8 has paragraph structure change (Verse 8 added to Current, but in multi-paras)
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff, 01001008, DifferenceType.ParagraphStructureChange);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.TextDifference,
				para1aCurr, verseToIchCur[8], para1aCurr.Contents.Length,
				para2bRev, verseToIchRev[10], verseToIchRev[10]);
			DiffTestHelper.VerifySubDiffParaAdded(diff, 1, DifferenceType.ParagraphAddedToCurrent,
				para1bCurr, para1bCurr.Contents.Length);

			// Verse 10 missing in Current
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, 01001010, DifferenceType.VerseMissingInCurrent,
				para1bCurr, para1bCurr.Contents.Length,
				para2bRev, verseToIchRev[10], verseToIchRev[11]);

			// Section head dos (v11) added to Current.
			// Need to find the destination IP for the added section break via the first ScrVerse in the Section (11),
			// which is has match in the Revision.
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifySectionDiff(diff, 01001011, 01001011, DifferenceType.SectionHeadAddedToCurrent,
				section2Cur, para2bRev, verseToIchRev[11]);

			// Verses 14 added to Current
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, 01001014, 01001014, DifferenceType.VerseAddedToCurrent,
				para2bCurr, verseToIchCur[14], verseToIchCur[15],
				para2cRev, para2cRev.Contents.Length, para2cRev.Contents.Length);

			// Section head three (v15) missing in Current.
			// Need to find the destination IP for the missing section break via the first ScrVerse in the Section(15),
			// which is has a match in the Current.
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifySectionDiff(diff, 01001015, 01001015, DifferenceType.SectionHeadMissingInCurrent,
				section3Rev, para2bCurr, verseToIchCur[15]);

			// Verse 17 missing in Current
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff, 01001017, DifferenceType.VerseMissingInCurrent,
				para2cCurr, para2cCurr.Contents.Length,
				para3bRev, verseToIchRev[17], verseToIchRev[19]);

			// Section head tres (v18) added to Current.
			// Need to find the destination IP for the added section break via the first ScrVerse in section (18),
			// which is has no match in the Revision, so we use verse 19.
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifySectionDiff(diff, 01001018, 01001018, DifferenceType.SectionHeadAddedToCurrent,
				section3Cur, para3bRev, verseToIchRev[19]);

			// Verse 18 has paragraph structure change (Verse 18 added to Current, but in multi-paras)
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff, 01001018, DifferenceType.ParagraphStructureChange);
			DiffTestHelper.VerifySubDiffParaReferencePoints(diff, para3aCurr, 0, para3bRev, verseToIchRev[19]);
			DiffTestHelper.VerifySubDiffParaAdded(diff, 1, DifferenceType.ParagraphAddedToCurrent,
				para3aCurr, para3aCurr.Contents.Length);
			DiffTestHelper.VerifySubDiffParaAdded(diff, 2, DifferenceType.ParagraphAddedToCurrent,
				para3bCurr, verseToIchCur[22]);

			// Verse 19 has paragraph structure change (Verse 19 missing in Current, but in multi-paras)
			diff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff, 01001019, DifferenceType.ParagraphStructureChange);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 0, DifferenceType.TextDifference,
				para3bCurr, verseToIchCur[22], verseToIchCur[22],
				para3bRev, verseToIchRev[19], para3bRev.Contents.Length);
			DiffTestHelper.VerifySubDiffParaAdded(diff, 1, DifferenceType.ParagraphMissingInCurrent,
				para3cRev, para3cRev.Contents.Length);

			// NOTE: For now, the missing section head at v22 in Current is not detected.
			// Likewise, the added section head at v25 in Current is not detected.
		}

#if false // cs 169
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Creates the Scripture data for non-correlated section heads when the first section
		/// is empty in both the Current and the Revision.
		/// Scenario 2A: The destination IP (where the corresponding section break should be added)
		/// is found via the ScrVerse just prior to the section.
		/// </summary>
		/// <remarks>Here is an outline of the data we will construct. The section ref ranges
		/// are overlapping but differ by more than 2 verses (which is maximum separation
		/// at which we correlate the section heads and compare them).
		///
		/// TODO: Re-design test.
		///
		/// *********************** Current ******************************
		/// section one (empty)
		/// section two
		///		19 Verse 19. 25 Verse 25. 28 Verse 28.
		///	section three (empty)
		///	section four
		///		29 Verse 29. 31 Verse 31.
		///	section five
		///		33 Verse 33.
		///
		/// *********************** Revision ******************************
		/// section one (empty)
		/// section two
		///		15 Verse 15. 20 Verse 20. 22 Verse 22.
		///	section three (empty)
		///	section four
		///		25 Verse 25. 28 Verse 28. 29 Verse 29.
		///	section five
		///		30 Verse 30. 34 Verse 34.
		/// </remarks>
		/// <param name="verseToIchRev">Lookup table from the verse number to the character offset
		/// with its paragraph for Scripture data in the Revision.</param>
		/// <param name="verseToIchCur">Lookup table from the verse number to the character offset
		/// with its paragraph for Scripture data in the Current.</param>
		/// ------------------------------------------------------------------------------------
		private void CreateNonCorrelatedSectionHeadData_2A(Dictionary<int, int> verseToIchRev,
			Dictionary<int, int> verseToIchCur)
		{
			// Create Scripture for Current
			IScrSection section1Curr = CreateSection(m_genesis, "section one (empty)");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);

			IScrSection section2Curr = CreateSection(m_genesis, "section two");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddVerseWithIch(para2Curr, 0, 19, "Verse 19. ", verseToIchCur);
			AddVerseWithIch(para2Curr, 0, 25, "Verse 25. ", verseToIchCur);
			AddVerseWithIch(para2Curr, 0, 28, "Verse 28. ", verseToIchCur);

			IScrSection section3Curr = CreateSection(m_genesis, "section three (empty)");
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(section3Curr, ScrStyleNames.NormalParagraph);

			IScrSection section4Curr = CreateSection(m_genesis, "section four");
			IScrTxtPara para4Curr = AddParaToMockedSectionContent(section4Curr, ScrStyleNames.NormalParagraph);
			AddVerseWithIch(para4Curr, 0, 29, "Verse 29. ", verseToIchCur);
			AddVerseWithIch(para4Curr, 0, 31, "Verse 31. ", verseToIchCur);

			IScrSection section5Curr = CreateSection(m_genesis, "section five");
			IScrTxtPara para5Curr = AddParaToMockedSectionContent(section5Curr, ScrStyleNames.NormalParagraph);
			AddVerseWithIch(para5Curr, 0, 33, "Verse 33. ", verseToIchCur);

			// Create Scripture for Revision
			IScrSection section1Rev = CreateSection(m_genesisRevision, "section one (empty)");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);

			IScrSection section2Rev = CreateSection(m_genesisRevision, "section two");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddVerseWithIch(para2Rev, 0, 15, "Verse 15. ", verseToIchRev);
			AddVerseWithIch(para2Rev, 0, 20, "Verse 20. ", verseToIchRev);
			AddVerseWithIch(para2Rev, 0, 22, "Verse 22. ", verseToIchRev);

			IScrSection section3Rev = CreateSection(m_genesisRevision, "section three (empty)");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(section3Rev, ScrStyleNames.NormalParagraph);

			IScrSection section4Rev = CreateSection(m_genesisRevision, "section four");
			IScrTxtPara para4Rev = AddParaToMockedSectionContent(section4Rev, ScrStyleNames.NormalParagraph);
			AddVerseWithIch(para4Rev, 0, 25, "Verse 25. ", verseToIchRev);
			AddVerseWithIch(para4Rev, 0, 28, "Verse 28. ", verseToIchRev);
			AddVerseWithIch(para4Rev, 0, 29, "Verse 29. ", verseToIchRev);

			IScrSection section5Rev = CreateSection(m_genesisRevision, "section five");
			IScrTxtPara para5Rev = AddParaToMockedSectionContent(section5Rev, ScrStyleNames.NormalParagraph);
			AddVerseWithIch(para5Rev, 0, 30, "Verse 30. ", verseToIchRev);
			AddVerseWithIch(para5Rev, 0, 34, "Verse 34. ", verseToIchRev);
		}
#endif

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Tests DetectDifferences when multiple sections are unmatched. The first and third
		/// sections are empty in both the Current and the Revision.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		[Ignore("TE-7132")]
		public void ReplaceCurWithRev_NonCorrelatedSectionHeads_2A()
		{
			// REVIEW(BryanW): What is scenario 2A?
		}
		#endregion

		#region DetectDifferencesInListOfStTexts
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// This is lower level test than most DetectDifferences test. We specifically call
		/// DetectDifferencesInListOfStTexts() to verify that it performs reasonably even
		/// when one of the lists it is given is empty.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void DetectDifferences_EmptyListOfStTexts()
		{
			// the Current section is not used, except as a placeholder
			IScrSection sectionCurr = CreateSection(m_genesis,
				"This section is not used, except as a placeholder");

			// construct the revision section
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");

			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.AppendRun("1", StyleUtils.CharStyleTextProps(ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("In the beginning, God created the heavens and the earth. ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			paraBldr.AppendRun("2", StyleUtils.CharStyleTextProps(ScrStyleNames.VerseNumber,
				Cache.DefaultVernWs));
			paraBldr.AppendRun("And the earth was formless and void... ",
				StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			int ichLimP1Rev = paraBldr.Length;
			paraBldr.CreateParagraph(sectionRev.ContentOA);

			// Make an empty list of StTexts for the Current
			//  but we must also init it's endOfPrevVerse in order to process an empty list.
			m_bookMerger.InitPrevVerseForBookCurr();
			List<IStText> stTextsCurr = new List<IStText>();

			// Make a list of two StTexts for the Revision - its Heading and Content
			List<IStText> stTextsRev = new List<IStText>();
			stTextsRev.Add(sectionRev.HeadingOA);
			stTextsRev.Add(sectionRev.ContentOA);

			// Run the code we want to test
			m_bookMerger.DetectDifferencesInListOfStTexts(stTextsCurr, stTextsRev);

			// Verify the differences found
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// Note: We expect that all diffs found will be "ParagraphMissingInCurrent", and that the
			// hvoCurr and ich***Curr's will point to the very beginning of the first section
			// heading in the current.

			// section heading is missing in current
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001001, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff.DiffType);
			Assert.AreEqual(sectionCurr.HeadingOA[0], diff.ParaCurr);
			Assert.AreEqual(sectionRev.HeadingOA[0], diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(0, diff.IchLimCurr);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(15, diff.IchLimRev);

			// paragraph with verses 1-2 missing in current
			diff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(01001002, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff.DiffType);
			Assert.AreEqual(sectionCurr.HeadingOA[0], diff.ParaCurr);
			Assert.AreEqual(sectionRev.ContentOA[0], diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinCurr);
			Assert.AreEqual(0, diff.IchLimCurr);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(ichLimP1Rev, diff.IchLimRev);

			Assert.IsNull(m_bookMerger.Differences.MoveNext());
		}
		}
		#endregion

		#region ReplaceCurrentWithRevision WithinPara Tests
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// current book and the revision have a single difference in the verse text of one
		/// verse.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_SimpleText()
		{
			// build Current section
			IScrSection sectionCurr = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Curr, "Current.", Cache.DefaultVernWs);

			// build Revision section
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Rev, "Rev.", Cache.DefaultVernWs);

			// Detect differences
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// quick check of the diffs
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff, 01001001, DifferenceType.TextDifference,
				para1Curr, 1, 8,  // chapter number and ending period are not included
				para1Rev, 1, 4);

			// Do the "ReplaceCurrentWithRevision" action
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual(0, m_bookMerger.Differences.Count);

			// Verify the changed paragraph
			IScrTxtPara paraNew = diff.ParaCurr;
			Assert.AreEqual(para1Curr, paraNew);
			Assert.AreEqual("1Rev.", paraNew.Contents.Text);
			// verify detailed changes in the para
			Assert.AreEqual(2, paraNew.Contents.RunCount);
			AssertEx.RunIsCorrect(paraNew.Contents, 0,
				"1", ScrStyleNames.ChapterNumber, Cache.DefaultVernWs, true);
			AssertEx.RunIsCorrect(paraNew.Contents, 1,
				"Rev.", null, Cache.DefaultVernWs, true);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the revision
		/// has a duplicate, adjacent verse number in the same paragraph and there is a missing
		/// paragraph in the current. See TE-7137.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_DuplicateVerseInPara()
		{
			// Create Scripture data in the current.
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 1, 1, "one ");
			AddVerse(para1Curr, 0, 2, "two ");
			AddVerse(para1Curr, 0, 3, "three ");
			AddVerse(para1Curr, 0, 4, "four ");
			int ichTxtChgMin = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 5, "five");

			// Create Scripture data in the revision.
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 1, 1, "one ");
			AddVerse(para1Rev, 0, 2, "two ");
			AddVerse(para1Rev, 0, 3, "three ");
			AddVerse(para1Rev, 0, 4, "four ");
			AddVerse(para1Rev, 0, 4, "four again ");
			int ichTxtChgLimRev = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 5, "five");

			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 6, "paragraph to restore from the revision.");

			// Detect differences and verify that they are correct
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis

			Assert.AreEqual(2, m_bookMerger.Differences.Count);
			// We expect a text difference in verse number 4 (the duplicated verse).
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, 01001004, DifferenceType.TextDifference,
				para1Curr, ichTxtChgMin, ichTxtChgMin,
				para1Rev, ichTxtChgMin, ichTxtChgLimRev);

			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaAddedDiff(diff2, 01001006, 01001006, DifferenceType.ParagraphMissingInCurrent,
				para2Rev, para1Curr, para1Curr.Contents.Length);

			// Revert to revision--adding the duplicate verse four.
			m_bookMerger.ReplaceCurrentWithRevision(diff1);

			// We expect that the duplicate verse 4 will be added to the first paragraph.
			Assert.AreEqual("11one 2two 3three 4four 4four again 5five", para1Curr.Contents.Text);

			// Revert to revision--restoring the missing paragraph.
			m_bookMerger.ReplaceCurrentWithRevision(diff2);

			// We expect that the second para in the revision will be added to the current.
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("6paragraph to restore from the revision.",
				((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// text difference range contains a footnote in both books.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_SimpleText_WithFootnote()
		{
			// build Current section
			IScrSection sectionCurr = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Curr, "Current.", Cache.DefaultVernWs);
			// place the footnote within the text
			IScrFootnote footnote1Curr = AddFootnote(m_genesis, para1Curr, 4,
				"Current footnote text");

			// build Revision section
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Rev, "Rev.", Cache.DefaultVernWs);
			IScrFootnote footnote1Rev = AddFootnote(m_genesisRevision, para1Rev, 4,
				"New footnote text");

			Assert.AreEqual(1, m_genesis.FootnotesOS.Count);
			Assert.AreEqual(1, m_genesisRevision.FootnotesOS.Count);
			Assert.IsTrue(footnote1Curr != footnote1Rev);

			// Detect differences
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis

			// quick check of the diffs
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
		//REVIEW: probably this should be the diff type:
		//Assert.AreEqual(DifferenceType.TextDifference | DifferenceType.FootnoteDifference,
		//    diff.DiffType);
		// for now this is all we see
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);

			// Do the "ReplaceCurrentWithRevision" action
			m_bookMerger.ReplaceCurrentWithRevision(diff);

			// we expect that the Rev text and the Rev footnote are now in the Current

			// check the footnote collections for the books
			Assert.AreEqual(1, m_genesis.FootnotesOS.Count);
			Assert.AreEqual(1, m_genesisRevision.FootnotesOS.Count);

			//Verify the changed Current paragraph
			IScrTxtPara paraNew = diff.ParaCurr;
			Assert.AreEqual(para1Curr, paraNew);
			Assert.AreEqual("1Rev" + StringUtils.kChObject + ".", paraNew.Contents.Text);

			// the new footnote should have the same content as the original Rev footnote
			IScrFootnote footnoteNew = m_genesis.FootnotesOS[0];
			Assert.IsTrue(footnote1Curr != footnoteNew); // but a different hvo
			Assert.AreEqual(1, footnoteNew.ParagraphsOS.Count);
			AssertEx.AreTsStringsEqual(((IScrTxtPara)footnote1Rev[0]).Contents,
				((IScrTxtPara)footnoteNew[0]).Contents);

			// verify detailed changes in the Curr para
			ITsString tssNewParaContents = paraNew.Contents;
			Assert.AreEqual(4, tssNewParaContents.RunCount);
			AssertEx.RunIsCorrect(tssNewParaContents, 0, "1", ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs, true);
			AssertEx.RunIsCorrect(tssNewParaContents, 1, "Rev", null, Cache.DefaultVernWs, true);
			// Run #2 is ORC, checked below...
			AssertEx.RunIsCorrect(tssNewParaContents, 3, ".", null, Cache.DefaultVernWs, true);

			VerifyFootnote(footnoteNew, paraNew, 4);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// revision contains a missing footnote object. We expect that the missing footnote
		/// would be replaced by a new blank footnote.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_SimpleText_WithMissingFootnoteObject()
		{
			// build Current section
			IScrSection sectionCurr = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Curr, "Current.", Cache.DefaultVernWs);
			// place the footnote within the text
			IScrFootnote footnote1Curr = AddFootnote(m_genesis, para1Curr, 4,
				"Current footnote text");

			// build Revision section
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Rev, "Rev.", Cache.DefaultVernWs);
			// Add a "missing" footnote (a guid that doesn't actually reference a footnote).
			ITsString orcTss = TsStringUtils.CreateOrcFromGuid(Guid.NewGuid(), FwObjDataTypes.kodtOwnNameGuidHot, Cache.DefaultVernWs);
			ITsStrBldr tssBldr = para1Rev.Contents.GetBldr();
			tssBldr.ReplaceTsString(4, 4, orcTss);
			para1Rev.Contents = tssBldr.GetString();

			// Confirm that Genesis has a footnote, and the revision has no footnotes
			Assert.AreEqual(1, m_genesis.FootnotesOS.Count);
			Assert.AreEqual(0, m_genesisRevision.FootnotesOS.Count);
			// ... but the revision still has a footnote guid (i.e. a reference to a missing object).
			// (GetGuidFromRun returns Guid.Empty if the specified type of Guid is not found.)
			Assert.AreNotEqual(Guid.Empty, TsStringUtils.GetGuidFromRun(para1Rev.Contents, 2,
				FwObjDataTypes.kodtOwnNameGuidHot));

			Assert.AreEqual(10, para1Curr.Contents.Length);
			Assert.AreEqual(6, para1Rev.Contents.Length);

			// Detect differences
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis

			// quick check of the diffs
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(DifferenceType.TextDifference | DifferenceType.FootnoteAddedToCurrent, diff.DiffType);
			Assert.AreEqual(para1Curr, diff.ParaCurr);
			Assert.AreEqual(1, diff.IchMinCurr); // chapter num matched
			Assert.AreEqual(9, diff.IchLimCurr); // period matches
			Assert.AreEqual(para1Rev, diff.ParaRev);
			Assert.AreEqual(1, diff.IchMinRev);
			Assert.AreEqual(5, diff.IchLimRev);

			// Do the "ReplaceCurrentWithRevision" action
			m_bookMerger.ReplaceCurrentWithRevision(diff);

			// we expect that the Rev text is now in the Current, but the <Missing object> has
			//  been replaced by a new blank footnote.

			// check the footnote collections for the books
			Assert.AreEqual(1, m_genesis.FootnotesOS.Count);
			Assert.AreEqual(0, m_genesisRevision.FootnotesOS.Count);

			//Verify the changed Current paragraph (now with an ORC for a newly-created blank footnote)
			IScrTxtPara paraNew = diff.ParaCurr;
			Assert.AreEqual(para1Curr, paraNew);
			Assert.AreEqual("1Rev" + StringUtils.kChObject + ".", paraNew.Contents.Text);

			// verify detailed changes in the Curr para
			ITsString tssNewParaContents = paraNew.Contents;
			Assert.AreEqual(4, tssNewParaContents.RunCount);
			AssertEx.RunIsCorrect(tssNewParaContents, 0, "1", ScrStyleNames.ChapterNumber,
				Cache.DefaultVernWs, true);
			AssertEx.RunIsCorrect(tssNewParaContents, 1, "Rev", null, Cache.DefaultVernWs, true);
			// Run #2 is an ORC for a newly-inserted footnote, checked below...
			AssertEx.RunIsCorrect(tssNewParaContents, 3, ".", null, Cache.DefaultVernWs, true);

			IScrFootnote footnoteNew = m_genesis.FootnotesOS[0];
			VerifyFootnote(footnoteNew, paraNew, 4);
			// the new footnote should have a real paragraph with vernacular properties
			Assert.AreEqual(1, footnoteNew.ParagraphsOS.Count);
			IScrTxtPara para = (IScrTxtPara)footnoteNew[0];
			Assert.AreEqual(ScrStyleNames.NormalFootnoteParagraph,
				para.StyleRules.GetStrPropValue((int)FwTextStringProp.kstpNamedStyle));
			ITsString tss = para.Contents;
			Assert.AreEqual(0, tss.Length);
			int nVar; //dummy for out param
			int ws = tss.get_Properties(0).GetIntPropValues((int)FwTextPropType.ktptWs,
				out nVar);
			Assert.AreEqual(Cache.DefaultVernWs, ws);

			// NOTE: The revision & current still have a footnote difference, which we cannot restore
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			diff = m_bookMerger.Differences.MoveFirst();
			// could be any difference type that makes common sense- FootnoteDifference, etc.
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// text difference range is preceeded and followed by a footnote in both books.
		/// The preceeding footnotes are identical and the following footnotes are identical;
		/// only the text between them is different.
		/// </summary>
		/// <remarks>regression test for TE-4174, TE-4667</remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_SimpleText_FootnoteBeforeAfter()
		{
			// build Current section
			IScrSection sectionCurr = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.ChapterNumber);
			IScrFootnote footnote1Curr = AddFootnote(m_genesis, para1Curr, 1, "footnote1 text");
			AddRunToMockedPara(para1Curr, "Current", Cache.DefaultVernWs);
			IScrFootnote footnote2Curr = AddFootnote(m_genesis, para1Curr, 9, "footnote2 text");

			// build Revision section
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.ChapterNumber);
			IScrFootnote footnote1Rev = AddFootnote(m_genesisRevision, para1Rev, 1, "footnote1 text");
			AddRunToMockedPara(para1Rev, "Rev", Cache.DefaultVernWs);
			IScrFootnote footnote2Rev = AddFootnote(m_genesisRevision, para1Rev, 5, "footnote2 text");

			Assert.AreEqual(2, m_genesis.FootnotesOS.Count);
			Assert.AreEqual(2, m_genesisRevision.FootnotesOS.Count);
			Assert.IsTrue(footnote1Curr != footnote1Rev);
			Assert.IsTrue(footnote2Curr != footnote2Rev);

			// Detect differences
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis

			// quick check of the diffs
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff, 01001001, DifferenceType.TextDifference,
				para1Curr, 2, 9,  // chapter number and footnotes are not included
				para1Rev, 2, 5);

			// Do the "ReplaceCurrentWithRevision" action
			m_bookMerger.ReplaceCurrentWithRevision(diff);

			// we expect that the footnotes are not touched, but text between them is changed

			// check the footnote collections for the books
			Assert.AreEqual(2, m_genesis.FootnotesOS.Count);
			Assert.AreEqual(2, m_genesisRevision.FootnotesOS.Count);

			//Verify the changed Current paragraph
			IScrTxtPara paraNew = diff.ParaCurr;
			Assert.AreEqual("1" + StringUtils.kChObject + "Rev" + StringUtils.kChObject, paraNew.Contents.Text);

			// The Current footnote1 object should not have changed
			IScrFootnote footnoteNew = m_genesis.FootnotesOS[0];
			Assert.AreEqual(footnote1Curr, footnoteNew);
			Assert.AreEqual(1, footnoteNew.ParagraphsOS.Count);
			Assert.AreEqual("footnote1 text", ((IScrTxtPara)footnoteNew[0]).Contents.Text);
			VerifyFootnote(footnoteNew, paraNew, 1);

			// The Current footnote2 object should not have changed
			IScrFootnote footnoteNew2 = m_genesis.FootnotesOS[1];
			Assert.AreEqual(footnote2Curr, footnoteNew2);
			Assert.AreEqual(1, footnoteNew2.ParagraphsOS.Count);
			Assert.AreEqual("footnote2 text", ((IScrTxtPara)footnoteNew2[0]).Contents.Text);
			// but its ORC position has changed to match the Revision
			VerifyFootnote(footnoteNew2, paraNew, 5);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when a footnote
		/// is missing in the current. The current contains one footnote. The revision contains
		/// two adjacent footnotes with text identical to the footnote in the current.
		/// Test for TE-7910.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_FootnoteMissingInCurrent_Identical()
		{
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara paraCur1 = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(paraCur1, 1, 1, "Verse 1.");
			IScrTxtPara paraCur2 = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(paraCur2, 0, 2, "Verse 2.");
			IScrTxtPara paraCur3 = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(paraCur3, 0, 3, "Verse 3.");
			IScrFootnote footnoteCur1 = AddFootnote(m_genesis, paraCur1, 7, "note one");
			IScrFootnote footnoteCur2 = AddFootnote(m_genesis, paraCur2, 8, "same text");

			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara paraRev1 = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(paraRev1, 1, 1, "Verse 1.");
			IScrTxtPara paraRev2 = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(paraRev2, 0, 2, "Verse 2.");
			IScrTxtPara paraRev3 = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(paraRev3, 0, 3, "Verse 3.");
			IScrFootnote footnoteRev1 = AddFootnote(m_genesisRevision, paraRev1, 7, "note one");
			IScrFootnote footnoteRev2 = AddFootnote(m_genesisRevision, paraRev2, 8, "same text");
			IScrFootnote footnoteRev3 = AddFootnote(m_genesisRevision, paraRev2, 9, "same text");

			// find the diffs
			m_bookMerger.DetectDifferences(null);

			// verify the differences
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, new BCVRef(01001002), DifferenceType.FootnoteMissingInCurrent,
				paraCur2, 9, 9, paraRev2, 9, 10);
			Assert.AreEqual(1, diff1.SubDiffsForORCs.Count);
			DiffTestHelper.VerifySubDiffFootnoteRev(diff1, 0, footnoteRev3);

			// Revert the difference (restore the footnote).
			Assert.AreEqual(2, m_genesis.FootnotesOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(3, m_genesis.FootnotesOS.Count);
			Assert.AreEqual(footnoteCur1.Guid, m_genesis.FootnotesOS[0].Guid, "The first footnote should have remained the same.");
			Assert.AreEqual(footnoteCur2.Guid, m_genesis.FootnotesOS[1].Guid, "The second footnote should have remained the same.");
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when a footnote
		/// is added to the current. The revision contains one footnote. The current contains
		/// two adjacent footnotes with text identical to the footnote in the revision.
		/// Test for TE-7910.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_FootnoteAddedToCurrent_Identical()
		{
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara paraCur1 = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(paraCur1, 1, 1, "Verse 1.");
			IScrTxtPara paraCur2 = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(paraCur2, 0, 2, "Verse 2.");
			IScrTxtPara paraCur3 = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(paraCur3, 0, 3, "Verse 3.");
			IScrFootnote footnoteCur1 = AddFootnote(m_genesis, paraCur1, 7, "note one");
			IScrFootnote footnoteCur2 = AddFootnote(m_genesis, paraCur2, 8, "same text");
			IScrFootnote footnoteCur3 = AddFootnote(m_genesis, paraCur2, 9, "same text");

			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara paraRev1 = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(paraRev1, 1, 1, "Verse 1.");
			IScrTxtPara paraRev2 = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(paraRev2, 0, 2, "Verse 2.");
			IScrTxtPara paraRev3 = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(paraRev3, 0, 3, "Verse 3.");
			IScrFootnote footnoteRev1 = AddFootnote(m_genesisRevision, paraRev1, 7, "note one");
			IScrFootnote footnoteRev2 = AddFootnote(m_genesisRevision, paraRev2, 8, "same text");

			// find the diffs
			m_bookMerger.DetectDifferences(null);

			// verify the differences
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, new BCVRef(01001002), DifferenceType.FootnoteAddedToCurrent,
				paraCur2, 9, 10, paraRev2, 9, 9);
			Assert.AreEqual(1, diff1.SubDiffsForORCs.Count);
			DiffTestHelper.VerifySubDiffFootnoteCurr(diff1, 0, footnoteCur3);

			// Revert the difference (delete the footnote).
			Assert.AreEqual(3, m_genesis.FootnotesOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(2, m_genesis.FootnotesOS.Count);
			Assert.AreEqual(footnoteCur1.Guid, m_genesis.FootnotesOS[0].Guid, "The first footnote should have remained the same.");
			Assert.AreEqual(footnoteCur2.Guid, m_genesis.FootnotesOS[1].Guid, "The second footnote should have remained the same.");
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// current book and the revision have multiple changes in the same paragraph.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MultipleChangesInPara()
		{
			// build Current section
			IScrSection sectionCurr = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Curr, "Current", Cache.DefaultVernWs);
			AddRunToMockedPara(para1Curr, "2", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "Current", Cache.DefaultVernWs);
			AddRunToMockedPara(para1Curr, "3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "Current", Cache.DefaultVernWs);

			// build Revision section
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Rev, "Rev", Cache.DefaultVernWs);
			AddRunToMockedPara(para1Rev, "2", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "Abc", Cache.DefaultVernWs);
			AddRunToMockedPara(para1Rev, "3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "Rev", Cache.DefaultVernWs);

			// Detect differences and verify that they are correct
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Assert.AreEqual(3, m_bookMerger.Differences.Count);

			// The first difference should be a text differenc in verse one
			Difference firstDiff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, firstDiff.RefStart);
			Assert.AreEqual(DifferenceType.TextDifference, firstDiff.DiffType);
			Assert.AreEqual(para1Curr, firstDiff.ParaCurr);
			Assert.AreEqual(1, firstDiff.IchMinCurr);
			Assert.AreEqual(8, firstDiff.IchLimCurr);
			Assert.AreEqual(para1Rev, firstDiff.ParaRev);
			Assert.AreEqual(1, firstDiff.IchMinRev);
			Assert.AreEqual(4, firstDiff.IchLimRev);

			// The second diff should be a text difference in verse two
			Difference secondDiff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001002, secondDiff.RefStart);
			Assert.AreEqual(DifferenceType.TextDifference, secondDiff.DiffType);
			Assert.AreEqual(para1Curr, secondDiff.ParaCurr);
			Assert.AreEqual(9, secondDiff.IchMinCurr);
			Assert.AreEqual(16, secondDiff.IchLimCurr);
			Assert.AreEqual(para1Rev, secondDiff.ParaRev);
			Assert.AreEqual(5, secondDiff.IchMinRev);
			Assert.AreEqual(8, secondDiff.IchLimRev);

			// The third diff should be a text difference in verse three
			Difference thirdDiff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001003, thirdDiff.RefStart);
			Assert.AreEqual(DifferenceType.TextDifference, thirdDiff.DiffType);
			Assert.AreEqual(para1Curr, thirdDiff.ParaCurr);
			Assert.AreEqual(17, thirdDiff.IchMinCurr);
			Assert.AreEqual(24, thirdDiff.IchLimCurr);
			Assert.AreEqual(para1Rev, thirdDiff.ParaRev);
			Assert.AreEqual(9, thirdDiff.IchMinRev);
			Assert.AreEqual(12, thirdDiff.IchLimRev);

			// Do the "ReplaceCurrentWithRevision" action on middle diff
			// and verify its result
			m_bookMerger.ReplaceCurrentWithRevision(secondDiff);
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			IScrTxtPara paraCurr = para1Curr;
			Assert.AreEqual("1Current2Abc3Current", paraCurr.Contents.Text);
			Assert.AreEqual(1, firstDiff.IchMinCurr);
			Assert.AreEqual(8, firstDiff.IchLimCurr);
			Assert.AreEqual(9, secondDiff.IchMinCurr);
			Assert.AreEqual(16, secondDiff.IchLimCurr);
			Assert.AreEqual(13, thirdDiff.IchMinCurr);
			Assert.AreEqual(20, thirdDiff.IchLimCurr);
			// verify detailed changes in the para
			Assert.AreEqual(6, paraCurr.Contents.RunCount);
			AssertEx.RunIsCorrect(paraCurr.Contents, 0,
				"1", ScrStyleNames.ChapterNumber, Cache.DefaultVernWs, true);
			AssertEx.RunIsCorrect(paraCurr.Contents, 1,
				"Current", null, Cache.DefaultVernWs, true);
			AssertEx.RunIsCorrect(paraCurr.Contents, 2,
				"2", ScrStyleNames.VerseNumber, Cache.DefaultVernWs, true);
			AssertEx.RunIsCorrect(paraCurr.Contents, 3,
				"Abc", null, Cache.DefaultVernWs, true);
			AssertEx.RunIsCorrect(paraCurr.Contents, 4,
				"3", ScrStyleNames.VerseNumber, Cache.DefaultVernWs, true);
			AssertEx.RunIsCorrect(paraCurr.Contents, 5,
				"Current", null, Cache.DefaultVernWs, true);

			// Do the replace on remaining diffs, in any order
			m_bookMerger.ReplaceCurrentWithRevision(thirdDiff);
			m_bookMerger.ReplaceCurrentWithRevision(firstDiff);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// current paragraph has a missing verse in the middle of the paragraph.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_VerseMissingInCurrent_MidPara()
		{
			// build Current section
			IScrSection sectionCurr = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Curr, "Verse1", Cache.DefaultVernWs);
			AddRunToMockedPara(para1Curr, "3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "Verse3", Cache.DefaultVernWs);

			// build Revision section
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Rev, "Verse1", Cache.DefaultVernWs);
			AddRunToMockedPara(para1Rev, "2", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "Verse2", Cache.DefaultVernWs);
			AddRunToMockedPara(para1Rev, "3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "Verse3Rev", Cache.DefaultVernWs);

			// Detect differences and verify that they are correct
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// Verse 2 is missing in the current
			Difference firstDiff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.VerseMissingInCurrent, firstDiff.DiffType);
			Assert.AreEqual(01001002, firstDiff.RefStart);
			Assert.AreEqual(para1Curr, firstDiff.ParaCurr);
			Assert.AreEqual(7, firstDiff.IchMinCurr);
			Assert.AreEqual(7, firstDiff.IchLimCurr);
			Assert.AreEqual(para1Rev, firstDiff.ParaRev);
			Assert.AreEqual(7, firstDiff.IchMinRev);
			Assert.AreEqual(14, firstDiff.IchLimRev);

			// Verse 3 has a text difference
			Difference secondDiff = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(01001003, secondDiff.RefStart);
			Assert.AreEqual(DifferenceType.TextDifference, secondDiff.DiffType);
			Assert.AreEqual(para1Curr, secondDiff.ParaCurr);
			Assert.AreEqual(14, secondDiff.IchMinCurr);
			Assert.AreEqual(14, secondDiff.IchLimCurr);
			Assert.AreEqual(para1Rev, secondDiff.ParaRev);
			Assert.AreEqual(21, secondDiff.IchMinRev);
			Assert.AreEqual(24, secondDiff.IchLimRev);

			// Do the "ReplaceCurrentWithRevision" action on first diff
			m_bookMerger.ReplaceCurrentWithRevision(firstDiff);

			// Verify the changed paragraph
			Assert.AreEqual("1Verse12Verse23Verse3", para1Curr.Contents.Text);

			// difference in verse 3 remains
			Difference remainingDiff = m_bookMerger.Differences.CurrentDifference;
			Assert.AreEqual(01001003, remainingDiff.RefStart);
			Assert.AreEqual(01001003, remainingDiff.RefEnd);
			Assert.AreEqual(21, remainingDiff.IchMinCurr); // diff ich updated
			Assert.AreEqual(21, remainingDiff.IchLimCurr);

			// Do the replace on remaining diff
			m_bookMerger.ReplaceCurrentWithRevision(secondDiff);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// current paragraph has a missing verse at the start of a paragraph that contains a
		/// subsequent verse). TE-9089
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_VerseMissingInCurrent_AtStartOfPara()
		{
			// build Current section
			IScrSection sectionCurr = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 1, 1, "Verse1Chap1");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 3, "Verse3Chap1");

			// build Revision section
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 1, 1, "Verse1Chap1");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 2, "Verse2Chap1");
			AddVerse(para2Rev, 0, 3, "Verse3Chap1");

			// Detect differences and verify that they are correct
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff, 01001002, 01001002, DifferenceType.VerseMissingInCurrent,
				para2Curr, 0, 0, para2Rev, 0, "2Verse2Chap1".Length);

			// Do the "ReplaceCurrentWithRevision" action on first diff
			m_bookMerger.ReplaceCurrentWithRevision(diff);

			// Verify the verse was added
			Assert.AreEqual(2, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("11Verse1Chap1", sectionCurr.ContentOA[0].Contents.Text);
			Assert.AreEqual("2Verse2Chap13Verse3Chap1", sectionCurr.ContentOA[1].Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}


		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// current version is missing a multi-paragraph verse and the following verse.
		/// This is the scenario described in TE-7108:
		/// Saved or Imported Version:
		///   (1) xxxx (2) xxxxx
		///   yyyyyy
		///   zzzzzzzzz (3) aaaaaaaa
		///
		/// Current version:
		///   (1) xxxxx
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MissingMultiParaVerseFollowedByAnotherVerse()
		{
			// build Current section
			IScrSection sectionCurr = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 1, 1, "Verse 1");

			// build Revision section
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 1, 1, "Verse 1");
			AddVerse(para1Rev, 0, 2, "Verse 2");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "More of verse 2");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 0, "End of verse 2");
			AddVerse(para3Rev, 0, 3, "Verse 3");

			// Detect differences and verify that they are correct
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			Difference firstDiff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(firstDiff, 1001002, DifferenceType.ParagraphStructureChange);
			DiffTestHelper.VerifySubDiffTextCompared(firstDiff, 0, DifferenceType.TextDifference,
				para1Curr, para1Curr.Contents.Length, para1Curr.Contents.Length,
				para1Rev, "11Verse 1".Length, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffParaAdded(firstDiff, 1, DifferenceType.ParagraphMissingInCurrent,
				para2Rev, para2Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(firstDiff, 2, DifferenceType.TextDifference,
				null, 0, 0, para3Rev, 0, "End of verse 2".Length);

			Difference secondDiff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(secondDiff, 1001003, DifferenceType.VerseMissingInCurrent,
				para1Curr, para1Curr.Contents.Length, para3Rev, "End of verse 2".Length, para3Rev.Contents.Length);

			// Do the "ReplaceCurrentWithRevision" action on first diff
			m_bookMerger.ReplaceCurrentWithRevision(firstDiff);

			// Verify the new paragraph and chapter were added
			Assert.AreEqual(3, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("11Verse 12Verse 2", sectionCurr.ContentOA[0].Contents.Text);
			Assert.AreEqual("More of verse 2", sectionCurr.ContentOA[1].Contents.Text);
			Assert.AreEqual("End of verse 2", sectionCurr.ContentOA[2].Contents.Text);

			// Do the replace on remaining diff
			m_bookMerger.ReplaceCurrentWithRevision(secondDiff);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// current paragraph has missing verses, where the second one is split across two
		/// paragraphs (i.e., two whole paragraphs missing). TE-9089
		/// Saved or Imported Version:
		///   C1 V1 Some text
		///   V2 Some text V3 Some text
		///   More text
		///
		/// Current version:
		///   C1 V1 Some text
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ComplexVersesMissingInCurrent()
		{
			// build Current section
			IScrSection sectionCurr = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 1, 1, "Verse 1");

			// build Revision section
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 1, 1, "Verse 1");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 2, "Verse 2");
			AddVerse(para2Rev, 0, 3, "Verse 3");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 0, "More of verse 3");

			// Detect differences and verify that they are correct
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			Difference firstDiff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(firstDiff, 01001002, DifferenceType.VerseMissingInCurrent,
				para1Curr, para1Curr.Contents.Length, para2Rev, 0, "2Verse 2".Length);

			Difference secondDiff = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(secondDiff, 1001003, DifferenceType.ParagraphStructureChange);
			DiffTestHelper.VerifySubDiffTextCompared(secondDiff, 0, DifferenceType.TextDifference,
				para1Curr, para1Curr.Contents.Length, para1Curr.Contents.Length,
				para2Rev, "2Verse 2".Length, para2Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffParaAdded(secondDiff, 1, DifferenceType.ParagraphMissingInCurrent,
				para3Rev, para3Rev.Contents.Length);

			// Do the "ReplaceCurrentWithRevision" action on first diff
			m_bookMerger.ReplaceCurrentWithRevision(firstDiff);

			// Verify the new paragraph and chapter were added
			Assert.AreEqual(2, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("11Verse 1", sectionCurr.ContentOA[0].Contents.Text);
			Assert.AreEqual("2Verse 2", sectionCurr.ContentOA[1].Contents.Text);
		//	Assert.AreEqual("31Verse1Chap3", sectionCurr.ContentOA[2].Contents.Text);

			// Do the replace on remaining diff
			m_bookMerger.ReplaceCurrentWithRevision(secondDiff);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// current paragraph has a missing chapter (with one verse). TE-9089
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ChapterMissingInCurrent()
		{
			// build Current section
			IScrSection sectionCurr = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 1, 1, "Verse1Chap1");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 3, 1, "Verse1Chap3");

			// build Revision section
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 1, 1, "Verse1Chap1");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 2, 1, "Verse1Chap2");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 0, "Verse1Chap2Cont");
			IScrTxtPara para4Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para4Rev, 3, 1, "Verse1Chap3");

			// Detect differences and verify that they are correct
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, 01002001, 01002001, DifferenceType.ParagraphStructureChange);
			Assert.AreEqual(3, diff.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffParaReferencePoints(diff, para1Curr, para1Curr.Contents.Length, para1Rev, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffParaAdded(diff, 1, DifferenceType.ParagraphMissingInCurrent,
				para2Rev, para2Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffParaAdded(diff, 2, DifferenceType.ParagraphMissingInCurrent,
				para3Rev, para3Rev.Contents.Length);

			// Do the "ReplaceCurrentWithRevision" action on first diff
			m_bookMerger.ReplaceCurrentWithRevision(diff);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// revision has an additional verse at the end of the last paragraph, which is missing
		/// in the current book.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_VerseMissingInCurrent_EndOfLastPara()
		{
			// build Current section
			IScrSection sectionCurr = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Curr, "Verse1", Cache.DefaultVernWs);
			AddRunToMockedPara(para1Curr, "2", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "Verse2", Cache.DefaultVernWs);

			// build Revision section
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Rev, "Verse1", Cache.DefaultVernWs);
			AddRunToMockedPara(para1Rev, "2", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "Verse2", Cache.DefaultVernWs);
			AddRunToMockedPara(para1Rev, "3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "Verse3", Cache.DefaultVernWs);

			// Detect differences and verify that they are correct
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.VerseMissingInCurrent, diff.DiffType);
			Assert.AreEqual(01001003, diff.RefStart);
			Assert.AreEqual(para1Curr, diff.ParaCurr);
			Assert.AreEqual(14, diff.IchMinCurr);
			Assert.AreEqual(14, diff.IchLimCurr);
			Assert.AreEqual(para1Rev, diff.ParaRev);
			Assert.AreEqual(14, diff.IchMinRev);
			Assert.AreEqual(21, diff.IchLimRev);

			// Do the "ReplaceCurrentWithRevision" action on diff
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual(0, m_bookMerger.Differences.Count);

			// Verify the changed paragraph
			IScrTxtPara paraCurr = para1Curr;
			Assert.AreEqual("1Verse12Verse23Verse3", paraCurr.Contents.Text);
			Assert.AreEqual(01001003, sectionCurr.VerseRefMax);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

	// TODO: Currently we don't handle the following case correctly!!
	// Revision: para1(v1, v2) para2(v3)
	// Current: para1(v1) para2(v3)
	// ReplaceCurrentWithRevision results in para1(v1) para2(v2, v3).
	// public void ReplaceCurWithRev_VerseMissingInCurrent_ParaFollows()

	//TODO:
	// public void ReplaceCurWithRev_VerseAddedInCurrent()


		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// current book and the revision have a single difference in the text of the book title.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_Title()
		{
			//TODO: add difference in a second title paragraph
			// add book titles
			AddTitleToMockedBook(m_genesis, "My book title");
			AddTitleToMockedBook(m_genesisRevision, "My Genesis title");

			// Create Current section
			IScrSection sectionCurr = CreateSection(m_genesis, "My aching head!");
			AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);

			// Create Revision section
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);

			// Detect differences and verify that they are correct
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001000, diff.RefStart);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(m_genesis.TitleOA[0], diff.ParaCurr);
			Assert.AreEqual(3, diff.IchMinCurr);
			Assert.AreEqual(7, diff.IchLimCurr);
			Assert.AreEqual(m_genesisRevision.TitleOA[0], diff.ParaRev);
			Assert.AreEqual(3, diff.IchMinRev);
			Assert.AreEqual(10, diff.IchLimRev);

			// Do the "ReplaceCurrentWithRevision" action
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual(0, m_bookMerger.Differences.Count);

			// Verify the changed paragraph
			Assert.AreEqual("My Genesis title",
				((IScrTxtPara)m_genesis.TitleOA[0]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// current book and the revision have a single difference in the text of the section
		/// head.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_SectionHead()
		{
			//TODO: add difference in a second section head paragraph
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCurr = CreateSection(m_genesis, "My section head!");
			AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);

			// Create Current section
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);

			// Detect differences and verify that they are correct
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001001, diff.RefStart);
			Assert.AreEqual(DifferenceType.TextDifference, diff.DiffType);
			Assert.AreEqual(sectionCurr.HeadingOA[0], diff.ParaCurr);
			Assert.AreEqual(3, diff.IchMinCurr);
			Assert.AreEqual(10, diff.IchLimCurr);
			Assert.AreEqual(sectionRev.HeadingOA[0], diff.ParaRev);
			Assert.AreEqual(3, diff.IchMinRev);
			Assert.AreEqual(9, diff.IchLimRev);

			// Do the "ReplaceCurrentWithRevision" action
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual(0, m_bookMerger.Differences.Count);

			// Verify the changed section head
			Assert.AreEqual("My aching head!",
				((IScrTxtPara)sectionCurr.HeadingOA[0]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}
		#endregion

		#region ReplaceCurrentWithRevision: Scripture Paragraphs added/missing
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// current book has paragraphs missing in the Scripture.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaMissingInCurrent()
		{
			// Build Current section (one paragraph with verse 2)
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara paraCurr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraCurr, "2", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(paraCurr, "verse two", Cache.DefaultVernWs);

			// Build Revision section (three paragraphs - verses 1, 2, and 3)
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "verse one", Cache.DefaultVernWs);
			// this second para matches the para in the current
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "2", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "verse two", Cache.DefaultVernWs);
			// this third para is also missing in the current
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, "List Item1");
			AddRunToMockedPara(para3Rev, "3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3Rev, "verse three", Cache.DefaultVernWs);
			// and the third para includes a footnote
			IScrFootnote footnote3Rev = AddFootnote(m_genesisRevision, para3Rev, 1, "New footnote text");

			// Detect differences
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// Get the first difference, verify it, and do a ReplaceCurrentWithRevision
			// to simulate clicking the "revert to old" button
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff.DiffType);
			Assert.AreEqual(01001001, diff.RefStart);

			m_bookMerger.ReplaceCurrentWithRevision(diff); // we expect this to insert the new first para
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			paraCurr = (IScrTxtPara)sectionCur.ContentOA[0];
			Assert.AreEqual(ScrStyleNames.NormalParagraph, paraCurr.StyleRules.GetStrPropValue((int)FwTextStringProp.kstpNamedStyle));
			Assert.AreEqual("1verse one", paraCurr.Contents.Text);
			// verify section refs are updated
			Assert.AreEqual(01001001, sectionCur.VerseRefStart);
			Assert.AreEqual(01001002, sectionCur.VerseRefEnd);

			// Verify the next difference, and do a ReplaceCurrentWithRevision for it too
			diff = m_bookMerger.Differences.CurrentDifference;
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff.DiffType);
			Assert.AreEqual(01001003, diff.RefStart);

			m_bookMerger.ReplaceCurrentWithRevision(diff);  // we expect this to insert the new last para
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			paraCurr = (IScrTxtPara)sectionCur.ContentOA[2];
			Assert.AreEqual("List Item1", paraCurr.StyleRules.GetStrPropValue((int)FwTextStringProp.kstpNamedStyle));

			ITsString tssNewParaContents = paraCurr.Contents;
			Assert.AreEqual(3, tssNewParaContents.RunCount);
			AssertEx.RunIsCorrect(tssNewParaContents, 0, "3", ScrStyleNames.VerseNumber, Cache.DefaultVernWs, true);
			// Run #1 is ORC, checked below...
			AssertEx.RunIsCorrect(tssNewParaContents, 2, "verse three", null, Cache.DefaultVernWs, true);

			IScrFootnote footnoteNew = m_genesis.FootnotesOS[0];
			VerifyFootnote(footnoteNew, paraCurr, 1);

			// verify section refs are updated
			Assert.AreEqual(01001001, sectionCur.VerseRefStart);
			Assert.AreEqual(01001003, sectionCur.VerseRefEnd);

			Assert.AreEqual(0, m_bookMerger.Differences.Count);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// current book has paragraphs added.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaAddedToCurrent()
		{
			// Build Current section - three paragraph with verses 1, 2 and 3
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara paraCurr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraCurr, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(paraCurr, "verse one", Cache.DefaultVernWs);
			// this second para matches the para in the revision
			paraCurr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraCurr, "2", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(paraCurr, "verse two", Cache.DefaultVernWs);
			// this third para is also added to the current
			paraCurr = AddParaToMockedSectionContent(sectionCur, "List Item1");
			AddRunToMockedPara(paraCurr, "3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(paraCurr, "verse three", Cache.DefaultVernWs);
			// and the third para includes a footnote
			IScrFootnote footnote1Rev = AddFootnote(m_genesisRevision, paraCurr, 1, "New footnote text");

			// Build Revision section - a single para with verse two that matches the second curr para
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara paraRev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraRev, "2", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(paraRev, "verse two", Cache.DefaultVernWs);

			// Detect differences
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// Get the first difference, verify it, and do a ReplaceCurrentWithRevision
			// to simulate clicking the "revert to old" button
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff.DiffType);
			Assert.AreEqual(01001001, diff.RefStart);

			m_bookMerger.ReplaceCurrentWithRevision(diff); // we expect this to delete the new first para
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			paraCurr = (IScrTxtPara)sectionCur.ContentOA[0];
			Assert.AreEqual("2verse two", paraCurr.Contents.Text);
			Assert.AreEqual(01001002, sectionCur.VerseRefStart);
			Assert.AreEqual(01001003, sectionCur.VerseRefEnd);

			// Verify the next difference, and do a ReplaceCurrentWithRevision for it too
			diff = m_bookMerger.Differences.CurrentDifference;
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff.DiffType);
			Assert.AreEqual(01001003, diff.RefStart);

			m_bookMerger.ReplaceCurrentWithRevision(diff);  // we expect this to delete the new last para
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			paraCurr = (IScrTxtPara)sectionCur.ContentOA[0];
			Assert.AreEqual(ScrStyleNames.NormalParagraph, paraCurr.StyleRules.GetStrPropValue((int)FwTextStringProp.kstpNamedStyle));
			Assert.AreEqual("2verse two", paraCurr.Contents.Text);

			Assert.AreEqual(0, m_genesis.FootnotesOS.Count);
			Assert.AreEqual(01001002, sectionCur.VerseRefStart);
			Assert.AreEqual(01001002, sectionCur.VerseRefEnd);

			Assert.AreEqual(0, m_bookMerger.Differences.Count);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// current book has a paragraph added to the start of a section, and the following
		/// paragraph is edited so that some additional text is added at the start. TE-9066
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaAddedToCurrent_AdjacentAdditionAtStartOfFollowingPara()
		{
			// Build Current section - three paragraphs with verses 1-4 (but verse 1 is implicit)
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara paraCurr1 = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraCurr1, "verse one:", Cache.DefaultVernWs);
			IScrTxtPara paraCurr2 = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraCurr2, "and the rest of verse one", Cache.DefaultVernWs);
			AddRunToMockedPara(paraCurr2, "2", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(paraCurr2, "verse two", Cache.DefaultVernWs);
			AddRunToMockedPara(paraCurr2, "3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(paraCurr2, "verse drei (three)", Cache.DefaultVernWs);
			IScrTxtPara paraCurr3 = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraCurr3, "4", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(paraCurr3, "verse four", Cache.DefaultVernWs);

			// Build Revision section - two paras with verses 2-4
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara paraRev1 = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraRev1, "2", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(paraRev1, "verse two", Cache.DefaultVernWs);
			AddRunToMockedPara(paraRev1, "3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(paraRev1, "verse three", Cache.DefaultVernWs);
			IScrTxtPara paraRev2 = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraRev2, "4", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(paraRev2, "verse four", Cache.DefaultVernWs);

			// Detect differences
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Assert.AreEqual(2, m_bookMerger.Differences.Count);
			// Get the first difference, verify it, and do a ReplaceCurrentWithRevision
			// to simulate clicking the "revert to old" button
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, 01001001, 01001001, DifferenceType.ParagraphStructureChange);
			Assert.AreEqual(3, diff.SubDiffsForParas.Count);
			Assert.IsNull(diff.SubDiffsForORCs);
			DiffTestHelper.VerifySubDiffParaReferencePoints(diff, paraCurr1, 0, paraRev1, 0);
			DiffTestHelper.VerifySubDiffParaAdded(diff, 1, DifferenceType.ParagraphAddedToCurrent,
				paraCurr1, paraCurr1.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff, 2, DifferenceType.TextDifference,
				paraCurr2, 0, "and the rest of verse one".Length, null, 0, 0);

			m_bookMerger.ReplaceCurrentWithRevision(diff); // we expect this to delete the new first para
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			paraCurr1 = (IScrTxtPara)sectionCur.ContentOA[0];
			Assert.AreEqual("2verse two3verse drei (three)", paraCurr1.Contents.Text);
			Assert.AreEqual(01001002, sectionCur.VerseRefStart);
			Assert.AreEqual(01001004, sectionCur.VerseRefEnd);

			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			diff = m_bookMerger.Differences.CurrentDifference;
			DiffTestHelper.VerifyParaDiff(diff, 01001003, DifferenceType.TextDifference, paraCurr2, 17, 29, paraRev1, 17, 22);

			m_bookMerger.ReplaceCurrentWithRevision(diff); // we expect this to delete the new first para
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			paraCurr1 = (IScrTxtPara)sectionCur.ContentOA[0];
			Assert.AreEqual("2verse two3verse three", paraCurr1.Contents.Text);
			Assert.AreEqual(01001002, sectionCur.VerseRefStart);
			Assert.AreEqual(01001004, sectionCur.VerseRefEnd);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// current book has a paragraph added before the start of verse 1. TE-9067
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParagraphAddedBeforeVerse1()
		{
			// Build Current section
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara paraCurr1 = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraCurr1, "Some text.", Cache.DefaultVernWs);
			IScrTxtPara paraCurr2 = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraCurr2, "verse one. ", Cache.DefaultVernWs);
			AddRunToMockedPara(paraCurr2, "2", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(paraCurr2, "verse two.", Cache.DefaultVernWs);

			// Build Revision section
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara paraRev1 = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraRev1, "verse one. ", Cache.DefaultVernWs);
			AddRunToMockedPara(paraRev1, "2", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(paraRev1, "verse two.", Cache.DefaultVernWs);

			// Detect differences
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			// Get the difference, verify it, and do a ReplaceCurrentWithRevision
			// to simulate clicking the "revert to old" button
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff, 01001001, 01001001, DifferenceType.ParagraphStructureChange);
			Assert.AreEqual(2, diff.SubDiffsForParas.Count);
			Assert.IsNull(diff.SubDiffsForORCs);
			DiffTestHelper.VerifySubDiffParaReferencePoints(diff, paraCurr1, 0, paraRev1, 0);
			DiffTestHelper.VerifySubDiffParaAdded(diff, 1, DifferenceType.ParagraphAddedToCurrent,
				paraCurr1, paraCurr1.Contents.Length);

			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			paraCurr1 = (IScrTxtPara)sectionCur.ContentOA[0];
			Assert.AreEqual("verse one. 2verse two.", paraCurr1.Contents.Text);
			Assert.AreEqual(01001001, sectionCur.VerseRefStart);
			Assert.AreEqual(01001002, sectionCur.VerseRefEnd);

			Assert.AreEqual(0, m_bookMerger.Differences.Count);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// current book has a paragraph added to the start of a section, the preceding
		/// paragraph is edited so that some additional text is added at the end, and the
		/// following paragraph is edited so that some additional text is added at the start.
		/// FWR-2976
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaAddedToCurrent_AdjacentAdditionsOnEitherSide()
		{
			// Build Current section - three paragraphs with verses 1-2
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara paraCurr1 = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(paraCurr1, 0, 1, "verse one. Some more text.");
			IScrTxtPara paraCurr2 = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraCurr2, "This is a new paragraph", Cache.DefaultVernWs);
			IScrTxtPara paraCurr3 = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraCurr3, "Added text at start of para. ", Cache.DefaultVernWs);
			AddVerse(paraCurr3, 0, 2, "verse two.");

			// Build Revision section - two paras with verses 1-2
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara paraRev1 = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(paraRev1, 0, 1, "verse one.");
			IScrTxtPara paraRev2 = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(paraRev2, 0, 2, "verse two.");

			// Detect differences
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis

			// TODO (FWR-2976): Ideally, I would like this set of assertions to pass. It seems to me this should be treated as a single complex
			// difference or possibly as three: a text difference, added para, and another text difference. But at least it isn't
			// crashing now when I revert, so I guess that's good enough for now.

			//Assert.AreEqual(1, m_bookMerger.Differences.Count);
			//// Get the first difference, verify it, and do a ReplaceCurrentWithRevision
			//// to simulate clicking the "revert to old" button
			Difference diff = m_bookMerger.Differences.MoveFirst();
			//DiffTestHelper.VerifyParaStructDiff(diff, 01001001, 01001001, DifferenceType.ParagraphStructureChange);
			//Assert.AreEqual(3, diff.SubDiffsForParas.Count);
			//Assert.IsNull(diff.SubDiffsForORCs);
			//DiffTestHelper.VerifySubDiffParaReferencePoints(diff, paraCurr1, paraRev1.Contents.Length, paraRev1, paraRev1.Contents.Length);
			//DiffTestHelper.VerifySubDiffTextCompared(diff, 1, 01001001, 01001001,
			//    DifferenceType.TextDifference, paraCurr1, paraRev1.Contents.Length, paraCurr1.Contents.Length,
			//    paraRev1, paraRev1.Contents.Length, paraRev1.Contents.Length);
			//DiffTestHelper.VerifySubDiffParaAdded(diff, 2, DifferenceType.ParagraphAddedToCurrent, paraCurr2, paraCurr2.Contents.Length);
			//DiffTestHelper.VerifySubDiffTextCompared(diff, 3, 01001001, 01001001,
			//    DifferenceType.TextDifference, paraCurr3, 0, paraCurr3.Contents.Length,
			//    paraRev2, 0, 0);

			do
			{
				m_bookMerger.ReplaceCurrentWithRevision(diff);
				diff = m_bookMerger.Differences.CurrentDifference;
			}
			while (diff != null);

			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			paraCurr1 = (IScrTxtPara)sectionCur.ContentOA[0];
			Assert.AreEqual("1verse one.", paraCurr1.Contents.Text);
			paraCurr2 = (IScrTxtPara)sectionCur.ContentOA[1];
			Assert.AreEqual("2verse two.", paraCurr2.Contents.Text);
			Assert.AreEqual(01001001, sectionCur.VerseRefStart);
			Assert.AreEqual(01001002, sectionCur.VerseRefEnd);

			Assert.AreEqual(0, m_bookMerger.Differences.Count);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// Revision has an added paragraph with a footnote.
		/// Also, footnotes exist in prior matching paragraphs.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaMissingInCurrent_WithFootnotesBefore()
		{
			// Build Current section (one paragraph with verse 1)
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara paraCurr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraCurr, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(paraCurr, "verse one", Cache.DefaultVernWs);
			// and the first para includes a footnote
			IScrFootnote footnoteCur = AddFootnote(m_genesis, paraCurr, 10, "Footnote text for verse 1");

			// Build Revision section (three paragraphs - verses 1, 2, and 3)
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "verse one", Cache.DefaultVernWs);
			IScrFootnote footnoteRev1 = AddFootnote(m_genesisRevision, para1Rev, 10, "Footnote text for verse 1");
			// this second para is missing in the current
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "2", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "verse two", Cache.DefaultVernWs);
			// this third para is also missing in the current
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, "List Item1");
			AddRunToMockedPara(para3Rev, "3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3Rev, "verse three", Cache.DefaultVernWs);
			// and the third para includes a footnote
			IScrFootnote footnoteRev2 = AddFootnote(m_genesisRevision, para3Rev, 1, "New footnote text");

			// Detect differences
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// Get the first difference, verify it, and do a ReplaceCurrentWithRevision
			// to simulate clicking the "revert to old" button
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff.DiffType);
			Assert.AreEqual(01001002, diff.RefStart);

			// we expect this to insert the new second para
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);

			paraCurr = (IScrTxtPara)sectionCur.ContentOA[1];
			Assert.AreEqual(ScrStyleNames.NormalParagraph, paraCurr.StyleRules.GetStrPropValue((int)FwTextStringProp.kstpNamedStyle));
			Assert.AreEqual("2verse two", paraCurr.Contents.Text);
			// verify section refs are updated
			Assert.AreEqual(01001001, sectionCur.VerseRefStart);
			Assert.AreEqual(01001002, sectionCur.VerseRefEnd);

			// Verify the next difference, and do a ReplaceCurrentWithRevision for it too
			diff = m_bookMerger.Differences.CurrentDifference;
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff.DiffType);
			Assert.AreEqual(01001003, diff.RefStart);

			// we expect this to insert the new last para with a footnote
			m_bookMerger.ReplaceCurrentWithRevision(diff);

			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			// Verify that first footnote in first current para is still corrrect after restoring a para with footnotes
			paraCurr = (IScrTxtPara)sectionCur.ContentOA[0];
			Assert.AreEqual(ScrStyleNames.NormalParagraph, paraCurr.StyleRules.GetStrPropValue((int)FwTextStringProp.kstpNamedStyle));
			Assert.AreEqual("1verse one" + StringUtils.kChObject, paraCurr.Contents.Text);
			VerifyFootnote(footnoteCur, paraCurr, 10);

			paraCurr = (IScrTxtPara)sectionCur.ContentOA[2];
			Assert.AreEqual("List Item1", paraCurr.StyleRules.GetStrPropValue((int)FwTextStringProp.kstpNamedStyle));
			ITsString tssNewParaContents = paraCurr.Contents;
			Assert.AreEqual(3, tssNewParaContents.RunCount);
			Assert.AreEqual(2, m_genesis.FootnotesOS.Count);
			AssertEx.RunIsCorrect(tssNewParaContents, 0, "3", ScrStyleNames.VerseNumber, Cache.DefaultVernWs, true);
			// Run #1 is ORC, checked below...
			AssertEx.RunIsCorrect(tssNewParaContents, 2, "verse three", null, Cache.DefaultVernWs, true);

			IScrFootnote footnoteNew = m_genesis.FootnotesOS[1];
			VerifyFootnote(footnoteNew, paraCurr, 1);

			// verify section refs are updated
			Assert.AreEqual(01001001, sectionCur.VerseRefStart);
			Assert.AreEqual(01001003, sectionCur.VerseRefEnd);

			Assert.AreEqual(0, m_bookMerger.Differences.Count);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// Revision has an added paragraph with a footnote.
		/// Also, footnotes exist in subsequent matching paragraphs.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaMissingInCurrent_WithFootnotesAfter()
		{
			// Build Current section (one paragraph with verse 3)
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara paraCurr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraCurr, "3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(paraCurr, "verse three", Cache.DefaultVernWs);
			// and the first para includes a footnote
			IScrFootnote footnoteCur = AddFootnote(m_genesis, paraCurr, 12, "Original footnote text");

			// Build Revision section (three paragraphs - verses 1, 2, and 3)
			// the first para is missing in the Current
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "verse one", Cache.DefaultVernWs);
			// this second para is missing in the Current
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "2", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "verse two", Cache.DefaultVernWs);
			// this third para matches the para in the Current
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Rev, "3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3Rev, "verse three", Cache.DefaultVernWs);
			// and the third para includes a footnote
			IScrFootnote footnote1Rev = AddFootnote(m_genesisRevision, para3Rev, 12, "Original footnote text");

			// Detect differences
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// Get the first difference, verify it, and do a ReplaceCurrentWithRevision
			// to simulate clicking the "revert to old" button
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff.DiffType);
			Assert.AreEqual(01001001, diff.RefStart);

			// we expect this to insert the new first para
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);

			paraCurr = (IScrTxtPara)sectionCur.ContentOA[0];
			Assert.AreEqual(ScrStyleNames.NormalParagraph, paraCurr.StyleRules.GetStrPropValue((int)FwTextStringProp.kstpNamedStyle));
			Assert.AreEqual("1verse one", paraCurr.Contents.Text);
			// verify section refs are updated
			Assert.AreEqual(01001001, sectionCur.VerseRefStart);
			Assert.AreEqual(01001003, sectionCur.VerseRefEnd);

			// Verify the next difference, and do a ReplaceCurrentWithRevision for it too
			diff = m_bookMerger.Differences.CurrentDifference;
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff.DiffType);
			Assert.AreEqual(01001002, diff.RefStart);

			// we expect this to insert the new second para
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			paraCurr = (IScrTxtPara)sectionCur.ContentOA[1];
			Assert.AreEqual(ScrStyleNames.NormalParagraph, paraCurr.StyleRules.GetStrPropValue((int)FwTextStringProp.kstpNamedStyle));
			Assert.AreEqual("2verse two", paraCurr.Contents.Text);

			// verify footnotes in Current
			paraCurr = (IScrTxtPara)sectionCur.ContentOA[2];
			ITsString tssNewParaContents = paraCurr.Contents;
			Assert.AreEqual(3, tssNewParaContents.RunCount);
			Assert.AreEqual(1, m_genesis.FootnotesOS.Count);
			AssertEx.RunIsCorrect(tssNewParaContents, 0, "3", ScrStyleNames.VerseNumber, Cache.DefaultVernWs, true);
			AssertEx.RunIsCorrect(tssNewParaContents, 1, "verse three", null, Cache.DefaultVernWs, true);
			// Run #2 is ORC, checked below...

			IScrFootnote footnoteOrig = m_genesis.FootnotesOS[0];
			VerifyFootnote(footnoteOrig, paraCurr, 12);

			// verify section refs are updated
			Assert.AreEqual(01001001, sectionCur.VerseRefStart);
			Assert.AreEqual(01001003, sectionCur.VerseRefEnd);

			Assert.AreEqual(0, m_bookMerger.Differences.Count);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// current book has a paragraph missing in Scripture and it has no Scripture
		/// reference in the revision.
		/// Scenario:
		///     Revision            Current
		///     Section 1           Section 1
		///       Verse 1             Verse 1
		///     Section 2           Section 2
		///       some text           (empty)
		///     Section 3           Section 3
		///       Verse 2             Verse 2
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaMissingInCurrent_NoVerse()
		{
			// Build Current sections
			IScrSection section1Cur = CreateSection(m_genesis, "Section 1");
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(section1Cur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 0, 1, "Verse 1");

			IScrSection section2Cur = CreateSection(m_genesis, "Section 2");
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			//ITsPropsBldr propsBldr = paraBldr.ParaProps.GetBldr();
			//propsBldr.SetIntPropValues((int)FwTextPropType.ktptWs, 0, 0);
			//paraBldr.ParaProps = propsBldr.GetTextProps();
			paraBldr.CreateParagraph(section2Cur.ContentOA);

			IScrSection section3Cur = CreateSection(m_genesis, "Section 3");
			IScrTxtPara para3Cur = AddParaToMockedSectionContent(section3Cur, ScrStyleNames.NormalParagraph);
			AddVerse(para3Cur, 0, 2, "Verse 2");

			// Build Revision sections
			IScrSection section1Rev = CreateSection(m_genesisRevision, "Section 1");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 0, 1, "Verse 1");

			IScrSection section2Rev = CreateSection(m_genesisRevision, "Section 2");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "Some Text");

			IScrSection section3Rev = CreateSection(m_genesisRevision, "Section 3");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(section3Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 2, "Verse 2");

			// Detect differences
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			Difference diff = m_bookMerger.Differences.MoveFirst();
			IScrTxtPara destPara = (IScrTxtPara)section2Cur.ContentOA[0];

			DiffTestHelper.VerifyParaDiff(diff, 01001001, 01001001, DifferenceType.TextDifference,
				destPara, 0, 0, para2Rev, 0, para2Rev.Contents.Length);

			// Revert missing paragraph difference
			m_bookMerger.ReplaceCurrentWithRevision(diff);

			// We expect the text to be inserted into the second section, first empty paragraph.
			Assert.AreEqual("1Verse 1",
				((IScrTxtPara)section1Cur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("Some Text",
				((IScrTxtPara)section2Cur.ContentOA[0]).Contents.Text);
		}
		}


		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method when the replace might result in
		/// deleting the only paragraph in the Current IStText.
		/// The IStText should never be left with no paragraphs.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaAddedToCurrent_DeleteOnlyPara()
		{
			// build Current section - paragraph with verses 1, 2 and 3
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 0, 1, "verse one");
			AddVerse(para1Curr, 0, 2, "verse two");
			AddVerse(para1Curr, 0, 3, "verse three");

			// build Revision section - a single empty paragraph
			// Note: For this test we must have a cluster that produces a ParaAddedToCurrent diff
			// for the only paragraph in the Current section.
			// For now, an empty para in the Revision does produce this cluster and diff.
			// If future paragraph clustering does not do this, we'll have to try making intro paragraphs instead.
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara paraRev = AddEmptyPara(sectionRev);

			// Detect differences
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// Verify the difference
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff1.DiffType);
			Assert.AreEqual(01001001, diff1.RefStart);
			Assert.AreEqual(01001003, diff1.RefEnd);

			// Revert the difference.
			// This would normally result in the Current paragraph being deleted, but since
			// it is the only paragraph it should just be replaced by an empty para.
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(1, m_genesis.SectionsOS.Count);
			IScrSection section = m_genesis.SectionsOS[0];
			Assert.AreEqual(01001001, section.VerseRefStart);
			Assert.AreEqual(01001001, section.VerseRefEnd);
			Assert.AreEqual(1, section.ContentOA.ParagraphsOS.Count);
			IScrTxtPara paraCurr = (IScrTxtPara)section.ContentOA[0];
			Assert.AreEqual(ScrStyleNames.NormalParagraph, paraCurr.StyleRules.GetStrPropValue((int)FwTextStringProp.kstpNamedStyle));
			Assert.AreEqual(null, paraCurr.Contents.Text);
			// the empty para of the Curr section content should still have the hvo of the original para
			Assert.AreEqual(para1Curr, paraCurr);

			Assert.AreEqual(0, m_bookMerger.Differences.Count);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test when the ReplaceCurrentWithRevision should replace an empty para
		/// (the only para in the Current IStText) rather than insert an additional paragraph.
		/// The IStText should never be left with no paragraphs.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaMissingInCurrent_InsertIntoEmptyPara()
		{
			// build Current section - An empty paragraph
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);

			// build Revision section - a single para with verses 1 to 3
			// Note: For this test we must have only an empty para in the Current, and
			// a cluster that produces a ParaMissingInCurrent diff for a paragraph in the
			// Rev section.
			// For now, a para with verse 1 does produce this cluster and diff.
			// If future paragraph clustering does not do this, we'll have to try making intro paragraphs instead.
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara paraRev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraRev, "1-3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(paraRev, "verses 1 to 3", Cache.DefaultVernWs);

			// Detect differences
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// Verify the difference
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff1.DiffType);
			Assert.AreEqual(01001001, diff1.RefStart);
			Assert.AreEqual(01001003, diff1.RefEnd);

			// Revert the difference.
			// This would normally result in inserting the Rev paragraph in the Current, but since
			// the only Current para is empty it should just be replaced by the Rev paragraph.
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(1, m_genesis.SectionsOS.Count);
			IScrSection section = m_genesis.SectionsOS[0];
			Assert.AreEqual(01001001, section.VerseRefStart);
			Assert.AreEqual(01001003, section.VerseRefEnd);
			Assert.AreEqual(1, section.ContentOA.ParagraphsOS.Count);
			IScrTxtPara paraCurr = (IScrTxtPara)section.ContentOA[0];
			Assert.AreEqual(ScrStyleNames.NormalParagraph, paraCurr.StyleRules.GetStrPropValue((int)FwTextStringProp.kstpNamedStyle));
			Assert.AreEqual("1-3verses 1 to 3", paraCurr.Contents.Text);
			// the para of the Curr section content should still have its original hvo
			Assert.AreEqual(para1Curr, paraCurr);

			Assert.AreEqual(0, m_bookMerger.Differences.Count);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// current book has a 'paragraph with back translation' missing in the Scripture.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaMissingInCurrent_WithBT()
		{
			// Build Current section (two paragraphs with verses 1, 3)
			IScrSection sectionCur = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "verse one", Cache.DefaultVernWs);
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Curr, "3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3Curr, "verse three", Cache.DefaultVernWs);

			// Build Revision section (three paragraphs - verses 1, 2, and 3)
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			// this first para matches the current
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "verse one", Cache.DefaultVernWs);
			// this second para is missing in the current
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "2", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "verse two", Cache.DefaultVernWs);
			// this third para matches the current
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Rev, "3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3Rev, "verse three", Cache.DefaultVernWs);

			// The second para includes a footnote
			IScrFootnote footnote2Rev = AddFootnote(m_genesisRevision, para2Rev, 1, "New footnote text");

			// Add back translation to the second revision paragraph, and its status
			int btWs = Cache.DefaultAnalWs;
			ICmTranslation transPara2Rev = AddBtToMockedParagraph(para2Rev, btWs);
			AddRunToMockedTrans(transPara2Rev, btWs, "BT of verse two", null);

			// Add back translation of footnote
			ICmTranslation transFootnote = AddBtFootnote(transPara2Rev, 2, btWs, footnote2Rev,
				"BT of footnote");
			transPara2Rev.Status.set_String(btWs, BackTranslationStatus.Finished.ToString());
			transFootnote.Status.set_String(btWs, BackTranslationStatus.Checked.ToString());

			// Detect differences
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// Get the first difference, verify it
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff.DiffType);
			Assert.AreEqual(01001002, diff.RefStart);

			//do a ReplaceCurrentWithRevision to simulate clicking the "revert to old" button
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			// we expect this to insert the second para from the revision, and it's back translation

			// Confirm that the vernacular paragraph is restored correctly.
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			IScrTxtPara para2Curr = (IScrTxtPara)sectionCur.ContentOA[1];
			Assert.AreEqual(ScrStyleNames.NormalParagraph, para2Curr.StyleRules.GetStrPropValue((int)FwTextStringProp.kstpNamedStyle));
			Assert.AreEqual("2" + StringUtils.kChObject + "verse two", para2Curr.Contents.Text);
			ITsString tssNewParaContents = para2Curr.Contents;
			Assert.AreEqual(3, tssNewParaContents.RunCount);
			AssertEx.RunIsCorrect(tssNewParaContents, 0, "2", ScrStyleNames.VerseNumber, Cache.DefaultVernWs, true);
			// Run #1 is ORC for footnote, checked below...
			AssertEx.RunIsCorrect(tssNewParaContents, 2, "verse two", null, Cache.DefaultVernWs, true);

			IScrFootnote footnoteNew = m_genesis.FootnotesOS[0];
			VerifyFootnote(footnoteNew, para2Curr, 1);

			// Confirm that the paragraph's back translation is restored correctly.
			ICmTranslation newPara2trans = para2Curr.GetBT();
			Assert.IsNotNull(newPara2trans, "Second paragraph did not have translation restored from rev");
			ITsString tssNewBtParaContents = newPara2trans.Translation.get_String(btWs);

			Assert.AreEqual("BT" + StringUtils.kChObject + " of verse two", tssNewBtParaContents.Text);
			Assert.AreEqual(3, tssNewBtParaContents.RunCount);
			AssertEx.RunIsCorrect(tssNewBtParaContents, 0, "BT", null, btWs);
			// Run #1 is ORC for footnote, checked below...
			AssertEx.RunIsCorrect(tssNewBtParaContents, 2, " of verse two", null, btWs);
			LcmTestHelper.VerifyBtFootnote(footnoteNew, para2Curr, btWs, 2);
			// BT alternate must have the original status
			Assert.AreEqual(BackTranslationStatus.Finished.ToString(),
				newPara2trans.Status.get_String(btWs).Text);

			// Confirm that the footnote's back translation is restored correctly
			ICmTranslation newFootnoteTrans = ((IScrTxtPara)footnoteNew[0]).GetBT();
			Assert.IsNotNull(newFootnoteTrans, "Footnote paragraph did not have translation restored from rev");
			Assert.AreEqual("BT of footnote",
					newFootnoteTrans.Translation.get_String(btWs).Text);
			// BT alternate must have the original status
			Assert.AreEqual(BackTranslationStatus.Checked.ToString(),
					newFootnoteTrans.Status.get_String(btWs).Text);

			Assert.AreEqual(0, m_bookMerger.Differences.Count);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method for paragraphs when an empty stanza break
		/// paragraph is inserted in the Current. (TE-6184)
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_EmptyStanzaBreakAddedToCurrent()
		{
			// Set up data with an empty stanza break paragraph between two paras in the current.
			IScrSection sectionCur = CreateSection(m_genesis, "Section One");
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 1, 1, "Verse one.");
			IScrTxtPara para2EmptyCur = AddEmptyPara(sectionCur, ScrStyleNames.StanzaBreak);
			IScrTxtPara para3Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para3Cur, 0, 2, "Verse two.");

			// Set up revision data with paras the same as the non-empty paras in the current.
			IScrSection sectionRev = CreateSection(m_genesisRevision, "Section One");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 1, 1, "Verse one.");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 2, "Verse two.");

			m_bookMerger.DetectDifferences(null);

			// We expect a paragraph added difference.
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaAddedDiff(diff, 01001001, 01001001, DifferenceType.StanzaBreakAddedToCurrent,
											   para2EmptyCur, para1Rev, para1Rev.Contents.Length);

			// Revert to revision (delete Stanza Break)
			m_bookMerger.ReplaceCurrentWithRevision(diff);

			// We expect that the empty paragraph would be deleted.
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("11Verse one.", ((IScrTxtPara) sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual("2Verse two.", ((IScrTxtPara)sectionCur.ContentOA[1]).Contents.Text);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method for paragraphs when stanza breaks are
		/// added as part of a paragraph structure change. (TE-6184)
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_EmptyParaAddedInParaStructChg()
		{
			// Set up data with an empty stanza break paragraph between two paras in the current.
			IScrSection sectionCur = CreateSection(m_genesis, "Section One");
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 1, 0, "Verse one.");
			AddVerse(para1Cur, 0, 2, "Verse Two");
			IScrTxtPara para2Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Cur, 0, 0, "Some more text");
			IScrTxtPara para3Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para3Cur, 0, 0, "and some more text");
			IScrTxtPara paraCur1StanzaBreak = AddEmptyPara(sectionCur, ScrStyleNames.StanzaBreak);

			// Set up revision data with paras the same as the non-empty paras in the current.
			IScrSection sectionRev = CreateSection(m_genesisRevision, "Section One");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 1, 0, "Verse one.");
			AddVerse(para1Rev, 0, 2, "Verse Two");
			IScrTxtPara paraRev1StanzaBreak = AddEmptyPara(sectionRev, ScrStyleNames.StanzaBreak);
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "Some more text");
			IScrTxtPara paraRev2StanzaBreak = AddEmptyPara(sectionRev, ScrStyleNames.StanzaBreak);
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 0, "and some more text");

			m_bookMerger.DetectDifferences(null);

			// We expect a paragraph added difference.
			Assert.AreEqual(3, m_bookMerger.Differences.Count);
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaAddedDiff(diff1, 01001002, 01001002, DifferenceType.StanzaBreakMissingInCurrent,
											   paraRev1StanzaBreak, para1Cur, para1Cur.Contents.Length);

			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaStructDiff(diff2, 01001002, DifferenceType.ParagraphStructureChange);
			Assert.AreEqual(3, diff2.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffParaReferencePoints(diff2, para2Cur, para2Cur.Contents.Length,
				para2Rev, para2Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 1, DifferenceType.ParagraphStyleDifference,
				null, 0, 0,
				paraRev2StanzaBreak, 0, 0);
			DiffTestHelper.VerifySubDiffTextCompared(diff2, 2, DifferenceType.NoDifference,
				para3Cur, 0, 0,
				para3Rev, 0, 0);

			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaAddedDiff(diff3, 01001002, 01001002, DifferenceType.StanzaBreakAddedToCurrent,
				paraCur1StanzaBreak, para3Rev, para3Rev.Contents.Length);

			// Revert to revision (add Stanza Break)
			Assert.AreEqual(4, sectionCur.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(5, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual(ScrStyleNames.StanzaBreak, sectionCur.ContentOA[1].StyleName);

			// Revert to revision (add Stanza Break as part of paragraph structure change)
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(6, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual(ScrStyleNames.StanzaBreak, sectionCur.ContentOA[3].StyleName);

			// Revert to revision (delete Stanza Break)
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual(5, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreNotEqual(ScrStyleNames.StanzaBreak, sectionCur.ContentOA[4].StyleName, "last para should not be a Stanza Break");
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method for paragraphs when an empty stanza break
		/// paragraph is missing in the Current. (TE-6184)
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_EmptyStanzaBreakMissingInCurrent()
		{
			// Set up revision data with paras the same as the non-empty paras in the current.
			IScrSection sectionCur = CreateSection(m_genesis, "Section One");
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 1, 1, "Verse one.");
			IScrTxtPara para2Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Cur, 0, 2, "Verse two.");

			// Set up data with an empty stanza break paragraph between two paras in the current.
			IScrSection sectionRev = CreateSection(m_genesisRevision, "Section One");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 1, 1, "Verse one.");
			IScrTxtPara para2EmptyRev = AddEmptyPara(sectionRev, ScrStyleNames.StanzaBreak);
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 2, "Verse two.");

			m_bookMerger.DetectDifferences(null);

			// We expect a paragraph added difference.
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaAddedDiff(diff, 01001001, 01001001, DifferenceType.StanzaBreakMissingInCurrent,
											   para2EmptyRev, para1Cur, para1Cur.Contents.Length);

			// Revert to revision (restore Stanza Break)
			m_bookMerger.ReplaceCurrentWithRevision(diff);

			// We expect that the empty paragraph would be restored.
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("11Verse one.", ((IScrTxtPara)sectionCur.ContentOA[0]).Contents.Text);
			Assert.AreEqual(0, ((IScrTxtPara) sectionCur.ContentOA[1]).Contents.Length);
			Assert.AreEqual("2Verse two.", ((IScrTxtPara)sectionCur.ContentOA[2]).Contents.Text);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method for paragraphs when there is a corresponding
		/// empty paragraph for a paragraph no longer in the revision, but it is a stanza break.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_Paragraphs_StanzaBreakOnlyInCur()
		{
			// Build the "current" para: a stanza break
			IScrSection section1Curr = CreateSection(m_genesis, "My Section");
			IScrTxtPara para1Curr = AddEmptyPara(section1Curr, ScrStyleNames.StanzaBreak);

			// Build the "revision" para: verse 1
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My Section");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 0, 1, "This is the first paragraph");

			m_bookMerger.DetectDifferences(null);

			Assert.AreEqual(2, m_bookMerger.Differences.Count);
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyStanzaBreakAddedDiff(diff1, 01001001, DifferenceType.StanzaBreakAddedToCurrent,
													  para1Curr, para1Rev, para1Rev.Contents.Length);
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaAddedDiff(diff2, 01001001, 01001001, DifferenceType.ParagraphMissingInCurrent,
											   para1Rev, para1Curr, 0);

			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(1, section1Curr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("1This is the first paragraph",
				((IScrTxtPara) section1Curr.ContentOA[0]).Contents.Text);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method for paragraphs when the revision has
		/// a stanza break and the current has mostly empty paragraphs.
		///		Revision								Current
		///		0  1"this is not poetry"			 1 [no content]
		///		1  "though it might be needed"
		///		2  [Stanza Break]					 [Stanza Break]
		///		3  "more text."					     "more text."
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_Paragraphs_StanzaBreakInRev_CurHasChapter()
		{
			// Build the "current" para: a stanza break
			IScrSection section1Curr = CreateSection(m_genesis, "My Section");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 1, 0, null);
			IScrTxtPara para2Curr = AddEmptyPara(section1Curr, ScrStyleNames.StanzaBreak);
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para3Curr, 0, 0, "more test");

			// Build the "revision" para: verse 1
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My Section");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 1, 0, "this is not poetry");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "though it might be needed");
			IScrTxtPara para3Rev = AddEmptyPara(section1Rev, ScrStyleNames.StanzaBreak);
			IScrTxtPara para4Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para4Rev, 0, 0, "more test");

			m_bookMerger.DetectDifferences(null);

			// We expect one paragraph structure change.
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff1, 01001001, DifferenceType.ParagraphMergedInCurrent);
			DiffTestHelper.VerifySubDiffTextCompared(diff1, 0, DifferenceType.TextDifference,
				para1Curr, 1, 1,
				para1Rev, 1, para1Rev.Contents.Length);
			// Seems like this should really be a paragraph missing in current. Don't quite
			// understand how a text can be different from nothing. But it works.
			DiffTestHelper.VerifySubDiffTextCompared(diff1, 1, DifferenceType.TextDifference,
				null, 0, 0,
				para2Rev, 0, para2Rev.Contents.Length);

			// Replace difference and confirm that current is like revision.
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(4, section1Curr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("1this is not poetry", section1Curr.ContentOA[0].Contents.Text);
			Assert.AreEqual("though it might be needed", section1Curr.ContentOA[1].Contents.Text);
			IScrTxtPara stanzaPara = (IScrTxtPara)section1Curr.ContentOA[2];
			Assert.IsTrue(string.IsNullOrEmpty(stanzaPara.Contents.Text));
			Assert.AreEqual(ScrStyleNames.StanzaBreak, stanzaPara.StyleName);
			Assert.AreEqual("more test", section1Curr.ContentOA[3].Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method for paragraphs when the revision has
		/// a stanza break and the current has mostly empty paragraphs and no chapter number.
		///		Revision								Current
		///		0  "this is not poetry"				 [no content]
		///		1  "though it might be needed"
		///		2  [Stanza Break]					 [Stanza Break]
		///		3  "more text."					     "more text."
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_Paragraphs_StanzaBreakInRev_CurEmpty()
		{
			// Build the "current" para: a stanza break
			IScrSection section1Curr = CreateSection(m_genesis, "My Section");
			IScrTxtPara para1Curr = AddEmptyPara(section1Curr);
			IScrTxtPara para2Curr = AddEmptyPara(section1Curr, ScrStyleNames.StanzaBreak);
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para3Curr, 0, 0, "more test");

			// Build the "revision" para: verse 1
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My Section");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 0, 0, "this is not poetry");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "though it might be needed");
			IScrTxtPara para3Rev = AddEmptyPara(section1Rev, ScrStyleNames.StanzaBreak);
			IScrTxtPara para4Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para4Rev, 0, 0, "more test");

			m_bookMerger.DetectDifferences(null);

			// We expect one paragraph structure change.
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaStructDiff(diff1, 01001001, DifferenceType.ParagraphStructureChange);
			Assert.AreEqual(3, diff1.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffParaReferencePoints(diff1, para2Curr, 0, para1Rev, 0);
			DiffTestHelper.VerifySubDiffParaAdded(diff1, 1, DifferenceType.ParagraphMissingInCurrent,
				para1Rev, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffParaAdded(diff1, 2, DifferenceType.ParagraphMissingInCurrent,
				para2Rev, para2Rev.Contents.Length);

			// Replace difference and confirm that current is like revision.
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(5, section1Curr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("this is not poetry", ((IScrTxtPara)section1Curr.ContentOA[0]).Contents.Text);
			Assert.AreEqual("though it might be needed", ((IScrTxtPara)section1Curr.ContentOA[1]).Contents.Text);
			Assert.IsTrue(string.IsNullOrEmpty(((IScrTxtPara)section1Curr.ContentOA[2]).Contents.Text));
			IScrTxtPara stanzaPara = (IScrTxtPara)section1Curr.ContentOA[3];
			Assert.IsTrue(string.IsNullOrEmpty(stanzaPara.Contents.Text));
			Assert.AreEqual(ScrStyleNames.StanzaBreak, stanzaPara.StyleName);
			Assert.AreEqual("more test", ((IScrTxtPara)section1Curr.ContentOA[4]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method for paragraphs when there is a corresponding
		/// empty paragraph for a paragraph no longer in the revision, but it is a stanza break.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_Paragraphs_StanzaBreakInCur()
		{
			// Build the "current" para: a stanza break
			IScrSection section1Curr = CreateSection(m_genesis, "My Section");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 0, 1, "This is the first paragraph");
			IScrTxtPara para2Curr = AddEmptyPara(section1Curr, ScrStyleNames.StanzaBreak);

			// Build the "revision" para: verse 1
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My Section");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 0, 1, "This is the first paragraph");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 2, "This is the second paragraph");

			m_bookMerger.DetectDifferences(null);

			Assert.AreEqual(2, m_bookMerger.Differences.Count);
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyStanzaBreakAddedDiff(diff1, 01001001, DifferenceType.StanzaBreakAddedToCurrent,
													  para2Curr, para2Rev, para2Rev.Contents.Length);
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaAddedDiff(diff2, 01001002, 01001002, DifferenceType.ParagraphMissingInCurrent,
											   para2Rev, para2Curr, 0);

			// Revert differences
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(1, section1Curr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("1This is the first paragraph",
				((IScrTxtPara)section1Curr.ContentOA[0]).Contents.Text);

			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(2, section1Curr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("1This is the first paragraph",
				((IScrTxtPara)section1Curr.ContentOA[0]).Contents.Text);
			Assert.AreEqual("2This is the second paragraph",
				((IScrTxtPara)section1Curr.ContentOA[1]).Contents.Text);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method for paragraphs when multiple adjacent
		/// paragraphs are inserted in the Current. In this test, insert them in forward order.
		/// The main concern is that the resulting paragraphs in the Current are in the correct order.
		///
		/// revision        current
		/// 1
		/// 2
		///                  3
		/// 4
		/// 5
		///                  6
		/// 7
		/// 8
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_Paragraphs_InsertMultipleForward()
		{
			// Build the "current" paras: 3,6
			IScrSection section1Curr = CreateSection(m_genesis, "My Section");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 0, 3, "This is the first paragraph");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 6, "This is the second paragraph");

			// Build the "revision" paras: 1,2,4,5,7,8
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My Section");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 0, 1, "This is the first paragraph");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 2, "This is the second paragraph");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 4, "This is the third paragraph");
			IScrTxtPara para4Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para4Rev, 0, 5, "This is the fourth paragraph");
			IScrTxtPara para5Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para5Rev, 0, 7, "This is the fifth paragraph");
			IScrTxtPara para6Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para6Rev, 0, 8, "This is the sixth paragraph");

			// make sure the generated paragraph counts are correct
			Assert.AreEqual(2, section1Curr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual(6, section1Rev.ContentOA.ParagraphsOS.Count);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(8, m_bookMerger.Differences.Count);

			// Do a quick sanity check of the diffs
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff1.DiffType);
			Assert.AreEqual(01001001, diff1.RefStart);

			Difference diff2 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff2.DiffType);
			Assert.AreEqual(01001002, diff2.RefStart);

			Difference diff3 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff3.DiffType);
			Assert.AreEqual(01001003, diff3.RefStart);

			Difference diff4 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff4.DiffType);
			Assert.AreEqual(01001004, diff4.RefStart);

			Difference diff5 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff5.DiffType);
			Assert.AreEqual(01001005, diff5.RefStart);

			Difference diff6 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff6.DiffType);
			Assert.AreEqual(01001006, diff6.RefStart);

			Difference diff7 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff7.DiffType);
			Assert.AreEqual(01001007, diff7.RefStart);

			Difference diff8 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff8.DiffType);
			Assert.AreEqual(01001008, diff8.RefStart);

			// Revert all the "missing in current" diffs, to insert them into the current
			// FORWARD order
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			m_bookMerger.ReplaceCurrentWithRevision(diff4);
			m_bookMerger.ReplaceCurrentWithRevision(diff5);
			m_bookMerger.ReplaceCurrentWithRevision(diff7);
			m_bookMerger.ReplaceCurrentWithRevision(diff8);
			Assert.AreEqual(8, ((IScrSection)m_genesis.SectionsOS[0]).ContentOA.ParagraphsOS.Count);

			// Make sure the current paragraphs are the right ones in the right order
			IScrSection section = m_genesis.SectionsOS[0];
			VerifyVerseNumInPara("1", (IScrTxtPara)section.ContentOA[0]);
			VerifyVerseNumInPara("2", (IScrTxtPara)section.ContentOA[1]);
			VerifyVerseNumInPara("3", (IScrTxtPara)section.ContentOA[2]);
			VerifyVerseNumInPara("4", (IScrTxtPara)section.ContentOA[3]);
			VerifyVerseNumInPara("5", (IScrTxtPara)section.ContentOA[4]);
			VerifyVerseNumInPara("6", (IScrTxtPara)section.ContentOA[5]);
			VerifyVerseNumInPara("7", (IScrTxtPara)section.ContentOA[6]);
			VerifyVerseNumInPara("8", (IScrTxtPara)section.ContentOA[7]);

			// Revert the remaining diffs, "added in current"
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			m_bookMerger.ReplaceCurrentWithRevision(diff6);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method for paragraphs when multiple adjacent
		/// paragraphs are inserted in the Current. In this test, insert them in reverse order.
		/// The main concern is that the resulting paragraphs in the Current are in the correct order.
		///
		/// revision        current
		/// 1
		/// 2
		///                  3
		/// 4
		/// 5
		///                  6
		/// 7
		/// 8
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_Paragraphs_InsertMultipleReverse()
		{
			// Build the "current" paras: 3,6
			IScrSection section1Curr = CreateSection(m_genesis, "My Section");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 0, 3, "This is the first paragraph");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 6, "This is the second paragraph");

			// Build the "revision" paras: 1,2,4,5,7,8
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My Section");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 0, 1, "This is the first paragraph");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 2, "This is the second paragraph");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 4, "This is the third paragraph");
			IScrTxtPara para4Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para4Rev, 0, 5, "This is the fourth paragraph");
			IScrTxtPara para5Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para5Rev, 0, 7, "This is the fifth paragraph");
			IScrTxtPara para6Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para6Rev, 0, 8, "This is the sixth paragraph");

			// make sure the generated paragraph counts are correct
			Assert.AreEqual(2, section1Curr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual(6, section1Rev.ContentOA.ParagraphsOS.Count);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(8, m_bookMerger.Differences.Count);

			// Do a quick sanity check of the diffs
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff1.DiffType);
			Assert.AreEqual(01001001, diff1.RefStart);

			Difference diff2 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff2.DiffType);
			Assert.AreEqual(01001002, diff2.RefStart);

			Difference diff3 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff3.DiffType);
			Assert.AreEqual(01001003, diff3.RefStart);

			Difference diff4 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff4.DiffType);
			Assert.AreEqual(01001004, diff4.RefStart);

			Difference diff5 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff5.DiffType);
			Assert.AreEqual(01001005, diff5.RefStart);

			Difference diff6 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff6.DiffType);
			Assert.AreEqual(01001006, diff6.RefStart);

			Difference diff7 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff7.DiffType);
			Assert.AreEqual(01001007, diff7.RefStart);

			Difference diff8 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff8.DiffType);
			Assert.AreEqual(01001008, diff8.RefStart);

			// Revert all the "missing in current" diffs, to insert them into the current
			// REVERSE order
			m_bookMerger.ReplaceCurrentWithRevision(diff8);
			m_bookMerger.ReplaceCurrentWithRevision(diff7);
			m_bookMerger.ReplaceCurrentWithRevision(diff5);
			m_bookMerger.ReplaceCurrentWithRevision(diff4);
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(8, ((IScrSection)m_genesis.SectionsOS[0]).ContentOA.ParagraphsOS.Count);

			// Make sure the current paragraphs are the right ones in the right order
			IScrSection section = m_genesis.SectionsOS[0];
			VerifyVerseNumInPara("1", (IScrTxtPara)section.ContentOA[0]);
			VerifyVerseNumInPara("2", (IScrTxtPara)section.ContentOA[1]);
			VerifyVerseNumInPara("3", (IScrTxtPara)section.ContentOA[2]);
			VerifyVerseNumInPara("4", (IScrTxtPara)section.ContentOA[3]);
			VerifyVerseNumInPara("5", (IScrTxtPara)section.ContentOA[4]);
			VerifyVerseNumInPara("6", (IScrTxtPara)section.ContentOA[5]);
			VerifyVerseNumInPara("7", (IScrTxtPara)section.ContentOA[6]);
			VerifyVerseNumInPara("8", (IScrTxtPara)section.ContentOA[7]);

			// Revert the remaining diffs, "added in current"
			m_bookMerger.ReplaceCurrentWithRevision(diff6);
			m_bookMerger.ReplaceCurrentWithRevision(diff3);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Helper function to verify that the paragraph's first run is the expected verse
		/// number.
		/// </summary>
		/// <param name="numExpected"></param>
		/// <param name="para"></param>
		/// ------------------------------------------------------------------------------------
		private void VerifyVerseNumInPara(string numExpected, IScrTxtPara para)
		{
			Assert.AreEqual(numExpected, para.Contents.get_RunText(0));
			// Since char styles and runs are not being processed in the test, we will not bother
			// verifying the char style of the run.
			// Therefore, this helper works just fine for chapter numbers too.
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method for paras when the replace might
		/// result in deleting a paragraph that other differences still refer to.
		///
		/// Revision       Current
		///  1
		///                  2
		///                  3
		///  4
		///  5               5
		///
		///  remove 2
		///  insert 1
		///  remove 3
		///  insert 4
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_Paragraphs_DeleteProblemSet1()
		{
			// Build the "current" sections
			IScrSection section1Curr = CreateSection(m_genesis, "My Section");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 0, 2, "This is verse two");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 3, "This is verse three");
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para3Curr, 0, 5, "This is verse five");

			// Build the "revision" sections
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My Section");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 0, 1, "This is verse one");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 4, "This is verse four");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 5, "This is verse five");

			// make sure the sections have the right number of paragraphs
			Assert.AreEqual(3, section1Curr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual(3, section1Rev.ContentOA.ParagraphsOS.Count);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(4, m_bookMerger.Differences.Count);

			// Do a quick sanity check of the diffs
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff1.DiffType);
			Assert.AreEqual(01001001, diff1.RefStart);

			Difference diff2 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff2.DiffType);
			Assert.AreEqual(01001002, diff2.RefStart);

			Difference diff3 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff3.DiffType);
			Assert.AreEqual(01001003, diff3.RefStart);

			Difference diff4 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff4.DiffType);
			Assert.AreEqual(01001004, diff4.RefStart);

			// Revert the second difference to delete verse 2 para
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(2, section1Curr.ContentOA.ParagraphsOS.Count);

			// Revert the first difference to insert verse 1 para
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(3, section1Curr.ContentOA.ParagraphsOS.Count);

			// Revert the third difference to remove verse 3 para
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual(2, section1Curr.ContentOA.ParagraphsOS.Count);

			// Revert the fourth difference to insert verse 4 para
			m_bookMerger.ReplaceCurrentWithRevision(diff4);
			Assert.AreEqual(3, section1Curr.ContentOA.ParagraphsOS.Count);

			// Make sure the current paras are the right ones in the right order
			Assert.AreEqual("1", ((IScrTxtPara)section1Curr.ContentOA[0]).Contents.get_RunText(0));
			Assert.AreEqual("4", ((IScrTxtPara)section1Curr.ContentOA[1]).Contents.get_RunText(0));
			Assert.AreEqual("5", ((IScrTxtPara)section1Curr.ContentOA[2]).Contents.get_RunText(0));

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method for paras when the replace might
		/// result in deleting a paragraph that other differences still refer to.
		///
		/// Revision       Current
		///                  1
		///  2
		///  3               3
		///                  4
		///  5
		///
		///  remove 1
		///  insert 2
		///  remove 4
		///  insert 5
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_Paragraphs_DeleteProblemSet2()
		{
			// Build the "current" sections
			IScrSection section1Curr = CreateSection(m_genesis, "My Section");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "This is verse one", Cache.DefaultVernWs);

			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "This is verse three", Cache.DefaultVernWs);

			IScrTxtPara para3Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Curr, "4", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3Curr, "This is verse four", Cache.DefaultVernWs);

			// Build the "revision" sections
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My Section");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "2", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "This is verse two", Cache.DefaultVernWs);

			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "This is verse three", Cache.DefaultVernWs);

			IScrTxtPara para3Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Rev, "5", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3Rev, "This is verse five", Cache.DefaultVernWs);

			// make sure the sections have the right number of paragraphs
			Assert.AreEqual(3, section1Curr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual(3, section1Rev.ContentOA.ParagraphsOS.Count);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(4, m_bookMerger.Differences.Count);

			// Do a quick sanity check of the diffs
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff1.DiffType);
			Assert.AreEqual(01001001, diff1.RefStart);

			Difference diff2 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff2.DiffType);
			Assert.AreEqual(01001002, diff2.RefStart);

			Difference diff3 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff3.DiffType);
			Assert.AreEqual(01001004, diff3.RefStart);

			Difference diff4 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff4.DiffType);
			Assert.AreEqual(01001005, diff4.RefStart);

			// Revert the first difference to delete verse 1 para
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(2, section1Curr.ContentOA.ParagraphsOS.Count);

			// Revert the second difference to insert verse 2 para
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(3, section1Curr.ContentOA.ParagraphsOS.Count);

			// Revert the third difference to remove verse 4 para
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual(2, section1Curr.ContentOA.ParagraphsOS.Count);

			// Revert the fourth difference to insert verse 5 para
			m_bookMerger.ReplaceCurrentWithRevision(diff4);
			Assert.AreEqual(3, section1Curr.ContentOA.ParagraphsOS.Count);

			// Make sure the current paras are the right ones in the right order
			Assert.AreEqual("2", ((IScrTxtPara)section1Curr.ContentOA[0]).Contents.get_RunText(0));
			Assert.AreEqual("3", ((IScrTxtPara)section1Curr.ContentOA[1]).Contents.get_RunText(0));
			Assert.AreEqual("5", ((IScrTxtPara)section1Curr.ContentOA[2]).Contents.get_RunText(0));

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// revision title has an additional paragraph.
		/// This is a regression test for bug TE-2964.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_Title_ParaMissing()
		{
			// Set identical titles for the current and revised versions of Genesis.
			AddTitleToMockedBook(m_genesis, "Genesis");
			AddTitleToMockedBook(m_genesisRevision, "Genesis");

			// construct additional paragraph for Revision title
			IScrTxtPara paraAddl = (IScrTxtPara)AddParaToMockedText(m_genesisRevision.TitleOA,
				ScrStyleNames.SecondaryBookTitle);
			AddRunToMockedPara(paraAddl,
				"This is the second paragraph in the revision title.", Cache.DefaultVernWs);
			int ichLimAddedTitlePara = paraAddl.Contents.Length;
			//StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			//paraBldr.ParaStyleName = ScrStyleNames.SecondaryBookTitle;
			//paraBldr.AppendRun("This is the second paragraph in the revision title.",
			//    StyleUtils.CharStyleTextProps(null, Cache.DefaultVernWs));
			//int ichLimAddedTitlePara = paraBldr.Length;
			//paraBldr.CreateParagraph(m_genesisRevision.TitleOAHvo, 1); // insert at the end of title

			// Create Current section
			IScrSection sectionCurr = CreateSection(m_genesis, "My aching head!");
			AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);

			// Create Revision section
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			//verify second paragraph in title is missing Current
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(01001000, diff.RefStart);
			Assert.AreEqual(01001000, diff.RefEnd);
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff.DiffType);
			Assert.AreEqual(m_genesis.TitleOA[0], diff.ParaCurr);
			Assert.AreEqual(7, diff.IchMinCurr);
			Assert.AreEqual(7, diff.IchLimCurr);
			Assert.AreEqual(m_genesisRevision.TitleOA[1], diff.ParaRev);
			Assert.AreEqual(0, diff.IchMinRev);
			Assert.AreEqual(ichLimAddedTitlePara, diff.IchLimRev);

			// Do the "ReplaceCurrentWithRevision" action
			m_bookMerger.ReplaceCurrentWithRevision(diff);
			Assert.AreEqual(0, m_bookMerger.Differences.Count);

			// Verify the paragraph added to the title
			Assert.AreEqual(2, m_genesis.TitleOA.ParagraphsOS.Count);
			Assert.AreEqual("This is the second paragraph in the revision title.",
				((IScrTxtPara)m_genesis.TitleOA[1]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}
		}

	//TODO: finish
	///// ------------------------------------------------------------------------------------
	///// <summary>
	///// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
	///// Current section head has an additional paragraph.
	///// </summary>
	///// ------------------------------------------------------------------------------------
	//[Test]
	//public void ReplaceCurWithRev_SectionHead_ParaAdded()

		#endregion

		#region ReplaceCurrentWithRevision: Intro Paragraph added/missing
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// current book has paragraphs missing in the intro.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaMissingInCurrent_Intro()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = AddSectionToMockedBook(m_genesis, true);
			AddSectionHeadParaToSection(sectionCur, "My aching head!", ScrStyleNames.SectionHead);

			IScrSection sectionRev = AddSectionToMockedBook(m_genesisRevision, true);
			AddSectionHeadParaToSection(sectionRev, "My aching head!", ScrStyleNames.SectionHead);

			// build Current section
			IScrTxtPara paraCurr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(paraCurr, "Intro Paragraph One", Cache.DefaultVernWs);

			// build Revision section
			// this first para is missing in the current
			IScrTxtPara paraRev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(paraRev, "A New First Para at the start.", Cache.DefaultVernWs);
			// this second para matches the para in the current
			paraRev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(paraRev, "Intro Paragraph One", Cache.DefaultVernWs);
			// this third para is also missing in the current
			paraRev = AddParaToMockedSectionContent(sectionRev, "Intro List Item1");
			AddRunToMockedPara(paraRev, "My New Content.", Cache.DefaultVernWs);
			// and the third para includes a footnote
			IScrFootnote footnote1Rev = AddFootnote(m_genesisRevision, paraRev, 6, "New footnote text");

			// Detect differences
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// Get the first difference, verify it, and do a ReplaceCurrentWithRevision
			// to simulate clicking the "revert to old" button
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff.DiffType);
			Assert.AreEqual(01001000, diff.RefStart);

			m_bookMerger.ReplaceCurrentWithRevision(diff); // we expect this to insert the new first para
			Assert.AreEqual(01001000, sectionCur.VerseRefEnd);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			paraCurr = (IScrTxtPara)sectionCur.ContentOA[0];
			Assert.AreEqual(ScrStyleNames.IntroParagraph, paraCurr.StyleRules.GetStrPropValue((int)FwTextStringProp.kstpNamedStyle));
			Assert.AreEqual("A New First Para at the start.", paraCurr.Contents.Text);

			// Verify the next difference, and do a ReplaceCurrentWithRevision for it too
			diff = m_bookMerger.Differences.CurrentDifference;
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff.DiffType);
			Assert.AreEqual(01001000, diff.RefStart);

			m_bookMerger.ReplaceCurrentWithRevision(diff);  // we expect this to insert the new last para
			Assert.AreEqual(01001000, sectionCur.VerseRefEnd);
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			paraCurr = (IScrTxtPara)sectionCur.ContentOA[2];
			Assert.AreEqual("Intro List Item1", paraCurr.StyleRules.GetStrPropValue((int)FwTextStringProp.kstpNamedStyle));

			ITsString tssNewParaContents = paraCurr.Contents;
			Assert.AreEqual(3, tssNewParaContents.RunCount);
			AssertEx.RunIsCorrect(tssNewParaContents, 0, "My New", null, Cache.DefaultVernWs, true);
			// run #1 is footnote ORC, checked below...
			AssertEx.RunIsCorrect(tssNewParaContents, 2, " Content.", null, Cache.DefaultVernWs, true);

			IScrFootnote footnoteNew = m_genesis.FootnotesOS[0];
			VerifyFootnote(footnoteNew, paraCurr, 6);

			Assert.AreEqual(0, m_bookMerger.Differences.Count);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// current book has paragraphs added in the intro.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaAddedToCurrent_Intro()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur = AddSectionToMockedBook(m_genesis, true);
			AddSectionHeadParaToSection(sectionCur, "My aching head!", ScrStyleNames.SectionHead);

			IScrSection sectionRev = AddSectionToMockedBook(m_genesisRevision, true);
			AddSectionHeadParaToSection(sectionRev, "My aching head!", ScrStyleNames.SectionHead);

			// build Current section
			// this first para is added in the current
			IScrTxtPara paraCurr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(paraCurr, "A New First Para at the start.", Cache.DefaultVernWs);
			// this second para matches the para in the revision
			paraCurr = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(paraCurr, "Intro Paragraph One", Cache.DefaultVernWs);
			// this third para is also added to the current
			paraCurr = AddParaToMockedSectionContent(sectionCur, "Intro List Item1");
			AddRunToMockedPara(paraCurr, "My New Content.", Cache.DefaultVernWs);
			// and the third para includes a footnote
			IScrFootnote footnote1Rev = AddFootnote(m_genesisRevision, paraCurr, 6, "New footnote text");

			// build Revision section
			IScrTxtPara paraRev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(paraRev, "Intro Paragraph One", Cache.DefaultVernWs);

			// Detect differences
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// Get the first difference, verify it, and do a ReplaceCurrentWithRevision
			// to simulate clicking the "revert to old" button
			Difference diff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff.DiffType);
			Assert.AreEqual(01001000, diff.RefStart);

			m_bookMerger.ReplaceCurrentWithRevision(diff); // we expect this to delete the new first para
			Assert.AreEqual(01001000, sectionCur.VerseRefEnd);
			Assert.AreEqual(2, sectionCur.ContentOA.ParagraphsOS.Count);
			paraCurr = (IScrTxtPara)sectionCur.ContentOA[0];
			Assert.AreEqual("Intro Paragraph One", paraCurr.Contents.Text);

			// Verify the next difference, and do a ReplaceCurrentWithRevision for it too
			diff = m_bookMerger.Differences.CurrentDifference;
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff.DiffType);
			Assert.AreEqual(01001000, diff.RefStart);

			m_bookMerger.ReplaceCurrentWithRevision(diff);  // we expect this to delete the new last para
			Assert.AreEqual(01001000, sectionCur.VerseRefEnd);
			Assert.AreEqual(1, sectionCur.ContentOA.ParagraphsOS.Count);
			paraCurr = (IScrTxtPara)sectionCur.ContentOA[0];
			Assert.AreEqual(ScrStyleNames.IntroParagraph, paraCurr.StyleRules.GetStrPropValue((int)FwTextStringProp.kstpNamedStyle));
			Assert.AreEqual("Intro Paragraph One", paraCurr.Contents.Text);

			Assert.AreEqual(0, m_genesis.FootnotesOS.Count);

			Assert.AreEqual(0, m_bookMerger.Differences.Count);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method for paras when we
		/// add multiple paragraphs to the introduction. In this test, insert them in forward
		/// order. The main concern is that the resulting paragraphs in the Current are in the
		/// correct order.
		///
		/// Revision       Current
		///  one
		///  two
		///  three          three
		///  four
		///  five
		///
		///  insert one, two, four, and five
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_IntroParagraphs_InsertMultipleForward()
		{
			// Build the "current" paras
			IScrSection section1Curr = AddSectionToMockedBook(m_genesis, true);
			AddSectionHeadParaToSection(section1Curr, "Section Head", ScrStyleNames.IntroSectionHead);

			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para1Curr, "three three three", Cache.DefaultVernWs);

			// Build the "revision" paras
			IScrSection section1Rev = AddSectionToMockedBook(m_genesisRevision, true);
			AddSectionHeadParaToSection(section1Rev, "Section Head", ScrStyleNames.IntroSectionHead);

			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para1Rev, "one one one", Cache.DefaultVernWs);

			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para2Rev, "two two two", Cache.DefaultVernWs);

			IScrTxtPara para3Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para3Rev, "three three three", Cache.DefaultVernWs);

			IScrTxtPara para4Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para4Rev, "four four four", Cache.DefaultVernWs);

			IScrTxtPara para5Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para5Rev, "five five five", Cache.DefaultVernWs);

			// make sure the sections have the right number of paragraphs
			Assert.AreEqual(1, section1Curr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual(5, section1Rev.ContentOA.ParagraphsOS.Count);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(4, m_bookMerger.Differences.Count);

			// Do a quick sanity check of the diffs
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff1.DiffType);
			Assert.AreEqual(para1Rev, diff1.ParaRev);

			Difference diff2 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff2.DiffType);
			Assert.AreEqual(para2Rev, diff2.ParaRev);

			Difference diff3 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff3.DiffType);
			Assert.AreEqual(para4Rev, diff3.ParaRev);

			Difference diff4 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff4.DiffType);
			Assert.AreEqual(para5Rev, diff4.ParaRev);

			// Revert all diffs in FORWARD order to insert all 4 paragraphs
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			m_bookMerger.ReplaceCurrentWithRevision(diff4);

			// Make sure the current paras are the right ones in the right order
			Assert.AreEqual(5, section1Curr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("one one one", ((IScrTxtPara)section1Curr.ContentOA[0]).Contents.Text);
			Assert.AreEqual("two two two", ((IScrTxtPara)section1Curr.ContentOA[1]).Contents.Text);
			Assert.AreEqual("three three three", ((IScrTxtPara)section1Curr.ContentOA[2]).Contents.Text);
			Assert.AreEqual("four four four", ((IScrTxtPara)section1Curr.ContentOA[3]).Contents.Text);
			Assert.AreEqual("five five five", ((IScrTxtPara)section1Curr.ContentOA[4]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method for paras when we
		/// add multiple paragraphs to the introduction. In this test, insert them in reverse
		/// order. The main concern is that the resulting paragraphs in the Current are in the
		/// correct order.
		///
		/// Revision       Current
		///  one
		///  two
		///  three          three
		///  four
		///  five
		///
		///  insert one, two, four, and five
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_IntroParagraphs_InsertMultipleReverse()
		{
			// Build the "current" paras
			IScrSection section1Curr = AddSectionToMockedBook(m_genesis, true);
			AddSectionHeadParaToSection(section1Curr, "Section Head", ScrStyleNames.IntroSectionHead);

			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para1Curr, "three three three", Cache.DefaultVernWs);

			// Build the "revision" paras
			IScrSection section1Rev = AddSectionToMockedBook(m_genesisRevision, true);
			AddSectionHeadParaToSection(section1Rev, "Section Head", ScrStyleNames.IntroSectionHead);

			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para1Rev, "one one one", Cache.DefaultVernWs);

			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para2Rev, "two two two", Cache.DefaultVernWs);

			IScrTxtPara para3Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para3Rev, "three three three", Cache.DefaultVernWs);

			IScrTxtPara para4Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para4Rev, "four four four", Cache.DefaultVernWs);

			IScrTxtPara para5Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para5Rev, "five five five", Cache.DefaultVernWs);

			// make sure the sections have the right number of paragraphs
			Assert.AreEqual(1, section1Curr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual(5, section1Rev.ContentOA.ParagraphsOS.Count);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(4, m_bookMerger.Differences.Count);

			// Do a quick sanity check of the diffs
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff1.DiffType);
			Assert.AreEqual(para1Rev, diff1.ParaRev);

			Difference diff2 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff2.DiffType);
			Assert.AreEqual(para2Rev, diff2.ParaRev);

			Difference diff3 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff3.DiffType);
			Assert.AreEqual(para4Rev, diff3.ParaRev);

			Difference diff4 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff4.DiffType);
			Assert.AreEqual(para5Rev, diff4.ParaRev);

			// Revert all diffs in REVERSE order to insert all 4 paragraphs
			m_bookMerger.ReplaceCurrentWithRevision(diff4);
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			m_bookMerger.ReplaceCurrentWithRevision(diff1);

			// Make sure the current paras are the right ones in the right order
			Assert.AreEqual(5, section1Curr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("one one one", ((IScrTxtPara)section1Curr.ContentOA[0]).Contents.Text);
			Assert.AreEqual("two two two", ((IScrTxtPara)section1Curr.ContentOA[1]).Contents.Text);
			Assert.AreEqual("three three three", ((IScrTxtPara)section1Curr.ContentOA[2]).Contents.Text);
			Assert.AreEqual("four four four", ((IScrTxtPara)section1Curr.ContentOA[3]).Contents.Text);
			Assert.AreEqual("five five five", ((IScrTxtPara)section1Curr.ContentOA[4]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method for paras when the replace might
		/// result in deleting a paragraph that other differences still refer to.
		///
		/// Revision       Current
		///  one            one
		///                 two
		///  three
		///
		///  remove two
		///  insert three
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_IntroParagraphs_DeleteProblem1()
		{
			// Build the "current" paras
			IScrSection section1Curr = AddSectionToMockedBook(m_genesis, true);
			AddSectionHeadParaToSection(section1Curr, "Section Head", ScrStyleNames.IntroSectionHead);
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para1Curr, "one one one", Cache.DefaultVernWs);

			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para2Curr, "two two two", Cache.DefaultVernWs);

			// Build the "revision" paras
			IScrSection section1Rev = AddSectionToMockedBook(m_genesisRevision, true);
			AddSectionHeadParaToSection(section1Rev, "Section Head", ScrStyleNames.IntroSectionHead);
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para1Rev, "one one one", Cache.DefaultVernWs);

			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para2Rev, "three three three", Cache.DefaultVernWs);

			// make sure the sections have the right number of paragraphs
			Assert.AreEqual(2, section1Curr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual(2, section1Rev.ContentOA.ParagraphsOS.Count);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// Do a quick sanity check of the diffs
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff1.DiffType);
			Assert.AreEqual(para2Curr, diff1.ParaCurr);

			Difference diff2 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff2.DiffType);
			Assert.AreEqual(para2Rev, diff2.ParaRev);
			// verify that a potential problem exists:
			//  diff2 points at Current para 2, the way DetectDiffs works
			Assert.AreEqual(para2Curr, diff2.ParaCurr);

			// Revert the first difference to delete para "two"
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(1, section1Curr.ContentOA.ParagraphsOS.Count);

			// Revert the second difference to insert para "three"
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(2, section1Curr.ContentOA.ParagraphsOS.Count);

			// Make sure the current paras are the right ones in the right order
			Assert.AreEqual("one one one", ((IScrTxtPara)section1Curr.ContentOA[0]).Contents.Text);
			Assert.AreEqual("three three three", ((IScrTxtPara)section1Curr.ContentOA[1]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method for intro paras when the replace might
		/// result in emptying a paragraph that other differences still refer to.
		///
		/// Revision       Current
		///                 one longer para
		///                 another better one
		///  two
		///
		///  remove "one long para"
		///  remove "another better one"
		///  insert two
		///
		/// </summary>
		/// <remarks>regression test for TE-4248</remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_IntroParagraphs_DeleteProblem2()
		{
			// Build the "current" paras
			IScrSection section1Curr = AddSectionToMockedBook(m_genesis, true);
			AddSectionHeadParaToSection(section1Curr, "Section Head", ScrStyleNames.IntroSectionHead);
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para1Curr, "one longer paragraph", Cache.DefaultVernWs);
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para2Curr, "another better one", Cache.DefaultVernWs);

			// Build the "revision" para
			IScrSection section1Rev = AddSectionToMockedBook(m_genesisRevision, true);
			AddSectionHeadParaToSection(section1Rev, "Section Head", ScrStyleNames.IntroSectionHead);
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para1Rev, "two", Cache.DefaultVernWs);

			// make sure the sections have the right number of paragraphs
			Assert.AreEqual(2, section1Curr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual(1, section1Rev.ContentOA.ParagraphsOS.Count);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(3, m_bookMerger.Differences.Count);

			// Do a quick sanity check of the diffs
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff1.DiffType);
			Assert.AreEqual(para1Curr, diff1.ParaCurr);

			Difference diff2 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff2.DiffType);
			Assert.AreEqual(para2Curr, diff2.ParaCurr);

			Difference diff3 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff3.DiffType);
			Assert.AreEqual(para1Rev, diff3.ParaRev);
			// verify that a potential problem exists:
			//  diff3 points at the end of Current para 2, the way DetectDiffs works
			Assert.AreEqual(para2Curr, diff3.ParaCurr);
			Assert.AreEqual(para2Curr.Contents.Length, diff3.IchMinCurr);

			// Revert the first two differences to delete "one longer paragraph" and empty out "another better one"
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(1, section1Curr.ContentOA.ParagraphsOS.Count);
			Assert.IsTrue(para2Curr.IsValidObject);
			Assert.AreEqual(0, para2Curr.Contents.Length);

			//verify that diff3 ich range is fixed
			Assert.AreEqual(para2Curr, diff3.ParaCurr);
			Assert.AreEqual(0, diff3.IchMinCurr);
			Assert.AreEqual(0, diff3.IchLimCurr);

			// Revert the final difference to insert para "two" (copy it into the empty current para)
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual(1, section1Curr.ContentOA.ParagraphsOS.Count);

			// Make sure the current para is right
			Assert.AreEqual("two", ((IScrTxtPara)section1Curr.ContentOA[0]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method for intro paras when the replace might
		/// result in emptying a paragraph that other differences still refer to. The important
		/// thing for this test is that the revision paragraphs need to get reverted into
		/// the correct place in the current book so their order is not messed up.
		///
		/// Revision			Current
		///						two
		/// one longer para
		/// another better one
		/// and yet another
		///
		///  remove two
		///  insert "one long para"
		///  insert "another better one"
		///  insert "and yet another"
		///
		/// </summary>
		/// <remarks>regression test for TE-4241</remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_IntroParagraphs_ReplaceEmptyPara_Forward()
		{
			// Build the "current" paras
			IScrSection sectionCurr = AddSectionToMockedBook(m_genesis, true);
			AddSectionHeadParaToSection(sectionCurr, "Section Head", ScrStyleNames.IntroSectionHead);
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para1Curr, "two", Cache.DefaultVernWs);

			// Build the "revision" para
			IScrSection sectionRev = AddSectionToMockedBook(m_genesisRevision, true);
			AddSectionHeadParaToSection(sectionRev, "Section Head", ScrStyleNames.IntroSectionHead);
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para1Rev, "one longer paragraph", Cache.DefaultVernWs);
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para2Rev, "another better one", Cache.DefaultVernWs);
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para3Rev, "and yet another", Cache.DefaultVernWs);

			// make sure the sections have the right number of paragraphs
			Assert.AreEqual(1, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual(3, sectionRev.ContentOA.ParagraphsOS.Count);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(4, m_bookMerger.Differences.Count);

			// Do a quick sanity check of the diffs
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff1.DiffType);
			Assert.AreEqual(para1Curr, diff1.ParaCurr);

			Difference diff2 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff2.DiffType);
			Assert.AreEqual(para1Rev, diff2.ParaRev);

			Difference diff3 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff3.DiffType);
			Assert.AreEqual(para2Rev, diff3.ParaRev);

			Difference diff4 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff4.DiffType);
			Assert.AreEqual(para3Rev, diff4.ParaRev);

			// Revert the first difference to empty out the "two" paragraph
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.IsTrue(para1Curr.IsValidObject);
			Assert.AreEqual(0, para1Curr.Contents.Length);

			// Revert the remaining differences in FORWARD order to insert all 3 paragraphs
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			m_bookMerger.ReplaceCurrentWithRevision(diff4);

			// Make sure the current paras have the right contents and are in the right order
			Assert.AreEqual(3, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("one longer paragraph", ((IScrTxtPara)sectionCurr.ContentOA[0]).Contents.Text);
			Assert.AreEqual("another better one", ((IScrTxtPara)sectionCurr.ContentOA[1]).Contents.Text);
			Assert.AreEqual("and yet another", ((IScrTxtPara)sectionCurr.ContentOA[2]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method for intro paras when the replace might
		/// result in emptying a paragraph that other differences still refer to. The important
		/// thing for this test is that the revision paragraphs need to get reverted into
		/// the correct place in the current book so their order is not messed up.
		/// In this test, the revision paras are reverted in REVERSE order.
		///
		/// Revision			Current
		///						two
		/// one longer para
		/// another better one
		/// and yet another
		///
		///  remove two
		///  insert "and yet another"
		///  insert "another better one"
		///  insert "one long para"
		///
		/// </summary>
		/// <remarks>regression test for TE-4241</remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_IntroParagraphs_ReplaceEmptyPara_Reverse()
		{
			// Build the "current" paras
			IScrSection sectionCurr = AddSectionToMockedBook(m_genesis, true);
			AddSectionHeadParaToSection(sectionCurr, "Section Head", ScrStyleNames.IntroSectionHead);
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para1Curr, "two", Cache.DefaultVernWs);

			// Build the "revision" para
			IScrSection sectionRev = AddSectionToMockedBook(m_genesisRevision, true);
			AddSectionHeadParaToSection(sectionRev, "Section Head", ScrStyleNames.IntroSectionHead);
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para1Rev, "one longer paragraph", Cache.DefaultVernWs);
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para2Rev, "another better one", Cache.DefaultVernWs);
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.IntroParagraph);
			AddRunToMockedPara(para3Rev, "and yet another", Cache.DefaultVernWs);

			// make sure the sections have the right number of paragraphs
			Assert.AreEqual(1, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual(3, sectionRev.ContentOA.ParagraphsOS.Count);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(4, m_bookMerger.Differences.Count);

			// Do a quick sanity check of the diffs
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.ParagraphAddedToCurrent, diff1.DiffType);
			Assert.AreEqual(para1Curr, diff1.ParaCurr);

			Difference diff2 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff2.DiffType);
			Assert.AreEqual(para1Rev, diff2.ParaRev);

			Difference diff3 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff3.DiffType);
			Assert.AreEqual(para2Rev, diff3.ParaRev);

			Difference diff4 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.ParagraphMissingInCurrent, diff4.DiffType);
			Assert.AreEqual(para3Rev, diff4.ParaRev);

			// Revert the first difference to empty out the "two" paragraph
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.IsTrue(para1Curr.IsValidObject);
			Assert.AreEqual(0, para1Curr.Contents.Length);

			// Revert the remaining differences in REVERSE order to insert all 3 paragraphs
			m_bookMerger.ReplaceCurrentWithRevision(diff4);
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			m_bookMerger.ReplaceCurrentWithRevision(diff2);

			// Make sure the current paras have the right contents and are in the right order
			Assert.AreEqual(3, sectionCurr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("one longer paragraph", ((IScrTxtPara)sectionCurr.ContentOA[0]).Contents.Text);
			Assert.AreEqual("another better one", ((IScrTxtPara)sectionCurr.ContentOA[1]).Contents.Text);
			Assert.AreEqual("and yet another", ((IScrTxtPara)sectionCurr.ContentOA[2]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}
		#endregion

		#region ReplaceCurrentWithRevision Missing/Added Section Tests
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method when sections are "missing in current"
		/// and will be inserted there.
		///
		/// revision        current
		/// 1:1
		/// 2:1              2:1
		/// 3:1,2
		///
		/// insert 1:1
		/// insert 3:1,2
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_SectionMissingInCurrent()
		{
			// Build the "current" section
			IScrSection section1Curr = CreateSection(m_genesis, "My Second Section");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "2", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "This is the second section", Cache.DefaultVernWs);

			// Build the "revision" sections
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My First Section");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "This is the first section", Cache.DefaultVernWs);

			IScrSection section2Rev = CreateSection(m_genesisRevision, "My Second Section");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "2", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para2Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "This is the second section", Cache.DefaultVernWs);

			IScrSection section3Rev = CreateSection(m_genesisRevision, "My Third Section");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(section3Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Rev, "3", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para3Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3Rev, "This is the third section", Cache.DefaultVernWs);
			IScrTxtPara para3aRev = AddParaToMockedSectionContent(section3Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3aRev, "2", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3aRev, "This is the second para of the third section", Cache.DefaultVernWs);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// Verify diff1: the First section is "missing in current"
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff1, 01001001, 01001001, DifferenceType.SectionMissingInCurrent,
				section1Rev, (IScrTxtPara)section1Curr.HeadingOA[0], 0);

			// Verify diff2: the Third section is "missing in current"
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifySectionDiff(diff2, 01003001, 01003002, DifferenceType.SectionMissingInCurrent,
				section3Rev, para1Curr, para1Curr.Contents.Length);

			// Revert the first difference, which should copy the first revision section to the current
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(2, m_genesis.SectionsOS.Count);
			IScrSection section = m_genesis.SectionsOS[0];
			Assert.AreEqual(01001001, section.VerseRefStart);
			Assert.AreEqual(01001001, section.VerseRefEnd);
			Assert.AreEqual("11This is the first section", ((IScrTxtPara)section.ContentOA[0]).Contents.Text);

			// Revert the second difference, which should copy the last revision section to the current
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(3, m_genesis.SectionsOS.Count);
			section = m_genesis.SectionsOS[2];
			Assert.AreEqual(01003001, section.VerseRefStart);
			Assert.AreEqual(01003002, section.VerseRefEnd);
			Assert.AreEqual(2, section.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("31This is the third section", ((IScrTxtPara)section.ContentOA[0]).Contents.Text);
			Assert.AreEqual("2This is the second para of the third section", ((IScrTxtPara)section.ContentOA[1]).Contents.Text);

			Assert.AreEqual(0, m_bookMerger.Differences.Count);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the BookMerger.DetectDifferences method when an entire section is missing in
		/// the current. The section in the saved version contains a chapter number which is
		/// missing in current, such that the new section splits an existing section. TE-8160.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_SectionMissingInCurrent_IncludingMissingChapter()
		{
			// Build the "current" section
			IScrSection section1Curr = CreateSection(m_genesis, "My First Section");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 1, 1, "Verse one.");

			IScrSection section2Curr = CreateSection(m_genesis, "Another Nice Section");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 2, "Verse two. ");
			AddVerse(para2Curr, 0, 3, "Verse three.");
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para3Curr, 3, 1, "Start of chapter three, first verse. ");
			AddVerse(para3Curr, 0, 2, "Second verse.");

			// Build the "revision" sections
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My First Section");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 1, 1, "Verse one.");

			IScrSection section2Rev = CreateSection(m_genesisRevision, "Another Nice Section");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 2, "Verse two. ");
			AddVerse(para2Rev, 0, 3, "Verse three.");

			IScrSection section3Rev = CreateSection(m_genesisRevision, "Section Containing Chapters Two and Three");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(section3Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 2, 1, "Chapter Two, verse one. ");
			AddVerse(para3Rev, 0, 2, "One of the best verses ever written.");
			IScrTxtPara para4Rev = AddParaToMockedSectionContent(section3Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para4Rev, 3, 1, "Start of chapter three, first verse. ");
			AddVerse(para4Rev, 0, 2, "Second verse.");

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			//// Verify diff1: the First section is "missing in current"
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			//DiffTestHelper.Verify(diff1, 01001001, 01001001, DifferenceType.SectionMissingInCurrent,
			//    section1Rev, (IScrTxtPara)section1Curr.HeadingOA[0], 0);

			//// Verify diff2: the Third section is "missing in current"
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			//DiffTestHelper.VerifySectionDiff(diff2, 01003001, 01003002, DifferenceType.SectionMissingInCurrent,
			//    section3Rev, para1Curr, para1Curr.Contents.Length);

			// Revert both differences
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			m_bookMerger.ReplaceCurrentWithRevision(diff2);

			Assert.AreEqual(3, m_genesis.SectionsOS.Count);
			IScrSection section = m_genesis.SectionsOS[0];
			Assert.AreEqual("My First Section", section.HeadingOA[0].Contents.Text);
			Assert.AreEqual(01001001, section.VerseRefStart);
			Assert.AreEqual(01001001, section.VerseRefEnd);
			Assert.AreEqual(1, section.ContentOA.ParagraphsOS.Count);
			section = m_genesis.SectionsOS[1];
			Assert.AreEqual("Another Nice Section", section.HeadingOA[0].Contents.Text);
			Assert.AreEqual(01001002, section.VerseRefStart);
			Assert.AreEqual(01001003, section.VerseRefEnd);
			Assert.AreEqual(1, section.ContentOA.ParagraphsOS.Count);
			section = m_genesis.SectionsOS[2];
			Assert.AreEqual("Section Containing Chapters Two and Three", section.HeadingOA[0].Contents.Text);
			Assert.AreEqual(01002001, section.VerseRefStart);
			Assert.AreEqual(01003002, section.VerseRefEnd);
			Assert.AreEqual(2, section.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("21Chapter Two, verse one. 2One of the best verses ever written.", section.ContentOA[0].Contents.Text);
			Assert.AreEqual("31Start of chapter three, first verse. 2Second verse.", section.ContentOA[1].Contents.Text);

			Assert.AreEqual(0, m_bookMerger.Differences.Count);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// TODO: Update this test when TE-7210, TE-7208 and TE-7209 are fixed.
		///
		/// Test the ReplaceCurrentWithRevision method when sections are "missing in current"
		/// (but have only an empty paragraph in the revision) and will be inserted there.
		/// This test is for TE-7210 and will probably fix TE-7208 and TE-7209.
		///
		/// revision						current
		/// Section Head 1					Section Head 1
		///		Chap. 1							Chap. 1
		///			Verse 1, Verse 2				Verse 1, Verse 2
		/// Section Head 2
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_SectionMissingInCurrentButEmptyInRev1()
		{
			// Build current section which only contains one paragraph with 2 verses in one paragraph.
			IScrSection section1Curr = CreateSection(m_genesis, "Section 1");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 1, 1, "verse one");
			AddVerse(para1Curr, 0, 2, "verse two");

			// Build revision section 1
			IScrSection section1Rev = CreateSection(m_genesisRevision, "Section 1");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 1, 1, "verse one");
			AddVerse(para1Rev, 0, 2, "verse two");

			// Build revision section 2, making sure it has no paragraphs.
			IScrSection section2Rev = CreateSection(m_genesisRevision, "Section 2");
			IScrTxtPara para2Rev = AddEmptyPara(section2Rev, ScrStyleNames.StanzaBreak);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// Verify diff1: the second section is "missing in current"
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff1, 01001002, 01001002, DifferenceType.SectionHeadMissingInCurrent,
				section2Rev, para1Curr, para1Curr.Contents.Length);

			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyStanzaBreakAddedDiff(diff2, 01001002, DifferenceType.StanzaBreakMissingInCurrent,
				para2Rev, para1Curr, para1Curr.Contents.Length);

			// Revert the first difference, which should copy the empty revision section to the current
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(2, m_genesis.SectionsOS.Count);

			IScrSection section = m_genesis.SectionsOS[0];
			Assert.AreEqual(01001001, section.VerseRefStart);
			Assert.AreEqual(01001002, section.VerseRefEnd);
			Assert.AreEqual(1, section.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("11verse one2verse two", ((IScrTxtPara)section.ContentOA [0]).Contents.Text);

			section = m_genesis.SectionsOS[1];
			Assert.AreEqual(01001002, section.VerseRefStart);
			Assert.AreEqual(01001002, section.VerseRefEnd);
			Assert.AreEqual(1, section.ContentOA.ParagraphsOS.Count);

			// revert (restore empty paragraph)
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			diff1 = m_bookMerger.Differences.MoveFirst();
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(0, ((IScrTxtPara)m_genesis.SectionsOS[1].ContentOA[0]).Contents.Length,
				"Should have restored the empty paragraph");

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Tests the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when several
		/// verses have been added to the beginning of a section and the following section break
		/// has been moved later in the chapter. See TE-7260.
		/// </summary>
		/// <remarks>Here is an outline of the test data we will construct. The current has
		/// verses 14-17 added and the second section moved from verse 17 to verse 18.
		///
		/// *********************** Current ******************************
		/// section one (1:14-17)
		///     (1)14 fourteen.
		///     and more.
		///     15 fafteen.
		///      and more.
		///     16 Saxteen.
		///     17 Sayeventeen.
		/// section two (1:18-21)
		///     18 Eighteen. 19 Nahnteen. 20 Twunny. 21 Twunny-wun.
		///
		/// *********************** Revision ******************************
		/// section one (1:17-21)
		///     17 Sayeventeen. 18 Eighteen. 19 Nahnteen. 20 Twunny. 21 Twunny-wun.
		/// </remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_TE7260()
		{
			// Set up the current sections
			IScrSection section1Curr = CreateSection(m_genesis, "Section One");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 1, 14, "fourteen.");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 0, "and more.");
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para3Curr, 0, 15, "fafteen. ");
			IScrTxtPara para4Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para4Curr, 0, 0, "and more.");
			IScrTxtPara para5Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para5Curr, 0, 16, "Saxteen. ");
			IScrTxtPara para6Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para6Curr, 0, 17, "Sayeventeen. ");

			IScrSection section2Curr = CreateSection(m_genesis, "section two");
			IScrTxtPara para7Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para7Curr, 0, 18, "Eighteen. ");
			AddVerse(para7Curr, 0, 19, "Nahnteen. ");
			AddVerse(para7Curr, 0, 20, "Twunny. ");
			AddVerse(para7Curr, 0, 21, "Twunny-wun. ");

			// Set up the revision sections
			IScrSection section1Rev = CreateSection(m_genesisRevision, "section one");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 1, 17, "Sayeventeen. ");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 18, "Eighteen. ");
			AddVerse(para2Rev, 0, 19, "Nahnteen. ");
			AddVerse(para2Rev, 0, 20, "Twunny. ");
			AddVerse(para2Rev, 0, 21, "Twunny-wun. ");

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// We expect the first section to be added in Current, but with verse 17 (and
			// verse 1 because of the initial chapter number) moved into it in its own para
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff1, 01001014, 01001017, DifferenceType.SectionAddedToCurrent,
				section1Curr, para1Rev, 0); // destination IP various values could be okay
			Assert.AreEqual(2, diff1.SubDiffsForParas.Count, "Expected to have two verses moved");
			DiffTestHelper.VerifySubDiffTextCompared(diff1, 0,
				01001001, 01001001, DifferenceType.VerseMoved,
				para1Curr, 0, 1,
				para1Rev, 0, 1);
			// Assert.AreEqual(para2Curr, diff.SubDiffsForParas[0].ParaMovedFrom);
			Assert.AreEqual(0, diff1.SubDiffsForParas[0].IchMovedFrom);
			DiffTestHelper.VerifySubDiffTextCompared(diff1, 1,
				01001017, 01001017, DifferenceType.VerseMoved,
				para6Curr, 0, para6Curr.Contents.Length,
				para1Rev, 1, para1Rev.Contents.Length);

			// Section head text different
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff2, 01001017, DifferenceType.TextDifference, //no firm requirement on section head ref
				(IScrTxtPara)section2Curr.HeadingOA[0], 8, 11,
				(IScrTxtPara)section1Rev.HeadingOA[0], 8, 11);

			// Now revert the differences and confirm the results.
			// Initially, the current should have two sections.
			Assert.AreEqual(2, m_genesis.SectionsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			// The added section should be removed and verse 17 moved to the new section.
			// Unfortunately, we need to add more logic for verse 17 to be alone in its own
			// paragraph as in the revision.
			Assert.AreEqual(1, m_genesis.SectionsOS.Count);
			Assert.AreEqual(1, m_genesis.SectionsOS[0].ContentOA.ParagraphsOS.Count,
				"Ideally, this section should have two paragraphs but, for now, it only has one.");
			Assert.AreEqual("117Sayeventeen. 18Eighteen. 19Nahnteen. 20Twunny. 21Twunny-wun. ",
				((IScrTxtPara)m_genesis.SectionsOS[0].ContentOA[0]).Contents.Text);

			// Reverting the second difference should change the text in the section head.
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual("section one",
				((IScrTxtPara)m_genesis.SectionsOS[0].HeadingOA[0]).Contents.Text);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// TODO: Update this test when TE-7210, TE-7208 and TE-7209 are fixed.
		///
		/// Test the ReplaceCurrentWithRevision method when sections are "missing in current"
		/// (but have only an empty paragraph in the revision) and will be inserted there.
		/// This test is for TE-7210 and will probably fix TE-7208 and TE-7209.
		///
		/// revision						current
		/// Section Head 1					Section Head 1
		///		Chap. 1							Chap. 1
		///			Verse 1							Verse 1
		/// Section Head 2
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_SectionMissingInCurrentButEmptyInRev2()
		{
			// Build current section which only contains one paragraph with 2 verses in one paragraph.
			IScrSection section1Curr = CreateSection(m_genesis, "Section 1");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "verse one", Cache.DefaultVernWs);

			// Build revision section 1
			IScrSection section1Rev = CreateSection(m_genesisRevision, "Section 1");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "verse one", Cache.DefaultVernWs);

			// Build revision section 2, making sure it has no paragraphs.
			IScrSection section2Rev = CreateSection(m_genesisRevision, "Section 2");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// Verify diff1: the second section is "missing in current"
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff1, 01001001, 01001001, DifferenceType.SectionHeadMissingInCurrent,
			   section2Rev, (IScrTxtPara)section1Curr.ContentOA[0],
			   ((IScrTxtPara)section1Curr.ContentOA[0]).Contents.Length);

			// Revert the first difference, which should copy the first revision section to the current
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(2, m_genesis.SectionsOS.Count);

			IScrSection section1 = m_genesis.SectionsOS[0];
			Assert.AreEqual(01001001, section1.VerseRefStart);
			Assert.AreEqual(01001001, section1.VerseRefEnd);
			Assert.AreEqual(1, section1.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("11verse one", ((IScrTxtPara)section1.ContentOA[0]).Contents.Text);

			IScrSection section2 = m_genesis.SectionsOS[1];
			Assert.AreEqual(01001001, section2.VerseRefStart);
			Assert.AreEqual(01001001, section2.VerseRefEnd);
			Assert.AreEqual(1, section2.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual(0, ((IScrTxtPara)section2.ContentOA[0]).Contents.Length);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// TODO: Update this test when TE-7210, TE-7208 and TE-7209 are fixed.
		///
		/// Test the ReplaceCurrentWithRevision method when sections are "missing in current"
		/// (but have only an empty paragraph in the revision) and will be inserted there.
		/// This test is for TE-7210 and will probably fix TE-7208 and TE-7209.
		///
		/// revision						current
		/// Section Head 1					Section Head 1
		///		Chap. 1							Chap. 1
		/// Section Head 2
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_SectionMissingInCurrentButEmptyInRev3()
		{
			// Build current section which only contains one paragraph with 2 verses in one paragraph.
			IScrSection section1Curr = CreateSection(m_genesis, "Section 1");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			//AddRunToMockedPara(para1Curr, "1", ScrStyleNames.ChapterNumber);
			//AddRunToMockedPara(para1Curr, "1", ScrStyleNames.VerseNumber);
			//AddRunToMockedPara(para1Curr, "verse one", Cache.DefaultVernWs);

			// Build revision section 1
			IScrSection section1Rev = CreateSection(m_genesisRevision, "Section 1");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			//AddRunToMockedPara(para1Rev, "1", ScrStyleNames.dChapterNumber);
			//AddRunToMockedPara(para1Rev, "1", ScrStyleNames.VerseNumber);
			//AddRunToMockedPara(para1Rev, "verse one", Cache.DefaultVernWs);

			// Build revision section 2, making sure it has no paragraphs.
			IScrSection section2Rev = CreateSection(m_genesisRevision, "Section 2");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// Verify diff1: the second section is "missing in current"
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			//DiffTestHelper.VerifySectionDiff(diff1, 01001002, 01001002, DifferenceType.SectionHeadMissingInCurrent,
			//    section2Rev, section1Curr.HeadingOA[0], 0);

			// Revert the first difference, which should copy the first revision section to the current
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(2, m_genesis.SectionsOS.Count);

			IScrSection section = m_genesis.SectionsOS[0];
			Assert.AreEqual(01001001, section.VerseRefStart);
			Assert.AreEqual(01001001, section.VerseRefEnd);
			Assert.AreEqual(1, section.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual(0, ((IScrTxtPara)section.ContentOA[0]).Contents.Length);

			section = m_genesis.SectionsOS[1];
			Assert.AreEqual(01001001, section.VerseRefStart);
			Assert.AreEqual(01001001, section.VerseRefEnd);
			Assert.AreEqual(1, section.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual(0, ((IScrTxtPara)section.ContentOA[0]).Contents.Length);

			//Assert.AreEqual(0, m_bookMerger.Differences.Count);

			//// Recheck that Current is now identical to Revision
			//m_bookMerger.DetectDifferences_ReCheck();
			//Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the
		/// current book has a 'section with back translation' missing in the Scripture.
		/// revision        current
		/// 1:1             1:1
		/// 2:1
		/// 3:1             3:1
		///
		/// insert 2:1
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_SectionMissingInCurrent_WithBT()
		{
			// Build the "current" sections
			IScrSection section1Curr = CreateSection(m_genesis, "My First Section");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "This is the first section", Cache.DefaultVernWs);

			IScrSection section3Curr = CreateSection(m_genesis, "My Third Section");
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(section3Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Curr, "3", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para3Curr, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3Curr, "This is the third section", Cache.DefaultVernWs);

			// Build the "revision" sections
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My First Section");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "This is the first section", Cache.DefaultVernWs);

			IScrSection section2Rev = CreateSection(m_genesisRevision, "My Second Section");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "2", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para2Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "This is the second section", Cache.DefaultVernWs);
			// the section2Rev heading includes a footnote
			IScrTxtPara paraHeadRev = (IScrTxtPara)section2Rev.HeadingOA[0];
			IScrFootnote footnoteHeadRev = AddFootnote(m_genesisRevision,
				paraHeadRev, 2, "Heading footnote text");
			// and para2Rev in the section content includes a footnote
			IScrFootnote footnote2Rev = AddFootnote(m_genesisRevision,
				para2Rev, 6, "footnote2 text");

			// Add back translation to section2Rev's heading
			int btWs = Cache.DefaultAnalWs;
			ICmTranslation transParaHeadRev = AddBtToMockedParagraph(paraHeadRev, btWs);
			AddRunToMockedTrans(transParaHeadRev, btWs, "BT of section heading", null);

			// Add back translation to para2Rev in the section content
			ICmTranslation transPara2Rev = AddBtToMockedParagraph(para2Rev, btWs);
			AddRunToMockedTrans(transPara2Rev, btWs, "BT of para two", null);

			// Add back translation to the heading footnote
			ICmTranslation transFootnoteHeadRev = AddBtFootnote(
				transParaHeadRev, 2, btWs, footnoteHeadRev, "BT of heading footnote");
			transParaHeadRev.Status.set_String(btWs, BackTranslationStatus.Checked.ToString());
			transFootnoteHeadRev.Status.set_String(btWs, BackTranslationStatus.Checked.ToString());

			// Add back translation of the content footnote
			ICmTranslation transFootnotePara2Rev = AddBtFootnote(transPara2Rev, 2, btWs, footnote2Rev, "BT of footnote2");
			transPara2Rev.Status.set_String(btWs, BackTranslationStatus.Finished.ToString());
			transFootnotePara2Rev.Status.set_String(btWs, BackTranslationStatus.Finished.ToString());


			IScrSection section3Rev = CreateSection(m_genesisRevision, "My Third Section");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(section3Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Rev, "3", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para3Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3Rev, "This is the third section", Cache.DefaultVernWs);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			// Verify diff1: the Second section is "missing in current"
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff1, 01002001, 01002001, DifferenceType.SectionMissingInCurrent,
				section2Rev, (IScrTxtPara)section3Curr.HeadingOA[0], 0);

			// Revert the first difference, which should copy the second revision section to the current
			m_bookMerger.ReplaceCurrentWithRevision(diff1);

			// Confirm that the section is restored correctly.
			Assert.AreEqual(3, m_genesis.SectionsOS.Count);
			IScrSection section = (IScrSection)m_genesis.SectionsOS[1];
			Assert.AreEqual(01002001, section.VerseRefStart);
			Assert.AreEqual(01002001, section.VerseRefEnd);

			// Confirm that the heading paragraph is restored correctly.
			IScrTxtPara paraHead = (IScrTxtPara)section.HeadingOA[0];
			Assert.AreEqual("My" + StringUtils.kChObject + " Second Section", paraHead.Contents.Text);
			ITsString tssParaHead = paraHead.Contents;
			Assert.AreEqual(3, tssParaHead.RunCount);
			AssertEx.RunIsCorrect(tssParaHead, 0, "My", null, Cache.DefaultVernWs, true);
			// Run #1 is ORC for footnote, checked below...
			AssertEx.RunIsCorrect(tssParaHead, 2, " Second Section", null, Cache.DefaultVernWs, true);

			IScrFootnote footnoteHeadNew = m_genesis.FootnotesOS[0];
			VerifyFootnote(footnoteHeadNew, paraHead, 2);
			Assert.AreEqual("Heading footnote text", ((IScrTxtPara)footnoteHeadNew[0]).Contents.Text);

			// Confirm that the content paragraph is restored correctly.
			IScrTxtPara para2 = (IScrTxtPara)section.ContentOA[0];
			Assert.AreEqual("21This" + StringUtils.kChObject + " is the second section", para2.Contents.Text);
			ITsString tssPara2 = para2.Contents;
			Assert.AreEqual(5, tssPara2.RunCount);
			AssertEx.RunIsCorrect(tssPara2, 0, "2", ScrStyleNames.ChapterNumber, Cache.DefaultVernWs, true);
			AssertEx.RunIsCorrect(tssPara2, 1, "1", ScrStyleNames.VerseNumber, Cache.DefaultVernWs, true);
			AssertEx.RunIsCorrect(tssPara2, 2, "This", null, Cache.DefaultVernWs, true);
			// Run #3 is ORC for footnote, checked below...
			AssertEx.RunIsCorrect(tssPara2, 4, " is the second section", null, Cache.DefaultVernWs, true);

			IScrFootnote footnote2New = m_genesis.FootnotesOS[1];
			VerifyFootnote(footnote2New, para2, 6);
			Assert.AreEqual("footnote2 text", ((IScrTxtPara)footnote2New[0]).Contents.Text);

			// Verify the heading back translation is restored correctly
			ICmTranslation transParaHead = paraHead.GetBT();
			Assert.IsNotNull(transParaHead, "Section heading did not have translation restored from rev");
			ITsString tssTransParaHead = transParaHead.Translation.get_String(btWs);
			Assert.AreEqual("BT" + StringUtils.kChObject + " of section heading", tssTransParaHead.Text);

			Assert.AreEqual(3, tssTransParaHead.RunCount);
			AssertEx.RunIsCorrect(tssTransParaHead, 0, "BT", null, btWs);
			// Run #1 is ORC for footnote, checked below...
			AssertEx.RunIsCorrect(tssTransParaHead, 2, " of section heading", null, btWs);
			LcmTestHelper.VerifyBtFootnote(footnoteHeadNew, paraHead, btWs, 2);

			// BT alternate must have the original status
			Assert.AreEqual(BackTranslationStatus.Checked.ToString(),
				transParaHead.Status.get_String(btWs).Text);

			// Verify the content back translation is restored correctly
			ICmTranslation transPara2 = para2.GetBT();
			Assert.IsNotNull(transPara2, "Second content did not have translation restored from rev");
			ITsString tssTransPara2 = transPara2.Translation.get_String(btWs);

			Assert.AreEqual("BT" + StringUtils.kChObject + " of para two", tssTransPara2.Text);
			Assert.AreEqual(3, tssTransPara2.RunCount);
			AssertEx.RunIsCorrect(tssTransPara2, 0, "BT", null, btWs);
			// Run #1 is ORC for footnote, checked below...
			AssertEx.RunIsCorrect(tssTransPara2, 2, " of para two", null, btWs);
			LcmTestHelper.VerifyBtFootnote(footnote2New, para2, btWs, 2);
			// BT alternate must have the original status
			Assert.AreEqual(BackTranslationStatus.Finished.ToString(),
				transPara2.Status.get_String(btWs).Text);

			// Verify heading footnote's back translation is restored correctly
			ICmTranslation transFootnoteHeadNew = ((IScrTxtPara)footnoteHeadNew[0]).GetBT();
			Assert.IsNotNull(transFootnoteHeadNew, "Heading Footnote did not have translation restored from rev");
			Assert.AreEqual("BT of heading footnote",
				transFootnoteHeadNew.Translation.get_String(btWs).Text);
			// BT alternate must have the original status
			Assert.AreEqual(BackTranslationStatus.Checked.ToString(),
				transFootnoteHeadNew.Status.get_String(btWs).Text);

			// Verify footnote2's back translation is restored correctly
			ICmTranslation transFootnote2Trans = ((IScrTxtPara)footnote2New[0]).GetBT();
			Assert.IsNotNull(transFootnote2Trans, "Footnote did not have translation restored from rev");
			Assert.AreEqual("BT of footnote2",
				transFootnote2Trans.Translation.get_String(btWs).Text);
			// BT alternate must have the original status
			Assert.AreEqual(BackTranslationStatus.Finished.ToString(),
				transFootnote2Trans.Status.get_String(btWs).Text);

			Assert.AreEqual(0, m_bookMerger.Differences.Count);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method when sections are "added to current"
		/// and will be removed.
		///
		/// revision        current
		///                  1:1
		/// 2:1              2:1
		///                  3:1
		/// remove 1:1
		/// remove 3:1
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_SectionAddedToCurrent()
		{
			// Build the "current" sections
			IScrSection section1Curr = CreateSection(m_genesis, "My First Section");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "This is the first section", Cache.DefaultVernWs);

			IScrSection section2Curr = CreateSection(m_genesis, "My Second Section");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "2", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para2Curr, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "This is the second section", Cache.DefaultVernWs);

			IScrSection section3Curr = CreateSection(m_genesis, "My Third Section");
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(section3Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Curr, "3", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para3Curr, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3Curr, "This is the third section", Cache.DefaultVernWs);

			// Build the "revision" sections
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Second Section");
			IScrTxtPara paraRev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraRev, "2", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(paraRev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(paraRev, "This is the second section", Cache.DefaultVernWs);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// Verify diff1: the First section is "added to current"
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff1, 01001001, 01001001, DifferenceType.SectionAddedToCurrent,
				section1Curr, (IScrTxtPara)sectionRev.HeadingOA[0], 0);

			// Verify diff2: the Third section is "added to current"
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifySectionDiff(diff2, 01003001, 01003001, DifferenceType.SectionAddedToCurrent,
				section3Curr, paraRev, paraRev.Contents.Length);

			// Revert the first difference, which should delete the first curr section
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(2, m_genesis.SectionsOS.Count);
			Assert.AreEqual(section2Curr, m_genesis.SectionsOS[0]);

			// Revert the second difference, which should delete the last curr section
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(1, m_genesisRevision.SectionsOS.Count);
			Assert.AreEqual(section2Curr, m_genesis.SectionsOS[0]);

			Assert.AreEqual(0, m_bookMerger.Differences.Count);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method when the replace might result in
		/// deleting the only section in the Current book.
		/// Then test again when the ReplaceCurrentWithRevision should replace an empty section
		/// (the only Current section) rather than insert an additional section.
		/// The book should never be left with no sections.
		///
		/// Revision       Current
		///                  2,3
		///  24,25
		///
		///  remove 2,3
		///  insert 24,25
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_Sections_DeleteInsertOnlySection()
		{
			// Build the "current" section
			IScrSection sectionCurr = CreateSection(m_genesis, "My Section");
			IScrTxtPara para1CurrHeading = (IScrTxtPara)sectionCurr.HeadingOA[0];
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "2", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "Google at my verse two", Cache.DefaultVernWs);
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "Google at my verse three", Cache.DefaultVernWs);

			// Build the "revision" section
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My Beautiful Section");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "24", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "Observe the text of verse twenty-four", Cache.DefaultVernWs);
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "25", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "Look at the text of verse twenty-five", Cache.DefaultVernWs);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// Verify diff1: the curr section is "added to current"
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff1, 01001002, 01001003, DifferenceType.SectionAddedToCurrent,
				sectionCurr, (IScrTxtPara)sectionRev.HeadingOA[0], 0);


			// Verify diff2: the rev section is "missing in current"
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifySectionDiff(diff2, 01001024, 01001025, DifferenceType.SectionMissingInCurrent,
				sectionRev, para2Curr, para2Curr.Contents.Length);

			// Revert the first difference.
			// This would normally result in the Current section being deleted, but since
			// it is the only section it should just be replaced by an empty section.
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(1, m_genesis.SectionsOS.Count);
			IScrSection section = m_genesis.SectionsOS[0];
			Assert.AreEqual(01001001, section.VerseRefStart);
			Assert.AreEqual(01001001, section.VerseRefEnd);
			Assert.AreEqual(1, section.HeadingOA.ParagraphsOS.Count);
			Assert.AreEqual(1, section.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual(null, ((IScrTxtPara)section.HeadingOA[0]).Contents.Text);
			Assert.AreEqual(null, ((IScrTxtPara)section.ContentOA[0]).Contents.Text);
			// the empty para of the Curr section heading should still have the original hvo of the first para
			Assert.AreEqual(para1CurrHeading, section.HeadingOA[0]);
			// the empty para of the Curr section content should still have the original hvo of the last para
			Assert.AreEqual(para2Curr, section.ContentOA[0]);

			// Revert the second difference.
			// This would normally result in inserting the Rev section in the Current, but since
			// the Current section is empty it should just be replaced by the Rev section.
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(1, m_genesisRevision.SectionsOS.Count);
			Assert.AreEqual(1, m_genesis.SectionsOS.Count);
			section = m_genesis.SectionsOS[0];
			Assert.AreEqual(01001024, section.VerseRefStart);
			Assert.AreEqual(01001025, section.VerseRefEnd);
			Assert.AreEqual(1, section.HeadingOA.ParagraphsOS.Count);
			Assert.AreEqual(2, section.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("My Beautiful Section", ((IScrTxtPara)section.HeadingOA[0]).Contents.Text);
			Assert.AreEqual("24Observe the text of verse twenty-four", ((IScrTxtPara)section.ContentOA[0]).Contents.Text);
			Assert.AreEqual("25Look at the text of verse twenty-five", ((IScrTxtPara)section.ContentOA[1]).Contents.Text);
			// the first para of the Curr section heading should still have its original hvo
			Assert.AreEqual(para1CurrHeading, section.HeadingOA[0]);
			// the last para of the Curr section content should still have its original hvo
			Assert.AreEqual(para2Curr, section.ContentOA[1]);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method when a the first section has been
		/// deleted and it has a footnote.
		///
		/// Revision                 Current
		///  section head 1           section head 2
		///   verse 1-5 (ft ABC)	   verse 6-10 (ft DEF)
		///  section head 2
		///   verse 6-10(ft DEF)
		///
		/// </summary>
		/// <remarks>This test serves as a regression test for the bug TE-4188.</remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_Sections_InsertFirstSection_WithFootnotes()
		{
			// Add a title to the "current". (needed for NextFootNoteIndex)
			AddTitleToMockedBook(m_genesis, "Genesis");

			// Build the "current" section
			IScrSection section1Curr = CreateSection(m_genesis, "My Second Section");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "6-10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "And here is some more.", Cache.DefaultVernWs);
			AddFootnote(m_genesis, para2Curr, 4, "DEF");
			Assert.AreEqual(1, m_genesis.FootnotesOS.Count);

			// Build two "revision" sections
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My First Section");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1-5", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "This is the first paragraph.", Cache.DefaultVernWs);
			int footnoteABCPos = para1Rev.Contents.Length;
			AddFootnote(m_genesisRevision, para1Rev, footnoteABCPos, "ABC");

			IScrSection section2Rev = CreateSection(m_genesisRevision, "My Second Section");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "6-10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "And here is some more.", Cache.DefaultVernWs);
			int footnoteDEFPos = 4;
			AddFootnote(m_genesisRevision, para2Rev, footnoteDEFPos, "DEF");
			Assert.AreEqual(2, m_genesisRevision.FootnotesOS.Count);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff1, 01001001, 01001005, DifferenceType.SectionMissingInCurrent,
				section1Rev, (IScrTxtPara)section1Curr.HeadingOA[0], 0);

			// Revert the diff
			m_bookMerger.ReplaceCurrentWithRevision(diff1);

			// Make sure that there are now two sections in the current
			Assert.AreEqual(2, m_genesis.SectionsOS.Count);

			Assert.AreEqual(2, m_genesis.FootnotesOS.Count);

			// Our objective in this test is to make sure that the footnotes get created correctly when
			// the diffs are reverted.

			// The first footnote should be the ABC footnote in the first paragraph of the first section
			IScrFootnote footnoteNew = m_genesis.FootnotesOS[0];
			IScrTxtPara para = (IScrTxtPara)((IScrSection)m_genesis.SectionsOS[0]).ContentOA[0];
			VerifyFootnote(footnoteNew, para, footnoteABCPos);
			Assert.AreEqual("ABC", ((IScrTxtPara)footnoteNew[0]).Contents.Text);

			// The second footnote should be the DEF footnote in the first paragraph of the second section
			footnoteNew = m_genesis.FootnotesOS[1];
			para = (IScrTxtPara)((IScrSection)m_genesis.SectionsOS[1]).ContentOA[0];
			VerifyFootnote(footnoteNew, para, footnoteDEFPos);
			Assert.AreEqual("DEF", ((IScrTxtPara)footnoteNew[0]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method for sections when the replace might
		/// result in deleting a section that other differences still refer to.
		///
		/// Revision       Current
		///  1
		///                  2
		///  3               3
		///  4
		///                  5
		///
		///  remove 2
		///  insert 1
		///  remove 5
		///  insert 4
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_Sections_DeleteProblemSet1()
		{
			// Build the "current" sections
			IScrSection section1Curr = CreateSection(m_genesis, "My Section");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "2", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "This is the first section", Cache.DefaultVernWs);

			IScrSection section2Curr = CreateSection(m_genesis, "My Second Section");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "3", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para2Curr, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "This is the second section", Cache.DefaultVernWs);

			IScrSection section3Curr = CreateSection(m_genesis, "My Third Section");
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(section3Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Curr, "5", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para3Curr, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3Curr, "This is the third section", Cache.DefaultVernWs);

			// Build the "revision" sections
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My Second Section");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "This is the first section", Cache.DefaultVernWs);

			IScrSection section2Rev = CreateSection(m_genesisRevision, "My Second Section");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "3", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para2Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "This is the second section", Cache.DefaultVernWs);

			IScrSection section3Rev = CreateSection(m_genesisRevision, "My Second Section");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(section3Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Rev, "4", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para3Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3Rev, "This is the third section", Cache.DefaultVernWs);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(4, m_bookMerger.Differences.Count);

			// Do a quick sanity check of the diffs
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.SectionMissingInCurrent, diff1.DiffType);
			Assert.AreEqual(01001001, diff1.RefStart);

			Difference diff2 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.SectionAddedToCurrent, diff2.DiffType);
			Assert.AreEqual(01002001, diff2.RefStart);

			Difference diff3 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.SectionMissingInCurrent, diff3.DiffType);
			Assert.AreEqual(01004001, diff3.RefStart);

			Difference diff4 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.SectionAddedToCurrent, diff4.DiffType);
			Assert.AreEqual(01005001, diff4.RefStart);

			// Revert the second difference which will delete the first current section
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(2, m_genesis.SectionsOS.Count);

			// Revert the first difference which will insert the first rev section into the current
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(3, m_genesis.SectionsOS.Count);

			// Revert the fourth difference which will delete the last current section
			m_bookMerger.ReplaceCurrentWithRevision(diff4);
			Assert.AreEqual(2, m_genesis.SectionsOS.Count);

			// Revert the third difference which will insert the last rev section into the current
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual(3, m_genesis.SectionsOS.Count);

			// Make sure the current sections are the right ones in the right order
			IScrSection section = (IScrSection)m_genesis.SectionsOS[0];
			Assert.AreEqual(01001001, section.VerseRefStart);

			section = section.NextSection;
			Assert.AreEqual(01003001, section.VerseRefStart);

			section = section.NextSection;
			Assert.AreEqual(01004001, section.VerseRefStart);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method for sections when the replace might
		/// result in deleting a section that other differences still refer to.
		///
		/// revision        current
		/// 1                1
		/// 2
		///                  3
		/// 4                4
		///                  5
		/// 6
		///
		///  remove 3
		///  insert 2
		///  remove 5
		///  insert 6
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_Sections_DeleteProblemSet2()
		{
			// Build the "current" sections
			IScrSection section1Curr = CreateSection(m_genesis, "My Section");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "This is the first section", Cache.DefaultVernWs);

			IScrSection section2Curr = CreateSection(m_genesis, "My Section");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "3", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para2Curr, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "This is the second section", Cache.DefaultVernWs);

			IScrSection section3Curr = CreateSection(m_genesis, "My Section");
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(section3Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Curr, "4", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para3Curr, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3Curr, "This is the third section", Cache.DefaultVernWs);

			IScrSection section4Curr = CreateSection(m_genesis, "My Section");
			IScrTxtPara para4Curr = AddParaToMockedSectionContent(section4Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para4Curr, "5", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para4Curr, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para4Curr, "This is the third section", Cache.DefaultVernWs);

			// Build the "revision" sections
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My Section");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "This is the first section", Cache.DefaultVernWs);

			IScrSection section2Rev = CreateSection(m_genesisRevision, "My Section");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "2", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para2Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "This is the second section", Cache.DefaultVernWs);

			IScrSection section3Rev = CreateSection(m_genesisRevision, "My Section");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(section3Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Rev, "4", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para3Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3Rev, "This is the third section", Cache.DefaultVernWs);

			IScrSection section4Rev = CreateSection(m_genesisRevision, "My Section");
			IScrTxtPara para4Rev = AddParaToMockedSectionContent(section4Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para4Rev, "6", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para4Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para4Rev, "This is the third section", Cache.DefaultVernWs);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(4, m_bookMerger.Differences.Count);

			// Do a quick sanity check of the diffs
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.SectionMissingInCurrent, diff1.DiffType);
			Assert.AreEqual(01002001, diff1.RefStart);

			Difference diff2 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.SectionAddedToCurrent, diff2.DiffType);
			Assert.AreEqual(01003001, diff2.RefStart);

			Difference diff3 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.SectionAddedToCurrent, diff3.DiffType);
			Assert.AreEqual(01005001, diff3.RefStart);

			Difference diff4 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.SectionMissingInCurrent, diff4.DiffType);
			Assert.AreEqual(01006001, diff4.RefStart);

			// Revert the second difference which will delete a current section
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(3, m_genesis.SectionsOS.Count);

			// Revert the first difference which will insert a rev section into the current
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(4, m_genesis.SectionsOS.Count);

			// Revert the third difference which will delete a current section
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			Assert.AreEqual(3, m_genesis.SectionsOS.Count);

			// Revert the fourth difference which will insert a rev section
			m_bookMerger.ReplaceCurrentWithRevision(diff4);
			Assert.AreEqual(4, m_genesis.SectionsOS.Count);

			// Make sure the current sections are the right ones in the right order
			IScrSection section = (IScrSection)m_genesis.SectionsOS[0];
			Assert.AreEqual(01001001, section.VerseRefStart);

			section = section.NextSection;
			Assert.AreEqual(01002001, section.VerseRefStart);

			section = section.NextSection;
			Assert.AreEqual(01004001, section.VerseRefStart);

			section = section.NextSection;
			Assert.AreEqual(01006001, section.VerseRefStart);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method for sections when multiple adjacent
		/// sections are deleted in the Current.
		///
		/// revision        current
		///					 1
		///					 2
		///					 3
		///	 4				 4
		///                  5
		///					 6
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_Sections_DeleteMultiple()
		{
			// Build the "current" sections: 1-6
			IScrSection section1Curr = CreateSection(m_genesis, "My Section");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.ChapterNumber);

			IScrSection section2Curr = CreateSection(m_genesis, "My Section");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "2", ScrStyleNames.ChapterNumber);

			IScrSection section3Curr = CreateSection(m_genesis, "My Section");
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(section3Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Curr, "3", ScrStyleNames.ChapterNumber);

			IScrSection section4Curr = CreateSection(m_genesis, "My Section");
			IScrTxtPara para4Curr = AddParaToMockedSectionContent(section4Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para4Curr, "4", ScrStyleNames.ChapterNumber);

			IScrSection section5Curr = CreateSection(m_genesis, "My Section");
			IScrTxtPara para5Curr = AddParaToMockedSectionContent(section5Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para5Curr, "5", ScrStyleNames.ChapterNumber);

			IScrSection section6Curr = CreateSection(m_genesis, "My Section");
			IScrTxtPara para6Curr = AddParaToMockedSectionContent(section6Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para6Curr, "6", ScrStyleNames.ChapterNumber);

			// Build the "revision" section: 4
			IScrSection section4Rev = CreateSection(m_genesisRevision, "My Section");
			IScrTxtPara para4Rev = AddParaToMockedSectionContent(section4Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para4Rev, "4", ScrStyleNames.ChapterNumber);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			// Do a quick sanity check of the diffs
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.SectionAddedToCurrent, diff1.DiffType);
			Assert.AreEqual(01001001, diff1.RefStart);
			Assert.AreEqual(01003001, diff1.RefEnd);

			Difference diff5 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.SectionAddedToCurrent, diff5.DiffType);
			Assert.AreEqual(01005001, diff5.RefStart);
			Assert.AreEqual(01006001, diff5.RefEnd);

			// Revert all the "added in current" diffs, to delete them from the current
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			m_bookMerger.ReplaceCurrentWithRevision(diff5);

			Assert.AreEqual(1, m_genesis.SectionsOS.Count);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method for sections when multiple adjacent
		/// sections are inserted in the Current. In this test, insert them in forward order.
		/// The main concern is that the resulting sections in the Current are in the correct order.
		///
		/// revision        current
		/// 1
		/// 2
		///                  3
		/// 4
		/// 5
		///                  6
		/// 7
		/// 8
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_Sections_InsertMultipleForward()
		{
			// Build the "current" sections: 3,6
			IScrSection section1Curr = CreateSection(m_genesis, "My Section");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "3", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "This is the first section", Cache.DefaultVernWs);

			IScrSection section2Curr = CreateSection(m_genesis, "My Section");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "6", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para2Curr, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "This is the second section", Cache.DefaultVernWs);

			// Build the "revision" sections: 1,2,4,5,7,8
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My Section");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "This is the first section", Cache.DefaultVernWs);

			IScrSection section2Rev = CreateSection(m_genesisRevision, "My Section");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "2", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para2Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "This is the second section", Cache.DefaultVernWs);

			IScrSection section3Rev = CreateSection(m_genesisRevision, "My Section");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(section3Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Rev, "4", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para3Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3Rev, "This is the third section", Cache.DefaultVernWs);

			IScrSection section4Rev = CreateSection(m_genesisRevision, "My Section");
			IScrTxtPara para4Rev = AddParaToMockedSectionContent(section4Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para4Rev, "5", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para4Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para4Rev, "This is the fourth section", Cache.DefaultVernWs);

			IScrSection section5Rev = CreateSection(m_genesisRevision, "My Section");
			IScrTxtPara para5Rev = AddParaToMockedSectionContent(section5Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para5Rev, "7", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para5Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para5Rev, "This is the fifth section", Cache.DefaultVernWs);

			IScrSection section6Rev = CreateSection(m_genesisRevision, "My Section");
			IScrTxtPara para6Rev = AddParaToMockedSectionContent(section6Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para6Rev, "8", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para6Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para6Rev, "This is the sixth section", Cache.DefaultVernWs);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(5, m_bookMerger.Differences.Count);

			// Do a quick sanity check of the diffs
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.SectionMissingInCurrent, diff1.DiffType);
			Assert.AreEqual(01001001, diff1.RefStart);
			Assert.AreEqual(01002001, diff1.RefEnd);

			Difference diff3 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.SectionAddedToCurrent, diff3.DiffType);
			Assert.AreEqual(01003001, diff3.RefStart);

			Difference diff4 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.SectionMissingInCurrent, diff4.DiffType);
			Assert.AreEqual(01004001, diff4.RefStart);
			Assert.AreEqual(01005001, diff4.RefEnd);

			Difference diff6 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.SectionAddedToCurrent, diff6.DiffType);
			Assert.AreEqual(01006001, diff6.RefStart);

			Difference diff7 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.SectionMissingInCurrent, diff7.DiffType);
			Assert.AreEqual(01007001, diff7.RefStart);
			Assert.AreEqual(01008001, diff7.RefEnd);

			// Revert all the "missing in current" diffs, to insert them into the current
			// FORWARD order
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			m_bookMerger.ReplaceCurrentWithRevision(diff4);
			m_bookMerger.ReplaceCurrentWithRevision(diff7);

			Assert.AreEqual(8, m_genesis.SectionsOS.Count);

			// Make sure the current sections are the right ones in the right order
			IScrSection section = (IScrSection)m_genesis.SectionsOS[0];
			Assert.AreEqual(01001001, section.VerseRefStart);
			section = section.NextSection;
			Assert.AreEqual(01002001, section.VerseRefStart);
			section = section.NextSection;
			Assert.AreEqual(01003001, section.VerseRefStart);
			section = section.NextSection;
			Assert.AreEqual(01004001, section.VerseRefStart);
			section = section.NextSection;
			Assert.AreEqual(01005001, section.VerseRefStart);
			section = section.NextSection;
			Assert.AreEqual(01006001, section.VerseRefStart);
			section = section.NextSection;
			Assert.AreEqual(01007001, section.VerseRefStart);
			section = section.NextSection;
			Assert.AreEqual(01008001, section.VerseRefStart);

			// Revert the remaining diffs, "added in current"
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			m_bookMerger.ReplaceCurrentWithRevision(diff6);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method for sections when multiple adjacent
		/// sections are inserted in the Current. In this test, insert them in reverse order.
		/// The main concern is that the resulting sections in the Current are in the correct order.
		///
		/// revision        current
		/// 1
		/// 2
		///                  3
		/// 4
		/// 5
		///                  6
		/// 7
		/// 8
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_Sections_InsertMultipleReverse()
		{
			// Build the "current" sections: 3,6
			IScrSection section1Curr = CreateSection(m_genesis, "My Section");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "3", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "This is the first section", Cache.DefaultVernWs);

			IScrSection section2Curr = CreateSection(m_genesis, "My Section");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "6", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para2Curr, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "This is the second section", Cache.DefaultVernWs);

			// Build the "revision" sections: 1,2,4,5,7,8
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My Section");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "This is the first section", Cache.DefaultVernWs);

			IScrSection section2Rev = CreateSection(m_genesisRevision, "My Section");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "2", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para2Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "This is the second section", Cache.DefaultVernWs);

			IScrSection section3Rev = CreateSection(m_genesisRevision, "My Section");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(section3Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Rev, "4", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para3Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3Rev, "This is the third section", Cache.DefaultVernWs);

			IScrSection section4Rev = CreateSection(m_genesisRevision, "My Section");
			IScrTxtPara para4Rev = AddParaToMockedSectionContent(section4Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para4Rev, "5", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para4Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para4Rev, "This is the fourth section", Cache.DefaultVernWs);

			IScrSection section5Rev = CreateSection(m_genesisRevision, "My Section");
			IScrTxtPara para5Rev = AddParaToMockedSectionContent(section5Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para5Rev, "7", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para5Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para5Rev, "This is the fifth section", Cache.DefaultVernWs);

			IScrSection section6Rev = CreateSection(m_genesisRevision, "My Section");
			IScrTxtPara para6Rev = AddParaToMockedSectionContent(section6Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para6Rev, "8", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para6Rev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para6Rev, "This is the sixth section", Cache.DefaultVernWs);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(5, m_bookMerger.Differences.Count);

			// Do a quick sanity check of the diffs
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.SectionMissingInCurrent, diff1.DiffType);
			Assert.AreEqual(01001001, diff1.RefStart);
			Assert.AreEqual(01002001, diff1.RefEnd);

			Difference diff3 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.SectionAddedToCurrent, diff3.DiffType);
			Assert.AreEqual(01003001, diff3.RefStart);

			Difference diff4 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.SectionMissingInCurrent, diff4.DiffType);
			Assert.AreEqual(01004001, diff4.RefStart);
			Assert.AreEqual(01005001, diff4.RefEnd);

			Difference diff6 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.SectionAddedToCurrent, diff6.DiffType);
			Assert.AreEqual(01006001, diff6.RefStart);

			Difference diff7 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.SectionMissingInCurrent, diff7.DiffType);
			Assert.AreEqual(01007001, diff7.RefStart);
			Assert.AreEqual(01008001, diff7.RefEnd);

			// Revert all the "missing in current" diffs, to insert them into the current
			// REVERSE order
			m_bookMerger.ReplaceCurrentWithRevision(diff7);
			m_bookMerger.ReplaceCurrentWithRevision(diff4);
			m_bookMerger.ReplaceCurrentWithRevision(diff1);

			Assert.AreEqual(8, m_genesis.SectionsOS.Count);

			// Make sure the current sections are the right ones in the right order
			IScrSection section = (IScrSection)m_genesis.SectionsOS[0];
			Assert.AreEqual(01001001, section.VerseRefStart);
			section = section.NextSection;
			Assert.AreEqual(01002001, section.VerseRefStart);
			section = section.NextSection;
			Assert.AreEqual(01003001, section.VerseRefStart);
			section = section.NextSection;
			Assert.AreEqual(01004001, section.VerseRefStart);
			section = section.NextSection;
			Assert.AreEqual(01005001, section.VerseRefStart);
			section = section.NextSection;
			Assert.AreEqual(01006001, section.VerseRefStart);
			section = section.NextSection;
			Assert.AreEqual(01007001, section.VerseRefStart);
			section = section.NextSection;
			Assert.AreEqual(01008001, section.VerseRefStart);

			// Revert the remaining diffs, "added in current"
			m_bookMerger.ReplaceCurrentWithRevision(diff6);
			m_bookMerger.ReplaceCurrentWithRevision(diff3);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method when three empty adjacent sections are removed
		/// from the current and restored from the revision (TE-7841).
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_Sections_InsertThreeUncorrelated()
		{
			// Build the "current" section: chapter 1
			IScrSection section1Curr = CreateSection(m_genesis, "My Section 1");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 1, 0, string.Empty);

			// Build the "revision" section: chapter 1 followed by three empty sections
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My Section 1");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 1, 0, string.Empty);
			IScrSection section2Rev = CreateSection(m_genesisRevision, "My Section 2");
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);
			{
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.CreateParagraph(section2Rev.ContentOA);
			IScrSection section3Rev = CreateSection(m_genesisRevision, "My Section 3");
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.CreateParagraph(section3Rev.ContentOA);
			IScrSection section4Rev = CreateSection(m_genesisRevision, "My Section 4");
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.CreateParagraph(section4Rev.ContentOA);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(3, m_bookMerger.Differences.Count);

			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff1, 01001001, 01001001, DifferenceType.SectionHeadMissingInCurrent,
				new IScrSection[] { section2Rev }, para1Curr, para1Curr.Contents.Length);

			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifySectionDiff(diff2, 01001001, 01001001, DifferenceType.SectionHeadMissingInCurrent,
				new IScrSection[] { section3Rev }, para1Curr, para1Curr.Contents.Length);

			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifySectionDiff(diff3, 01001001, 01001001, DifferenceType.SectionHeadMissingInCurrent,
				new IScrSection[] { section4Rev }, para1Curr, para1Curr.Contents.Length);

			// Restore the three empty sections to the current.
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			m_bookMerger.ReplaceCurrentWithRevision(diff3);

			// We expect to have four sections now.
			Assert.AreEqual(4, m_genesis.SectionsOS.Count);

			// Make sure the current sections were restored in the right order.
			IScrSection section = (IScrSection)m_genesis.SectionsOS[0];
			Assert.AreEqual(01001001, section.VerseRefStart);
			Assert.AreEqual("My Section 1", ((IScrTxtPara)section.HeadingOA[0]).Contents.Text);
			IScrTxtPara actualPara = (IScrTxtPara)section.ContentOA[0];
			Assert.AreEqual("1", actualPara.Contents.Text);
			section = section.NextSection;
			Assert.AreEqual(01001001, section.VerseRefStart); // same reference as previous
			Assert.AreEqual("My Section 2", ((IScrTxtPara)section.HeadingOA[0]).Contents.Text);
			actualPara = (IScrTxtPara)section.ContentOA[0];
			Assert.IsTrue(string.IsNullOrEmpty(actualPara.Contents.Text));
			section = section.NextSection;
			Assert.AreEqual(01001001, section.VerseRefStart); // same reference as previous
			Assert.AreEqual("My Section 3", ((IScrTxtPara)section.HeadingOA[0]).Contents.Text);
			actualPara = (IScrTxtPara)section.ContentOA[0];
			Assert.IsTrue(string.IsNullOrEmpty(actualPara.Contents.Text));
			section = section.NextSection;
			Assert.AreEqual(01001001, section.VerseRefStart); // same reference as previous
			Assert.AreEqual("My Section 4", ((IScrTxtPara)section.HeadingOA[0]).Contents.Text);
			actualPara = (IScrTxtPara)section.ContentOA[0];
			Assert.IsTrue(string.IsNullOrEmpty(actualPara.Contents.Text));

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method when three empty adjacent sections are inserted
		/// into the current and deleted when restoring from the revision (TE-7841).
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_Sections_DeleteThreeUncorrelated()
		{
			// Build the "revision" section: chapter 1
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My Section");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 1, 0, string.Empty);

			// Build the "current" section: chapter 1 followed by three empty sections
			IScrSection section1Curr = CreateSection(m_genesis, "My Section");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 1, 0, string.Empty);
			IScrSection section2Curr = CreateSection(m_genesis, "My Section");
			StTxtParaBldr paraBldr = new StTxtParaBldr(Cache);

			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.CreateParagraph(section2Curr.ContentOA);
			IScrSection section3Curr = CreateSection(m_genesis, "My Section");
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.CreateParagraph(section3Curr.ContentOA);
			IScrSection section4Curr = CreateSection(m_genesis, "My Section");
			paraBldr.ParaStyleName = ScrStyleNames.NormalParagraph;
			paraBldr.CreateParagraph(section4Curr.ContentOA);


			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff1, 01001001, 01001001, DifferenceType.SectionAddedToCurrent,
				new IScrSection[] { section2Curr, section3Curr, section4Curr }, para1Rev, para1Rev.Contents.Length);

			// Remove the three empty sections from the current.
			m_bookMerger.ReplaceCurrentWithRevision(diff1);

			// We expect to have one section now.
			Assert.AreEqual(1, m_genesis.SectionsOS.Count);

			// Make sure the surviving section is correct.
			IScrSection section = (IScrSection)m_genesis.SectionsOS[0];
			Assert.AreEqual(01001001, section.VerseRefStart);
			IScrTxtPara actualPara = (IScrTxtPara)section.ContentOA[0];
			Assert.AreEqual("1", actualPara.Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method when a section is inserted between two
		/// existing sections but its contents are left empty. Jira # is FWR-2467.
		///
		/// Revision                 Current
		///  First section head       First section head
		///  C1                       C1
		///                           Middle section head
		///                           new para with good text and stuff
		///  Last section head        Last section head
		///   verse 2                 verse 2
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_EmptySectionContentInserted()
		{
			// Build the "current" sections
			IScrSection section1Curr = CreateSection(m_genesis, "First");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.ChapterNumber);
			IScrSection section2Curr = CreateSection(m_genesis, "Middle");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "new para with good text and stuff", Cache.DefaultVernWs);
			IScrSection section3Curr = CreateSection(m_genesis, "Last");
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(section3Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Curr, "2", ScrStyleNames.VerseNumber);

			// Build the "revision" section
			IScrSection section1Rev = CreateSection(m_genesisRevision, "First");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.ChapterNumber);
			IScrSection section2Rev = CreateSection(m_genesisRevision, "Last");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "2", ScrStyleNames.VerseNumber);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff, 01001001, 01001001, DifferenceType.SectionAddedToCurrent,
				section2Curr, para1Rev, 1);

			m_bookMerger.ReplaceCurrentWithRevision(diff);

			// Make sure that there are now two sections in the current
			Assert.AreEqual(2, m_genesis.SectionsOS.Count);
			IScrSection section1 = m_genesis.SectionsOS[0];
			IScrSection section2 = m_genesis.SectionsOS[1];
			Assert.AreEqual(01001001, section1.VerseRefStart);
			Assert.AreEqual(01001001, section1.VerseRefEnd);
			Assert.AreEqual("First", section1.HeadingOA[0].Contents.Text);
			Assert.AreEqual(1, section1.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("1", section1.ContentOA[0].Contents.Text);
			Assert.AreEqual(01001002, section2.VerseRefStart);
			Assert.AreEqual(01001002, section2.VerseRefEnd);
			Assert.AreEqual("Last", section2.HeadingOA[0].Contents.Text);
			Assert.AreEqual(1, section2.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("2", section2.ContentOA[0].Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}
		#endregion

		#region ReplaceCurrentWithRevision Split/Combined Section Tests
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method when a section head is missing in the Current
		/// (Scripture section in Current is a combination of two in the Revision).
		/// The associated IP in the Current is at a paragraph break.
		///
		/// Revision                 Current
		///  section head 1          section head 1
		///   verse 1-5               verse 1-5 para
		///  section head 2			  verse 6-10 para
		///   verse 6-10
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_SectionsCombinedInCurr_AtParaBreak()
		{
			// Build the "current" section
			IScrSection section1Curr = CreateSection(m_genesis, "My First Section");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1-5", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "This is the first paragraph.", Cache.DefaultVernWs);
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "6-10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "Yet more.", Cache.DefaultVernWs);

		//TODO: old text in rev verses 1-5
			// Build the "revision" sections
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My First Section");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1-5", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "This is the first paragraph.", Cache.DefaultVernWs);

			IScrSection section2Rev = CreateSection(m_genesisRevision, "My Second Section");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "6-10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "Old more.", Cache.DefaultVernWs);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(2, m_bookMerger.Differences.Count);
			Difference diff2 = m_bookMerger.Differences.MoveFirst();
			// There are two acceptable destinationIP values - the end of the first paragraph...
			DiffTestHelper.VerifySectionDiff(diff2, 01001006, 01001006, DifferenceType.SectionHeadMissingInCurrent,
				section2Rev, para1Curr, para1Curr.Contents.Length);
			// or the beginning of the second paragraph.
			//DiffTestHelper.VerifySectionDiff(diff2, 01001006, 01001006, DifferenceType.SectionHeadMissingInCurrent,
			//    section2Rev, para2Curr, 0);
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff3, 01001006, 01001010, DifferenceType.TextDifference,
				para2Curr, 4, 7, para2Rev, 4, 7);

			Assert.AreEqual(1, m_genesis.SectionsOS.Count);

			// Revert the SectionHeadMissing diff
			m_bookMerger.ReplaceCurrentWithRevision(diff2);

			// Make sure that there are now two sections in the current
			Assert.AreEqual(2, m_genesis.SectionsOS.Count);
			IScrSection section1 = m_genesis.SectionsOS[0];
			IScrSection section2 = m_genesis.SectionsOS[1];
			Assert.AreEqual(01001001, section1.VerseRefStart);
			Assert.AreEqual(01001005, section1.VerseRefEnd);
			Assert.AreEqual("My First Section", section1.HeadingOA[0].Contents.Text);
			Assert.AreEqual("1-5This is the first paragraph.", section1.ContentOA[0].Contents.Text);
			Assert.AreEqual(01001006, section2.VerseRefStart);
			Assert.AreEqual(01001010, section2.VerseRefEnd);
			Assert.AreEqual("My Second Section", section2.HeadingOA[0].Contents.Text);
			Assert.AreEqual("6-10Yet more.", section2.ContentOA[0].Contents.Text);
			// check that the first section and para in the Current retained their hvos
			Assert.AreEqual(section1Curr, section1);
			Assert.AreEqual(para1Curr, section1.ContentOA[0]);
			// check that the second para in the Current retained its hvo
			Assert.AreEqual(para2Curr, section2.ContentOA[0]);

			// Revert the verse 6-10 text diff
			m_bookMerger.ReplaceCurrentWithRevision(diff3);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method when a blank content paragraph is
		/// inserted after the first paragraph in a two-para section head.
		/// The associated IP in the Current is at the end of the first section paragraph break.
		///
		/// Revision                 Current
		///  section head p1          section head 1
		///                           empty para
		///  section head p2          section head 2
		///   verse 2                 verse 2
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_SectionHeadSplit_BlankContentParaInserted()
		{
			// Build the "current" sections
			IScrSection section1Curr = CreateSection(m_genesis, "Section Head A");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			IScrSection section2Curr = CreateSection(m_genesis, "Section Head B");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "2", ScrStyleNames.VerseNumber);

			// Build the "revision" section
			IScrSection section1Rev = CreateSection(m_genesisRevision, "Section Head A");
			IStTxtPara section1RevParaHead2 = AddParaToMockedText(section1Rev.HeadingOA, ScrStyleNames.SectionHead);
			AddRunToMockedPara(section1RevParaHead2, "Section Head B", null);
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "2", ScrStyleNames.VerseNumber);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(2, m_bookMerger.Differences.Count);
			m_bookMerger.UseFilteredDiffList = true;
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff1, 01001001, 01001001, DifferenceType.SectionAddedToCurrent,
				section1Curr, (IScrTxtPara)section1Rev.HeadingOA[0], 0);

			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff2, 01001002, 01001002, DifferenceType.ParagraphMissingInCurrent,
				(IScrTxtPara)section2Curr.HeadingOA[0], 0, 0, (IScrTxtPara)section1Rev.HeadingOA[0], 0, "Section Head A".Length);

			// Revert the SectionHeadMissing diff
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			m_bookMerger.ReplaceCurrentWithRevision(diff2);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method when a blank content paragraph is
		/// inserted after the first paragraph in a two-para section head.
		/// The associated IP in the Current is at the end of the first section paragraph break.
		///
		/// Revision                 Current
		///  intro section head       intro section head
		///  intro section p1         intro section p1
		///  section head p1          section head 1
		///                           empty para
		///  section head p2          section head 2
		///   verse 2                 verse 2
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_SectionHeadSplit_BlankContentParaInserted_WithPrecedingIntroSection()
		{
			// Build the "current" sections
			IScrSection sectionIntroCurr = AddSectionToMockedBook(m_genesis, true);
			AddParaToMockedText(sectionIntroCurr.HeadingOA, ScrStyleNames.IntroSectionHead);
			IScrTxtPara paraIntroCurr = AddParaToMockedSectionContent(sectionIntroCurr, ScrStyleNames.IntroParagraph);
			IScrSection section1Curr = CreateSection(m_genesis, "Section Head A");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			IScrSection section2Curr = CreateSection(m_genesis, "Section Head B");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "2", ScrStyleNames.VerseNumber);

			// Build the "revision" section
			IScrSection sectionIntroRev = AddSectionToMockedBook(m_genesisRevision, true);
			AddParaToMockedText(sectionIntroRev.HeadingOA, ScrStyleNames.IntroSectionHead);
			IScrTxtPara paraIntroRev = AddParaToMockedSectionContent(sectionIntroRev, ScrStyleNames.IntroParagraph);
			IScrSection section1Rev = CreateSection(m_genesisRevision, "Section Head A");
			IStTxtPara section1RevParaHead2 = AddParaToMockedText(section1Rev.HeadingOA, ScrStyleNames.SectionHead);
			AddRunToMockedPara(section1RevParaHead2, "Section Head B", null);
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "2", ScrStyleNames.VerseNumber);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(2, m_bookMerger.Differences.Count);
			m_bookMerger.UseFilteredDiffList = true;
			Assert.AreEqual(2, m_bookMerger.Differences.Count);

			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff1, 01001001, 01001001, DifferenceType.SectionAddedToCurrent,
				section1Curr, (IScrTxtPara)section1Rev.HeadingOA[0], 0);

			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff2, 01001002, 01001002, DifferenceType.ParagraphMissingInCurrent,
				(IScrTxtPara)section2Curr.HeadingOA[0], 0, 0, (IScrTxtPara)section1Rev.HeadingOA[0], 0, "Section Head A".Length);

			// Revert the SectionHeadMissing diff
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			m_bookMerger.ReplaceCurrentWithRevision(diff2);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method when a section head is missing in the
		/// Current (Scripture section in Current is a combination of two in the Revision).
		/// The associated IP in the Current is at a paragraph break. This tests a failing
		/// case of the second chapter where the section that was combined starts with a chapter
		/// number (TE-5141)
		///
		/// Revision                 Current
		///  section head 1          section head 1
		///   C1verse 1-5             C1verse 1-5 para
		///  section head 2			  C2verse 1-5 para
		///   C2verse 1-5
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_SectionsCombinedInCurr_AtChapterBreak()
		{
			// Build the "current" section
			IScrSection section1Curr = CreateSection(m_genesis, "My First Section");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Curr, "1-5", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "This is the first paragraph.", Cache.DefaultVernWs);
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "2", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para2Curr, "1-5", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "Yet more.", Cache.DefaultVernWs);

			// Build the "revision" sections
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My First Section");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Rev, "1-5", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "This is the first paragraph.", Cache.DefaultVernWs);

			IScrSection section2Rev = CreateSection(m_genesisRevision, "My Second Section");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "2", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para2Rev, "1-5", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "Yet more.", Cache.DefaultVernWs);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			// There are two acceptable destinationIP values - the end of the first paragraph...
			DiffTestHelper.VerifySectionDiff(diff1, 01002001, 01002001, DifferenceType.SectionHeadMissingInCurrent,
				section2Rev, para1Curr, para1Curr.Contents.Length);
			// or the beginning of the second paragraph.
			//DiffTestHelper.VerifySectionDiff(diff1, 01002001, 01002001, DifferenceType.SectionHeadMissingInCurrent,
			//    section2Rev, para2Curr, 0);
			Assert.IsNull(m_bookMerger.Differences.MoveNext());

			Assert.AreEqual(1, m_genesis.SectionsOS.Count);

			// Revert the SectionHeadMissing diff
			m_bookMerger.ReplaceCurrentWithRevision(diff1);

			// Make sure that there are now two sections in the current
			Assert.AreEqual(2, m_genesis.SectionsOS.Count);
			IScrSection section1 = m_genesis.SectionsOS[0];
			IScrSection section2 = m_genesis.SectionsOS[1];
			Assert.AreEqual(01001001, section1.VerseRefStart);
			Assert.AreEqual(01001005, section1.VerseRefEnd);
			Assert.AreEqual("My First Section", ((IScrTxtPara)section1.HeadingOA[0]).Contents.Text);
			Assert.AreEqual("11-5This is the first paragraph.", ((IScrTxtPara)section1.ContentOA[0]).Contents.Text);
			Assert.AreEqual(01002001, section2.VerseRefStart);
			Assert.AreEqual(01002005, section2.VerseRefEnd);
			Assert.AreEqual("My Second Section", ((IScrTxtPara)section2.HeadingOA[0]).Contents.Text);
			Assert.AreEqual("21-5Yet more.", ((IScrTxtPara)section2.ContentOA[0]).Contents.Text);
			// check that the first section and para in the Current retained their hvos
			Assert.AreEqual(section1Curr, section1);
			Assert.AreEqual(para1Curr, section1.ContentOA[0]);
			// check that the second para in the Current retained its hvo
			Assert.AreEqual(para2Curr, section2.ContentOA[0]);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method when a section head is missing in the
		/// Current (Scripture section in Current is a combination of two in the Revision).
		/// The associated IP in the Current is in the middle of a paragraph.
		///
		/// Revision                 Current
		///  section head 1          section head 1
		///   C1verse 1-5             C1verse 1-5 para C2verse 1-5 para
		///  section head 2
		///   C2verse 1-5
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_SectionsCombinedInCurr_AtChapterBreakMidPara()
		{
			// Build the "current" section
			IScrSection section1Curr = CreateSection(m_genesis, "My First Section");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Curr, "1-5", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "This is the first paragraph.", Cache.DefaultVernWs);
			int ichLoc = para1Curr.Contents.Length;
			AddRunToMockedPara(para1Curr, "2", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Curr, "1-5", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "Yet more.", Cache.DefaultVernWs);

			// Build the "revision" sections
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My First Section");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Rev, "1-5", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "This is the first paragraph.", Cache.DefaultVernWs);

			IScrSection section2Rev = CreateSection(m_genesisRevision, "My Second Section");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "2", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para2Rev, "1-5", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "Yet more.", Cache.DefaultVernWs);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff1, 01002001, 01002001, DifferenceType.SectionHeadMissingInCurrent,
				section2Rev, para1Curr, ichLoc);
			Assert.IsNull(m_bookMerger.Differences.MoveNext());

			Assert.AreEqual(1, m_genesis.SectionsOS.Count);

			// Revert the SectionHeadMissing diff
			m_bookMerger.ReplaceCurrentWithRevision(diff1);

			// Make sure that there are now two sections in the current
			Assert.AreEqual(2, m_genesis.SectionsOS.Count);
			IScrSection section1 = m_genesis.SectionsOS[0];
			IScrSection section2 = m_genesis.SectionsOS[1];
			Assert.AreEqual(01001001, section1.VerseRefStart);
			Assert.AreEqual(01001005, section1.VerseRefEnd);
			Assert.AreEqual("My First Section", ((IScrTxtPara)section1.HeadingOA[0]).Contents.Text);
			Assert.AreEqual("11-5This is the first paragraph.", ((IScrTxtPara)section1.ContentOA[0]).Contents.Text);
			Assert.AreEqual(01002001, section2.VerseRefStart);
			Assert.AreEqual(01002005, section2.VerseRefEnd);
			Assert.AreEqual("My Second Section", ((IScrTxtPara)section2.HeadingOA[0]).Contents.Text);
			Assert.AreEqual("21-5Yet more.", ((IScrTxtPara)section2.ContentOA[0]).Contents.Text);
			// check that the first section and para in the Current retained their hvos
			Assert.AreEqual(section1Curr, section1);
			Assert.AreEqual(para1Curr, section1.ContentOA[0]);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method when a section head is missing in the Current
		/// (Scripture section in Current is a combination of two in the Revision).
		/// The associated IP in the Current is mid-paragraph.
		///
		/// Revision                 Current
		///  section head 1          section head 1
		///   verse 1-5               verses 1-5,6-10 in one para
		///  section head 2
		///   verse 6-10
		///
		/// </summary>
		/// <remarks>This test also serves as a regression test for the bug TE-4172.</remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_SectionsCombinedInCurr_AtMidParagraph()
		{
			// Build the "current" section
			IScrSection section1Curr = CreateSection(m_genesis, "My First Section");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1-5", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "This is the first paragraph.", Cache.DefaultVernWs);
			//IScrTxtPara para2Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			int ichV6Curr = para1Curr.Contents.Length;
			AddRunToMockedPara(para1Curr, "6-10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "Yet more.", Cache.DefaultVernWs);

			//TODO: old text in rev verses 1-5
			// Build the "revision" sections
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My First Section");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1-5", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "This is the first paragraph.", Cache.DefaultVernWs);

			IScrSection section2Rev = CreateSection(m_genesisRevision, "My Second Section");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.Line1);
			AddRunToMockedPara(para2Rev, "6-10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "Old more.", Cache.DefaultVernWs);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(2, m_bookMerger.Differences.Count);
			Difference diff2 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff2, 01001006, 01001006, DifferenceType.SectionHeadMissingInCurrent,
				section2Rev, para1Curr, ichV6Curr);
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff3, 01001006, 01001010, DifferenceType.TextDifference,
				para1Curr, ichV6Curr + 4, ichV6Curr + 7,
				para2Rev, 4, 7);

			Assert.AreEqual(1, m_genesis.SectionsOS.Count);

			// Revert the SectionHeadMissing diff
			m_bookMerger.ReplaceCurrentWithRevision(diff2);

			// Make sure that there are now two sections in the current
			Assert.AreEqual(2, m_genesis.SectionsOS.Count);
			IScrSection section1 = m_genesis.SectionsOS[0];
			IScrSection section2 = m_genesis.SectionsOS[1];
			Assert.AreEqual(01001001, section1.VerseRefStart);
			Assert.AreEqual(01001005, section1.VerseRefEnd);
			Assert.AreEqual("My First Section", ((IScrTxtPara)section1.HeadingOA[0]).Contents.Text);
			Assert.AreEqual("1-5This is the first paragraph.", ((IScrTxtPara)section1.ContentOA[0]).Contents.Text);
			Assert.AreEqual(ScrStyleNames.NormalParagraph, ((IScrTxtPara)section1.ContentOA[0]).StyleName);
			Assert.AreEqual(01001006, section2.VerseRefStart);
			Assert.AreEqual(01001010, section2.VerseRefEnd);
			Assert.AreEqual("My Second Section", ((IScrTxtPara)section2.HeadingOA[0]).Contents.Text);
			Assert.AreEqual("6-10Yet more.", ((IScrTxtPara)section2.ContentOA[0]).Contents.Text);
			Assert.AreEqual(ScrStyleNames.Line1, ((IScrTxtPara)section2.ContentOA[0]).StyleName);
			// check that the first section and para in the Current retained their hvos
			Assert.AreEqual(section1Curr, section1);
			Assert.AreEqual(para1Curr, section1.ContentOA[0]);

			// Revert the verse 6-10 text diff
			m_bookMerger.ReplaceCurrentWithRevision(diff3);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method when sections were combined at mid-verse.
		/// The associated IP in the Current is at a para break.
		///
		/// Revision                 Current
		///  section head 1          section head 1
		///   verse 1-5a               verses 1-5a
		///                            verses 5b-10
		///  section head 2
		///   verse 5b-10
		///
		/// </summary>
		/// <remarks>TE-4762.</remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		[Ignore("TE-6738")]
		public void ReplaceCurWithRev_SectionsCombinedInCurrMidVerse_AtParaBreak()
		{
			// Build the "current" section
			IScrSection section1Curr = CreateSection(m_genesis, "My First Section");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1-4", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "Verses 1 - 4.", Cache.DefaultVernWs);
			AddRunToMockedPara(para1Curr, "5", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "Verse 5a.", Cache.DefaultVernWs);
			int ichCurr = para1Curr.Contents.Length;
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "Verse 5b.", Cache.DefaultVernWs);
			AddRunToMockedPara(para2Curr, "6-10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "Verses 6 - 10.", Cache.DefaultVernWs);

			// Build the "revision" sections
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My First Section");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1-4", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "Verses 1 - 4.", Cache.DefaultVernWs);
			AddRunToMockedPara(para1Rev, "5", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "Verse 5a.", Cache.DefaultVernWs);

			IScrSection section2Rev = CreateSection(m_genesisRevision, "My Second Section");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "Verse 5b.", Cache.DefaultVernWs);
			AddRunToMockedPara(para2Rev, "6-10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "Verses 6 - 10.", Cache.DefaultVernWs);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff, 01001005, 01001005, DifferenceType.SectionHeadMissingInCurrent,
				section2Rev, para1Curr, ichCurr);

			Assert.AreEqual(1, m_genesis.SectionsOS.Count);

			// Revert the SectionHeadMissing diff
			// TODO:  The replace currently inserts verse 5a into a new paragraph,
			// which is between para1Curr and para2Curr.
			m_bookMerger.ReplaceCurrentWithRevision(diff);

			Assert.AreEqual(1, m_genesis.SectionsOS.Count);

			// TODO:  Test if the results are correct
			Assert.AreEqual(2, m_genesis.SectionsOS.Count);

			// the new section heading should match section2Rev
			Assert.AreEqual(((IScrTxtPara)section2Rev.HeadingOA[0]).Contents.Text,
				((IScrTxtPara)m_genesis.SectionsOS[1].HeadingOA[0]).Contents.Text);

			// the second section should have one paragraph
			Assert.AreEqual(1, m_genesis.SectionsOS[1].ContentOA.ParagraphsOS.Count);

			// the text of the new paragraph should match para2Rev
			IScrTxtPara paraNewCurr = (IScrTxtPara)m_genesis.SectionsOS[1].ContentOA[0];

		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method when sections were combined at mid-verse.
		/// The associated IP in the Current is at a para break.
		///
		/// Revision                 Current
		///  section head 1          section head 1
		///   verse 1-5a               verses 1-10
		///
		///  section head 2
		///   verse 5b-10
		///
		/// </summary>
		/// <remarks>TE-4762.</remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		[Ignore("TE-6739")]
		public void ReplaceCurWithRev_SectionsCombinedInCurrMidVerse_AtMidPara()
		{
			// Build the "current" section
			IScrSection section1Curr = CreateSection(m_genesis, "My First Section");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1-4", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "Verses 1 - 4.", Cache.DefaultVernWs);
			AddRunToMockedPara(para1Curr, "5", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "Verse 5a.", Cache.DefaultVernWs);
			AddRunToMockedPara(para1Curr, "Verse 5b.", Cache.DefaultVernWs);
			AddRunToMockedPara(para1Curr, "6-10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "Verses 6 - 10.", Cache.DefaultVernWs);

			// Build the "revision" sections
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My First Section");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1-4", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "Verses 1 - 4.", Cache.DefaultVernWs);
			AddRunToMockedPara(para1Rev, "5", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "Verse 5a.", Cache.DefaultVernWs);
			int ichCurr = para1Rev.Contents.Length;

			IScrSection section2Rev = CreateSection(m_genesisRevision, "My Second Section");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "Verse 5b.", Cache.DefaultVernWs);
			AddRunToMockedPara(para2Rev, "6-10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "Verses 6 - 10.", Cache.DefaultVernWs);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff, 01001005, 01001005, DifferenceType.SectionHeadMissingInCurrent,
				section2Rev, para1Curr, ichCurr);

			Assert.AreEqual(1, m_genesis.SectionsOS.Count);

			// Revert the SectionHeadMissing diff
			m_bookMerger.ReplaceCurrentWithRevision(diff);

			// should now have two sections
			Assert.AreEqual(2, m_genesis.SectionsOS.Count);

			// the new section heading should match section2Rev
			Assert.AreEqual(((IScrTxtPara)section2Rev.HeadingOA[0]).Contents.Text,
				((IScrTxtPara)m_genesis.SectionsOS[1].HeadingOA[0]).Contents.Text);

			// the second section should have one paragraph
			Assert.AreEqual(1, m_genesis.SectionsOS[1].ContentOA.ParagraphsOS.Count);

			// the text of the new paragraph should match para2Rev
			IScrTxtPara para2Curr = (IScrTxtPara)m_genesis.SectionsOS[1].ContentOA[0];



		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method when a section head is added in the Current
		/// (Scripture sections in Current are split portions of one section in the Revision).
		/// The associated IP in the Revision is at a paragraph break.
		///
		/// Revision                 Current
		///  section head 1          section head 1
		///   verse 1-5 para		  verse 1-5
		///	  verse 6-10 para		 section head 2
		///							   verse 6-10
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_SectionSplitInCurr_AtParaBreak()
		{
			// Build the "current" sections
			IScrSection section1Curr = CreateSection(m_genesis, "My First Section");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1-5", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "This is the first paragraph.", Cache.DefaultVernWs);

			IScrSection section2Curr = CreateSection(m_genesis, "My Second Section");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "6-10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "Yet more.", Cache.DefaultVernWs);

			// Build the "revision" section
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My First Section");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1-5", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "That is the first paragraph.", Cache.DefaultVernWs);
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "6-10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "Old more.", Cache.DefaultVernWs);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(3, m_bookMerger.Differences.Count);
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			Difference diff3 = m_bookMerger.Differences.MoveNext();

			// Verify differences
			DiffTestHelper.VerifyParaDiff(diff1, 01001001, 01001005, DifferenceType.TextDifference,
				para1Curr, 5, 7,
				para1Rev, 5, 7);
			DiffTestHelper.VerifySectionDiff(diff2, 01001006, 01001006, DifferenceType.SectionHeadAddedToCurrent,
				section2Curr, para2Rev, 0);
			DiffTestHelper.VerifyParaDiff(diff3, 01001006, 01001010, DifferenceType.TextDifference,
				para2Curr, 4, 7,
				para2Rev, 4, 7);

			Assert.AreEqual(2, m_genesis.SectionsOS.Count);

			// Revert the SectionHeadAdded diff
			m_bookMerger.ReplaceCurrentWithRevision(diff2);

			// Make sure that there is now one section in the current
			Assert.AreEqual(1, m_genesis.SectionsOS.Count);
			IScrSection section1 = m_genesis.SectionsOS[0];
			Assert.AreEqual(01001001, section1.VerseRefStart);
			Assert.AreEqual(01001010, section1.VerseRefEnd);
			Assert.AreEqual("My First Section", ((IScrTxtPara)section1.HeadingOA[0]).Contents.Text);
			// with two paragraphs
			Assert.AreEqual(2, section1.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("1-5This is the first paragraph.", ((IScrTxtPara)section1.ContentOA[0]).Contents.Text);
			Assert.AreEqual("6-10Yet more.", ((IScrTxtPara)section1.ContentOA[1]).Contents.Text);
			// check that the first section and para in the Current retained their hvos
			Assert.AreEqual(section1Curr, section1);
			Assert.AreEqual(para1Curr, section1.ContentOA[0]);

			// Revert the text diffs
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			m_bookMerger.ReplaceCurrentWithRevision(diff3);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method when a section head is added in the Current
		/// (Scripture sections in Current are split portions of one section in the Revision).
		/// The associated IP in the Revision is mid-paragraph.
		///
		/// Revision                 Current
		///  section head 1          section head 1
		///   verse 1,5,6,10           verse 1-5
		///							 section head 2
		///							   verse 6-10
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_SectionSplitInCurr_AtMidPara()
		{
			// Build the "current" sections
			IScrSection section1Curr = CreateSection(m_genesis, "My First Section");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1-5", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "This is the first paragraph.", Cache.DefaultVernWs);

			IScrSection section2Curr = CreateSection(m_genesis, "My Second Section");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "6-10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "Yet more.", Cache.DefaultVernWs);

			// Build the "revision" section
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My First Section");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1-5", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "That is the first paragraph.", Cache.DefaultVernWs);
			int ichV6Rev = para1Rev.Contents.Length;
			AddRunToMockedPara(para1Rev, "6-10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "Old more.", Cache.DefaultVernWs);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(3, m_bookMerger.Differences.Count);
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifyParaDiff(diff1, 01001001, 01001005, DifferenceType.TextDifference,
				para1Curr, 5, 7,
				para1Rev, 5, 7);
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifySectionDiff(diff2, 01001006, 01001006, DifferenceType.SectionHeadAddedToCurrent,
				section2Curr, para1Rev, ichV6Rev);
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff3, 01001006, 01001010, DifferenceType.TextDifference,
				para2Curr, 4, 7,
				para1Rev, ichV6Rev + 4, ichV6Rev + 7);

			Assert.AreEqual(2, m_genesis.SectionsOS.Count);

			// Revert the SectionHeadAdded diff
			m_bookMerger.ReplaceCurrentWithRevision(diff2);

			// Make sure that there is now one section in the current
			Assert.AreEqual(1, m_genesis.SectionsOS.Count);
			IScrSection section1 = (IScrSection)m_genesis.SectionsOS[0];
			Assert.AreEqual(01001001, section1.VerseRefStart);
			Assert.AreEqual(01001010, section1.VerseRefEnd);
			Assert.AreEqual("My First Section", ((IScrTxtPara)section1.HeadingOA[0]).Contents.Text);
			// with one paragraph
			Assert.AreEqual(1, section1.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("1-5This is the first paragraph.6-10Yet more.", ((IScrTxtPara)section1.ContentOA[0]).Contents.Text);
			// check that the first section and para in the Current retained their hvos
			Assert.AreEqual(section1Curr, section1);
			Assert.AreEqual(para1Curr, section1.ContentOA[0]);

			// Revert the text diffs
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			m_bookMerger.ReplaceCurrentWithRevision(diff1);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when a section
		/// head is added in the Current (Scripture sections in Current are split portions of
		/// one section in the Revision).
		/// The associated IP in the Revision is mid-paragraph.
		///
		/// Revision                 Current
		///  section head 1          section head 1
		///   verse 1 verse 2		  verse 1 verse 2
		///							 section head 2
		///							   verse 2 continued
		/// </summary>
		/// <remarks>This is a regression test for TE-7070.</remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_SectionSplitInCurr_AtMidVerse()
		{
			// Build the "current" sections
			IScrSection section1Curr = CreateSection(m_genesis, "My First Section");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 0, 1, "First verse. ");
			AddVerse(para1Curr, 0, 2, "This is second verse in the first paragraph which has more text");
			int iTxtChgStart = para1Curr.Contents.Length;

			IScrSection section2Curr = CreateSection(m_genesis, "My Second Section");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 0, " in it. ");

			// Build the "revision" section
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My First Section");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 0, 1, "First verse. ");
			AddVerse(para1Rev, 0, 2, "This is second verse in the first paragraph which has more text in it.");

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(2, m_bookMerger.Differences.Count);
			Difference diff0 = m_bookMerger.Differences.MoveFirst();
			Difference diff1 = m_bookMerger.Differences.MoveNext();

			// Verify differences
			DiffTestHelper.VerifyParaDiff(diff0, 01001002, DifferenceType.TextDifference,
				para1Curr, iTxtChgStart, iTxtChgStart,
				para1Rev, iTxtChgStart, para1Rev.Contents.Length);
			DiffTestHelper.VerifySectionDiff(diff1, 01001002, 01001002, DifferenceType.SectionAddedToCurrent,
				section2Curr, para1Rev, para1Rev.Contents.Length);

			Assert.AreEqual(2, m_genesis.SectionsOS.Count);

			// Revert the text difference.
			m_bookMerger.ReplaceCurrentWithRevision(diff0);
			Assert.AreEqual("1First verse. 2This is second verse in the first paragraph which has more text in it.",
				((IScrTxtPara)section1Curr.ContentOA[0]).Contents.Text);

			// Revert the SectionAdded diff
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(1, m_genesis.SectionsOS.Count);
			Assert.AreEqual("My First Section", ((IScrTxtPara)section1Curr.HeadingOA[0]).Contents.Text);
			// with one paragraph
			Assert.AreEqual(1, section1Curr.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("1First verse. 2This is second verse in the first paragraph which has more text in it.",
				((IScrTxtPara)section1Curr.ContentOA[0]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// -------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when a section
		/// head is missing in the Current. Scripture sections in Revision are split portions of
		/// the one and only verse in the Current.
		///
		/// Revision                 Current
		///  section head A          section head A
		///   verse 1				  verse 1
		///	section head B
		///	  more of verse 1
		///
		/// </summary>
		/// <remarks>This tests TE-7132.</remarks>
		/// -------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_SectionMergedInCur_MidOnlyVerse()
		{
			// Make a section in Current: Chapter 1 verse 1
			IScrSection sectionCurr = CreateSection(m_genesis, "Head A");
			IScrTxtPara paraCurr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(paraCurr, 1, 1, "This is verse one.");

			// make a matching section in Revision
			IScrSection section1Rev = CreateSection(m_genesisRevision, "Head A");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 1, 1, "This is verse one.");

			// create a section in Revision that has no corresponding section in current. It will
			// be detected as Section Head Deleted
			IScrSection section2Rev = CreateSection(m_genesisRevision, "Head B");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "More of verse one.");

			// Detect differences
			m_bookMerger.DetectDifferences(null);

			// Check the diff and section counts before doing the restore
			Assert.AreEqual(2, m_bookMerger.Differences.Count);
			Assert.AreEqual(1, m_genesis.SectionsOS.Count);
			Assert.AreEqual(2, m_genesisRevision.SectionsOS.Count);
			Difference diff0 = m_bookMerger.Differences.MoveFirst();
			Difference diff1 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifySectionDiff(diff0, 01001001, 01001001, DifferenceType.SectionHeadMissingInCurrent,
				section2Rev, paraCurr, paraCurr.Contents.Length);
			DiffTestHelper.VerifyParaAddedDiff(diff1, 01001001, 01001001, DifferenceType.ParagraphMissingInCurrent,
				para2Rev, paraCurr, paraCurr.Contents.Length);

			// Restore deleted section head
			m_bookMerger.ReplaceCurrentWithRevision(diff0);
			// We expect a new second section in the current with a section head and empty content para.
			Assert.AreEqual(2, m_genesis.SectionsOS.Count);
			IScrSection section2Cur = (IScrSection)m_genesis.SectionsOS[1];
			Assert.AreEqual(01001001, section2Cur.VerseRefStart);
			Assert.AreEqual(01001001, section2Cur.VerseRefEnd);
			Assert.AreEqual("Head B", ((IScrTxtPara)section2Cur.HeadingOA[0]).Contents.Text);
			Assert.AreEqual(1, section2Cur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual(0, ((IScrTxtPara)section2Cur.ContentOA[0]).Contents.Length);

			// Restore deleted paragraph
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			// Verify restored paragraph contents.
			Assert.AreEqual(1, section2Cur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("More of verse one.",
				((IScrTxtPara)section2Cur.ContentOA[0]).Contents.Text);
		}

		/// -------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when a section
		/// head is missing in the Current. Scripture sections in Revision are split portions of
		/// one section in the Current, split in the middle of the 'middle' verse (verse 2).
		///
		/// Revision                 Current
		///  section head 1          section head 1
		///   verse 1 verse 2 		  verse 1 verse 2 verse 3
		///	section head 2
		///	  verse 2 cont verse 3
		/// </summary>
		/// -------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_SectionMergedInCur_MidVerse()
		{
			// Make a section in Current: Chapter 1, verses 1-3
			IScrSection sectionCurr = CreateSection(m_genesis, "Head A");
			IScrTxtPara paraCurr = AddParaToMockedSectionContent(sectionCurr, ScrStyleNames.NormalParagraph);
			AddVerse(paraCurr, 1, 1, "verse one. ");
			AddVerse(paraCurr, 0, 2, "verse two. ");
			int iCurrDest = paraCurr.Contents.Length;
			AddVerse(paraCurr, 0, 3, "verse three.");

			// Make two sections in the Revision
			IScrSection section1Rev = CreateSection(m_genesisRevision, "Head A");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 1, 1, "verse one. ");
			AddVerse(para1Rev, 0, 2, "verse two. ");

			// create a section in the Revision that splits the Current section mid-para, and
			// in the middle of verse 2.
			IScrSection section2Rev = CreateSection(m_genesisRevision, "Head B");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "verse two cont. ");
			int iRevLim = para2Rev.Contents.Length;
			AddVerse(para2Rev, 0, 3, "verse three.");

			// Detect differences
			m_bookMerger.DetectDifferences(null);

			// Check the diff and section counts before doing the restore
			Assert.AreEqual(2, m_bookMerger.Differences.Count);
			Assert.AreEqual(1, m_genesis.SectionsOS.Count);
			Assert.AreEqual(2, m_genesisRevision.SectionsOS.Count);
			Difference diff0 = m_bookMerger.Differences.MoveFirst();
			Difference diff1 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifySectionDiff(diff0, 01001002, 01001002, DifferenceType.SectionHeadMissingInCurrent,
				section2Rev, paraCurr, iCurrDest);
			DiffTestHelper.VerifyParaDiff(diff1, 01001002, DifferenceType.VerseMissingInCurrent,
				paraCurr, iCurrDest, iCurrDest, para2Rev, 0, iRevLim);

			// Restore deleted section head
			m_bookMerger.ReplaceCurrentWithRevision(diff0);
			// We expect a new second section in the current with a section head and containing
			// verse three.
			Assert.AreEqual(2, m_genesis.SectionsOS.Count);
			IScrSection section2Cur = (IScrSection)m_genesis.SectionsOS[1];
			Assert.AreEqual(01001003, section2Cur.VerseRefStart);
			Assert.AreEqual(01001003, section2Cur.VerseRefEnd);
			Assert.AreEqual("Head B", ((IScrTxtPara)section2Cur.HeadingOA[0]).Contents.Text);
			Assert.AreEqual(1, section2Cur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("3verse three.", ((IScrTxtPara)section2Cur.ContentOA[0]).Contents.Text);

			// Restore portion of verse two continued in second section.
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			// Verify restored paragraph contents.
			Assert.AreEqual(1, section2Cur.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual(01001002, section2Cur.VerseRefStart);
			Assert.AreEqual(01001003, section2Cur.VerseRefEnd);
			Assert.AreEqual("verse two cont. 3verse three.",
				((IScrTxtPara)section2Cur.ContentOA[0]).Contents.Text);
		}

		//TODO TE-4762:
		// The section split is mid-verse. The associated IP in the Revision at a para break.
		//public void ReplaceCurWithRev_SectionSplitInCurrMidVerse_AtParaBreak()
		// The section split is mid-verse. The associated IP in the Revision is mid-paragraph.
		//public void ReplaceCurWithRev_SectionSplitInCurrMidVerse_AtMidPara()

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method when a section head is missing in the
		/// Current (Scripture section in Current is a combination of two in the Revision).
		/// This scenario adds footnotes.
		///
		/// Revision                 Current
		///  section head 1           section head 1
		///   verse 1-5 (ft ABC)	   verse 1-5,6-10 (ft ABC, ft DEF)
		///  section head 2			   verse 11(ft GHI)
		///   verse 6-10(ft DEF)
		///	  verse 11(ft GHI)
		///  section head 3			  section head 3
		///	  verse 12(ft JKL)		   verse 12(ft JKL)
		///
		/// </summary>
		/// <remarks>This test serves as a regression test for the bug TE-4181.</remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_SectionsCombinedInCurr_WithFootnotes()
		{
			// Build two "current" sections
			IScrSection section1Curr = CreateSection(m_genesis, "My First Section");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1-5", ScrStyleNames.VerseNumber);
			AddFootnote(m_genesis, para1Curr, para1Curr.Contents.Length, "ABC");
			AddRunToMockedPara(para1Curr, "This is the first paragraph.", Cache.DefaultVernWs);
			int ichV6Curr = para1Curr.Contents.Length;
			AddRunToMockedPara(para1Curr, "6-10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "Yet more.", Cache.DefaultVernWs);
			AddFootnote(m_genesis, para1Curr, para1Curr.Contents.Length, "DEF");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			//TODO TE-4762: If this footnote is put BEFORE the verse number, all works okay until calling
			// DetectDifferences_ReCheck(), at which point the VerseIterator returns goofy ScrVerses.
			// Figure out if it's a real TE problem or a test problem.
			//AddFootnote(m_genesis, para2Curr, 0, "GHI");
			AddRunToMockedPara(para2Curr, "11", ScrStyleNames.VerseNumber);
			AddFootnote(m_genesis, para2Curr, 2, "GHI");
			AddRunToMockedPara(para2Curr, "Verse 11.", Cache.DefaultVernWs);

			IScrSection section3Curr = CreateSection(m_genesis, "My Third Section");
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(section3Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Curr, "12", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3Curr, "Verse 12.", Cache.DefaultVernWs);
			AddFootnote(m_genesis, para3Curr, para3Curr.Contents.Length, "JKL");

			Assert.AreEqual(4, m_genesis.FootnotesOS.Count);

			// Build three "revision" sections
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My First Section");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1-5", ScrStyleNames.VerseNumber);
			int footnoteABCPos = para1Rev.Contents.Length;
			AddFootnote(m_genesisRevision, para1Rev, footnoteABCPos, "ABC");
			AddRunToMockedPara(para1Rev, "This is the first paragraph.", Cache.DefaultVernWs);

			IScrSection section2Rev = CreateSection(m_genesisRevision, "My Second Section");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "6-10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "Yet more.", Cache.DefaultVernWs);
			int footnoteDEFPos = para2Rev.Contents.Length;
			AddFootnote(m_genesisRevision, para2Rev, footnoteDEFPos, "DEF");
			IScrTxtPara para2BRev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			//int footnoteGHIPos = 0;
			//AddFootnote(m_genesisRevision, para2BRev, footnoteGHIPos, "GHI");
			AddRunToMockedPara(para2BRev, "11", ScrStyleNames.VerseNumber);
			int footnoteGHIPos = 2;
			AddFootnote(m_genesisRevision, para2BRev, footnoteGHIPos, "GHI");
			AddRunToMockedPara(para2BRev, "Verse 11.", Cache.DefaultVernWs);

			IScrSection section3Rev = CreateSection(m_genesisRevision, "My Third Section");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(section3Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Rev, "12", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para3Rev, "Verse 12.", Cache.DefaultVernWs);
			int footnoteJKLPos = para3Rev.Contents.Length;
			AddFootnote(m_genesisRevision, para3Rev, footnoteJKLPos, "JKL");
			Assert.AreEqual(4, m_genesisRevision.FootnotesOS.Count);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff, 01001006, 01001006, DifferenceType.SectionHeadMissingInCurrent,
				section2Rev, para1Curr, ichV6Curr);

			// Revert the section head diff
			m_bookMerger.ReplaceCurrentWithRevision(diff);

			// Make sure that there are now three sections in the current
			Assert.AreEqual(3, m_genesis.SectionsOS.Count);

			// and 4 footnotes
			Assert.AreEqual(4, m_genesis.FootnotesOS.Count);

			// The first footnote should be the ABC footnote in the first paragraph of the first section
			IScrFootnote footnoteNew = m_genesis.FootnotesOS[0];
			IScrTxtPara para = (IScrTxtPara)m_genesis.SectionsOS[0].ContentOA[0];
			VerifyFootnote(footnoteNew, para, footnoteABCPos);
			Assert.AreEqual("ABC", ((IScrTxtPara)footnoteNew[0]).Contents.Text);

			// The second footnote should be the DEF footnote in the first paragraph of the second section
			footnoteNew = m_genesis.FootnotesOS[1];
			para = (IScrTxtPara)m_genesis.SectionsOS[1].ContentOA[0];
			VerifyFootnote(footnoteNew, para, footnoteDEFPos);
			Assert.AreEqual("DEF", ((IScrTxtPara)footnoteNew[0]).Contents.Text);

			// The third footnote should be the GHI footnote in the second paragraph of the second section
			footnoteNew = m_genesis.FootnotesOS[2];
			para = (IScrTxtPara)m_genesis.SectionsOS[1].ContentOA[1];
			VerifyFootnote(footnoteNew, para, footnoteGHIPos);
			Assert.AreEqual("GHI", ((IScrTxtPara)footnoteNew[0]).Contents.Text);

			// The fourth footnote should be the JKL footnote in the first paragraph of the third section
			footnoteNew = m_genesis.FootnotesOS[3];
			para = (IScrTxtPara)m_genesis.SectionsOS[2].ContentOA[0];
			VerifyFootnote(footnoteNew, para, footnoteJKLPos);
			Assert.AreEqual("JKL", ((IScrTxtPara)footnoteNew[0]).Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method when a section head is missing in the
		/// Current (Scripture section in Current is a combination of two in the Revision).
		/// This scenario adds back translation.
		///
		/// Revision                 Current
		///  section head 1           section head 1
		///   verse 1-5 (ft ABC)	   verse 1,5,6,10 (ft ABC, ft DEF)
		///  section head 2
		///   verse 6-10(ft DEF)
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		[Ignore("WANTTESTPORT: (TE-8699) Need to figure out how to handle footnotes in the segmented BT")]
		public void ReplaceCurWithRev_SectionsCombinedInCurr_WithBT()
		{
			// Build one "current" section
			IScrSection section1Curr = CreateSection(m_genesis, "My First Section");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1-5", ScrStyleNames.VerseNumber);
			IScrFootnote footnote1Curr = AddFootnote(m_genesis, para1Curr,
				para1Curr.Contents.Length, "ABC");
			AddRunToMockedPara(para1Curr, "This is the first paragraph.", Cache.DefaultVernWs);
			int ichV6Curr = para1Curr.Contents.Length;
			AddRunToMockedPara(para1Curr, "6-10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "Yet more.", Cache.DefaultVernWs);
			IScrFootnote footnote2Curr = AddFootnote(m_genesis, para1Curr,
				para1Curr.Contents.Length, "DEF");

			// Add back translation to the current paragraph, and its status
			int btWs = Cache.DefaultAnalWs;
			ICmTranslation transPara1Curr = AddBtToMockedParagraph(para1Curr, btWs);
			AddRunToMockedTrans(transPara1Curr, btWs, "BT of verses 1-10", null);

			// Add back translation of footnotes
			ICmTranslation transFootnote1 = AddBtFootnote(transPara1Curr,
				2, btWs, footnote1Curr, "BT of footnote ABC");
			transFootnote1.Status.set_String(btWs, BackTranslationStatus.Checked.ToString());
			ICmTranslation transFootnote2 = AddBtFootnote(transPara1Curr,
				18, btWs, footnote2Curr, "BT of footnote DEF");
			transPara1Curr.Status.set_String(btWs, BackTranslationStatus.Finished.ToString());
			transFootnote2.Status.set_String(btWs, BackTranslationStatus.Checked.ToString());

			Assert.AreEqual(2, m_genesis.FootnotesOS.Count);

			// Build two "revision" sections
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My First Section");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1-5", ScrStyleNames.VerseNumber);
			int footnoteABCPos = para1Rev.Contents.Length;
			AddFootnote(m_genesisRevision, para1Rev, footnoteABCPos, "ABC");
			AddRunToMockedPara(para1Rev, "This is the first paragraph.", Cache.DefaultVernWs);

			IScrSection section2Rev = CreateSection(m_genesisRevision, "My Second Section");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "6-10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "Yet more.", Cache.DefaultVernWs);
			int footnoteDEFPos = para2Rev.Contents.Length;
			// The section2 heading includes a footnote
			IScrTxtPara paraHeadRev = (IScrTxtPara)section2Rev.HeadingOA[0];
			IScrFootnote footnoteHeadRev = AddFootnote(m_genesisRevision,
				paraHeadRev, paraHeadRev.Contents.Length, "Heading footnote text");
			// and para2Rev in the section content includes a footnote
			AddFootnote(m_genesisRevision, para2Rev, footnoteDEFPos, "DEF");

			// Add back translation to the section2 heading
			ICmTranslation transParaHeadRev = AddBtToMockedParagraph(
				paraHeadRev, btWs);
			AddRunToMockedTrans(transParaHeadRev, btWs, "BT of Section Heading", null);

			// Add back translation of heading footnote
			ICmTranslation transFootnoteHeadRev = AddBtFootnote(
				transParaHeadRev, 2, btWs, footnoteHeadRev, "BT of heading footnote");
			transParaHeadRev.Status.set_String(btWs, BackTranslationStatus.Finished.ToString());
			transFootnoteHeadRev.Status.set_String(btWs, BackTranslationStatus.Checked.ToString());

			Assert.AreEqual(3, m_genesisRevision.FootnotesOS.Count);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff, 01001006, 01001006, DifferenceType.SectionHeadMissingInCurrent,
				section2Rev, para1Curr, ichV6Curr);

			// Revert the section head diff
			m_bookMerger.ReplaceCurrentWithRevision(diff);

			// Make sure that there are now two sections in the current
			Assert.AreEqual(2, m_genesis.SectionsOS.Count);
			// and 3 footnotes
			Assert.AreEqual(3, m_genesis.FootnotesOS.Count);

			// The first footnote should be the ABC footnote in the first paragraph of the first section
			IScrFootnote footnote1New = m_genesis.FootnotesOS[0];
			IScrTxtPara para1 = (IScrTxtPara)((IScrSection)m_genesis.SectionsOS[0]).ContentOA[0];
			VerifyFootnote(footnote1New, para1, footnoteABCPos);
			Assert.AreEqual("ABC", ((IScrTxtPara)footnote1New[0]).Contents.Text);

			// The second footnote should be the heading footnote in the the second section
			IScrFootnote footnoteHeadNew = m_genesis.FootnotesOS[1];
			IScrTxtPara paraHead = (IScrTxtPara)((IScrSection)m_genesis.SectionsOS[1]).HeadingOA[0];
			VerifyFootnote(footnoteHeadNew, paraHead, paraHead.Contents.Length);
			Assert.AreEqual("Heading footnote text", ((IScrTxtPara)footnoteHeadNew[0]).Contents.Text);

			// The third footnote should be the DEF footnote in the first paragraph of the second section
			IScrFootnote footnote2New = m_genesis.FootnotesOS[2];
			IScrTxtPara para2 = (IScrTxtPara)((IScrSection)m_genesis.SectionsOS[1]).ContentOA[0];
			VerifyFootnote(footnote2New, para2, footnoteDEFPos);
			Assert.AreEqual("DEF", ((IScrTxtPara)footnote2New[0]).Contents.Text);

			// for now The BT of the divided para in first section should be unchanged (i.e. not split)
			ICmTranslation transPara1 = para1.GetBT();
			ITsString tssTransPara1 = transPara1.Translation.get_String(btWs);
			Assert.AreEqual("BT" + StringUtils.kChObject + " of verses 1-10" + StringUtils.kChObject, tssTransPara1.Text);
			LcmTestHelper.VerifyBtFootnote(footnote1New, para1, btWs, 2);
			LcmTestHelper.VerifyBtFootnote(footnote2New, para1, btWs, 18); // if we're able to split the BT someday, this footnote will move with the split
			// but BT must have Unfinished status
			Assert.AreEqual(BackTranslationStatus.Unfinished.ToString(),
				transPara1.Status.get_String(btWs).Text);

			// The BT of the section2 heading should be copied from the Revision
			ICmTranslation transParaHead = paraHead.GetBT();
			ITsString tssTransParaHead = transParaHead.Translation.get_String(btWs);
			Assert.AreEqual("BT" + StringUtils.kChObject + " of Section Heading", tssTransParaHead.Text);
			LcmTestHelper.VerifyBtFootnote(footnoteHeadNew, paraHead, btWs, 2);
			// BT status must be copied from the Revision
			Assert.AreEqual(BackTranslationStatus.Finished.ToString(),
				transParaHead.Status.get_String(btWs).Text);

			// for now The BT of the text split off from section1 -the first para in the new section-
			//  should be empty
			Assert.IsNull(para2.GetBT().Status.get_String(btWs).Text);

			// The first footnote back translation should be unchanged
			ICmTranslation transFootnote1New = ((IScrTxtPara)footnote1New[0]).GetBT();
			Assert.AreEqual("BT of footnote ABC",
				transFootnote1New.Translation.get_String(btWs).Text);
			// BT alternate must have the original status
			Assert.AreEqual(BackTranslationStatus.Checked.ToString(),
				transFootnote1New.Status.get_String(btWs).Text);

			// The second footnote back translation should be copied from the Revision
			ICmTranslation transFootnoteHeadNew = ((IScrTxtPara)footnoteHeadNew[0]).GetBT();
			Assert.AreEqual("BT of heading footnote",
				transFootnoteHeadNew.Translation.get_String(btWs).Text);
			// BT alternate status should be copied from the Revision
			Assert.AreEqual(BackTranslationStatus.Checked.ToString(),
				transFootnoteHeadNew.Status.get_String(btWs).Text);

			// The third footnote back translation should be unchanged
			ICmTranslation transFootnote2New = ((IScrTxtPara)footnote2New[0]).GetBT();
			Assert.AreEqual("BT of footnote DEF",
				transFootnote2New.Translation.get_String(btWs).Text);
			// BT alternate must have the original status
			Assert.AreEqual(BackTranslationStatus.Checked.ToString(),
				transFootnote2New.Status.get_String(btWs).Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		//TODO TE-4762:
		//public void ReplaceCurWithRev_SectionSplitInCurr_WithFootnotes()

		// TE-4762: The following test would be best to include footnotes too, as we hope to have in
		// ReplaceCurWithRev_SectionSplitInCurr_WithFootnotes()

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method when a section head is added in the Current
		/// (Scripture sections in Current are split portions of one section in the Revision).
		/// The associated IP in the Revision is mid-paragraph.
		///
		/// Revision                 Current
		///  section head 1          section head 1
		///   verse 1,5,6,10           verse 1-5
		///							 section head 2
		///							   verse 6-10
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_SectionSplitInCurr_WithBT()
		{
			// Build the "current" section 1
			IScrSection section1Curr = CreateSection(m_genesis, "My First Section");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1-5", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "This is the first paragraph.", Cache.DefaultVernWs);
			// Add back translation to the paragraph, and its status
			int btWs = Cache.DefaultAnalWs;
			ICmTranslation transPara1Curr = AddBtToMockedParagraph(para1Curr, btWs);
			AddRunToMockedTrans(transPara1Curr, btWs, "BT of verses 1-5.", null);
			transPara1Curr.Status.set_String(btWs, BackTranslationStatus.Finished.ToString());

			// Build the "current" section 2
			IScrSection section2Curr = CreateSection(m_genesis, "My Second Section");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "6-10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "Yet more.", Cache.DefaultVernWs);
			// Add back translation to the paragraph, and its status
			ICmTranslation transPara2Curr = AddBtToMockedParagraph(para2Curr, btWs);
			AddRunToMockedTrans(transPara2Curr, btWs, "BT of verses 6-10.", null);
			transPara2Curr.Status.set_String(btWs, BackTranslationStatus.Checked.ToString());

			// Build the "revision" section
			IScrSection section1Rev = CreateSection(m_genesisRevision, "My First Section");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1-5", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "This is the first paragraph.", Cache.DefaultVernWs);
			//IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			int ichV6Rev = para1Rev.Contents.Length;
			AddRunToMockedPara(para1Rev, "6-10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "Yet more.", Cache.DefaultVernWs);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff2 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff2, 01001006, 01001006, DifferenceType.SectionHeadAddedToCurrent,
				section2Curr, para1Rev, ichV6Rev);

			Assert.AreEqual(2, m_genesis.SectionsOS.Count);

			// Revert the SectionHeadAdded diff
			m_bookMerger.ReplaceCurrentWithRevision(diff2);

			// Make sure that there is now one combined section in the current
			Assert.AreEqual(1, m_genesis.SectionsOS.Count);
			IScrSection section1 = (IScrSection)m_genesis.SectionsOS[0];
			Assert.AreEqual(01001001, section1.VerseRefStart);
			Assert.AreEqual(01001010, section1.VerseRefEnd);
			Assert.AreEqual("My First Section", ((IScrTxtPara)section1.HeadingOA[0]).Contents.Text);
			// with one paragraph
			Assert.AreEqual(1, section1.ContentOA.ParagraphsOS.Count);
			IScrTxtPara para1 = (IScrTxtPara)section1.ContentOA[0];
			Assert.AreEqual("1-5This is the first paragraph.6-10Yet more.", para1.Contents.Text);
			// check that the first section and para in the Current retained their hvos
			Assert.AreEqual(section1Curr, section1);
			Assert.AreEqual(para1Curr, section1.ContentOA[0]);

			// The BT of the combined para in first section should be ... combined! duh.
			ICmTranslation transPara1 = para1.GetBT();
			ITsString tssTransPara1 = transPara1.Translation.get_String(btWs);
			Assert.AreEqual("BT of verses 1-5.BT of verses 6-10.", tssTransPara1.Text);
			// but BT must have Unfinished status
			Assert.AreEqual(BackTranslationStatus.Unfinished.ToString(),
				transPara1.Status.get_String(btWs).Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method when a section head is missing in the
		/// Current (Scripture section in Current is a combination of two in the Revision).
		/// In this scenario, the sections are combined at a missing verse. I.e. the Revision
		/// has a section break within verse 2, but verse 2 is missing in the combined section
		/// in the Current. Yuck.
		///
		/// Revision                 Current
		///  section head 1           section head 1
		///   verse 1-2a (ft 1)		   verse 1,3 (footnote 1, footnote3)
		///  section head 2			  section head 3
		///   verse 2b-3 (ft 2,3)	   verse 4 (last footnote)
		///  section head 3
		///	  verse 4 (ft last)
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		[Ignore("TE-4762 need to complete this test")]
		public void ReplaceCurWithRev_SectionsCombinedInCurrAtMissingVerse_Footnotes()
		{
			// Make a section in Current: verses 1,3
			IScrSection section1Curr = CreateSection(m_genesis, "First Section Head");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "Verse 1. ", Cache.DefaultVernWs);
			AddFootnote(m_genesis, para1Curr, 8, "Here is the footnote 1.");
			AddRunToMockedPara(para1Curr, "3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "This is verse three.", Cache.DefaultVernWs);
			AddFootnote(m_genesis, para1Curr, 15, "Here is the footnote 3.");

			// Make a second section in Current: verse 4
			IScrSection section2Curr = CreateSection(m_genesis, "Third Section Head");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "4", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "Verse 4.", Cache.DefaultVernWs);
			AddFootnote(m_genesis, para2Curr, 9, "Here is the last footnote.");

			// Make a section in Revision: verses 1-2a
			IScrSection section1Rev = CreateSection(m_genesisRevision, "First Section Head");
			IScrTxtPara paraRev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraRev, "1", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(paraRev, "Verse 1. ", Cache.DefaultVernWs);
			AddFootnote(m_genesisRevision, paraRev, 8, "Here is the footnote 1.");
			AddRunToMockedPara(paraRev, "2", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(paraRev, "Here is the long lost missing verse.", Cache.DefaultVernWs);

			// Make a second section in Revision: rest of verse 2, plus verse 3
			IScrSection section2Rev = CreateSection(m_genesisRevision, "Second Section Head");
			paraRev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraRev, "Text to complete verse 2. ", Cache.DefaultVernWs);
			AddFootnote(m_genesisRevision, paraRev, 4, "Here is the footnote 2.");
			AddRunToMockedPara(paraRev, "3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(paraRev, "This is verse three. ", Cache.DefaultVernWs);
			AddFootnote(m_genesisRevision, paraRev, 31, "Here is the footnote 3.");

			// Make a section in Revision: verse 4
			IScrSection section3Rev = CreateSection(m_genesisRevision, "Third Section Head");
			paraRev = AddParaToMockedSectionContent(section3Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(paraRev, "4", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(paraRev, "Verse 4.", Cache.DefaultVernWs);
			AddFootnote(m_genesisRevision, paraRev, 9, "Here is the last footnote.");

			// Detect differences
			m_bookMerger.DetectDifferences(null);

			// Check the diffs
			//TODO: the specifics below need to be finalized...
			Assert.AreEqual(3, m_bookMerger.Differences.Count);
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			//TODO: Assert.AreEqual(DifferenceType.VerseMissingInCurrent, diff.DiffType);
			//diff = m_bookMerger.Differences.MoveNext();
			//Assert.AreEqual(DifferenceType.VerseAddedToCurrent, diff.DiffType);
			//diff = m_bookMerger.Differences.MoveNext();
			//Assert.AreEqual(DifferenceType.SectionMissingInCurrent, diff.DiffType);

			// Check the section counts before doing the restore
			Assert.AreEqual(2, m_genesis.SectionsOS.Count);
			Assert.AreEqual(3, m_genesisRevision.SectionsOS.Count);

			// Revert all the diffs
			Difference diff;
			while ((diff = m_bookMerger.Differences.MoveFirst()) != null)
				m_bookMerger.ReplaceCurrentWithRevision(diff);

			// Verify the new section counts
			Assert.AreEqual(3, m_genesis.SectionsOS.Count);
			Assert.AreEqual(3, m_genesisRevision.SectionsOS.Count);

			// Verify the resulting sections
			IScrSection section1 = m_genesis.SectionsOS[0];
			IScrSection section2 = m_genesis.SectionsOS[1];
			IScrSection section3 = m_genesis.SectionsOS[2];
			// check the section heads
			Assert.AreEqual("First Section Head",
				((IScrTxtPara)section1.HeadingOA[0]).Contents.Text);
			Assert.AreEqual("Second Section Head",
				((IScrTxtPara)section2.HeadingOA[0]).Contents.Text);
			Assert.AreEqual("Third Section Head",
				((IScrTxtPara)section3.HeadingOA[0]).Contents.Text);
			// also check the refs of the sections
			Assert.AreEqual(57001001, section1.VerseRefStart);
			Assert.AreEqual(57001002, section1.VerseRefEnd);
			Assert.AreEqual(57001002, section2.VerseRefStart);
			Assert.AreEqual(57001003, section2.VerseRefEnd);
			Assert.AreEqual(57001004, section3.VerseRefStart);
			Assert.AreEqual(57001004, section3.VerseRefEnd);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		//TODO TE-4762: tests to insert/delete a multi-para heading
		// ReplaceCurWithRev_SectionsCombinedInCurr_MultiParaHeading
		// ReplaceCurWithRev_SectionSplitInCurr_MultiParaHeading

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method when the current book and the revision
		/// and the current have matching verses. However, two of the the verses in the revision
		/// are in a verse bridge. (Tests TE-7911)
		/// </summary>
		/// <remarks>Here is an outline of the data we will construct.
		///
		/// *********************** Current ******************************
		/// My aching head!
		///     1One. 2Two. 3Three.
		/// My other aching head!
		///     4Four.
		///
		/// *********************** Revision ******************************
		/// My aching head!
		///     1One. 2Two.
		/// My other aching head!
		///     3-4Three. Four.
		/// </remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MatchingVerseInRevBridge()
		{
					// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionCur1 = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCur1, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 1, 1, "Verse one. ");
			AddVerse(para1Curr, 0, 2, "Verse two. ");
			int ichVerse3Curr = para1Curr.Contents.Length;
			AddVerse(para1Curr, 0, 3, "Verse three. ");
			IScrSection sectionCur2 = CreateSection(m_genesis, "My other aching head!");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCur2, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 4, "Verse four. ");

			IScrSection sectionRev1 = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev1, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 1, 1, "Verse one. ");
			AddVerse(para1Rev, 0, 2, "Verse two. ");
			IScrSection sectionRev2 = CreateSection(m_genesisRevision, "My other aching head!");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev2, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, "3-4", "Verse three. Verse four.");

			// Creates ClusterType.AddedToCurrent cluster
			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis

			Assert.AreEqual(2, m_bookMerger.Differences.Count);
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff1, 01001003, 01001004, DifferenceType.TextDifference,
				para1Curr, ichVerse3Curr, para1Curr.Contents.Length,
				para2Rev, 0, para2Rev.Contents.Length);
			DiffTestHelper.VerifyParaAddedDiff(diff2, 01001004, 01001004, DifferenceType.ParagraphAddedToCurrent,
				para2Curr, para2Rev, para2Rev.Contents.Length);

			// Revert both of these differences
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			m_bookMerger.ReplaceCurrentWithRevision(diff2);

			// It doesn't revert back as expected to the revision. However, it does the best that
			// it can with the current clustering algoritm.
			Assert.AreEqual(1, sectionCur1.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("11Verse one. 2Verse two. 3-4Verse three. Verse four.", para1Curr.Contents.Text,
				"Ideally, the first paragraph would contain the following contents: 1One. 2Two. " +
				"The following paragraph should have the verse bridge: 3-4Three. Four.");
			Assert.AreEqual(1, sectionCur2.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual(0, ((IScrTxtPara)sectionCur2.ContentOA[0]).Contents.Length,
				"Currently creates an empty paragraph, but we would prefer that the verse 3-4 bridge " +
				"be inserted here.");
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method when the current book and the revision
		/// and the current have matching verses. However, two of the the verses in the revision
		/// are in a verse bridge in the Current. (Tests TE-7911)
		/// </summary>
		/// <remarks>Here is an outline of the data we will construct.
		///
		/// *********************** Current ******************************
		/// My aching head!
		///     1One. 2Two.
		/// My other aching head!
		///     3-4Three. Four.
		///
		/// *********************** Revision ******************************
		/// My aching head!
		///     1One. 2Two. 3Three.
		/// My other aching head!
		///     4Four.
		/// </remarks>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_MatchingVerseInCurrBridge()
		{
					// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionRev1 = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev1, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 1, 1, "Verse one. ");
			AddVerse(para1Rev, 0, 2, "Verse two. ");
			int ichVerse3Rev = para1Rev.Contents.Length;
			AddVerse(para1Rev, 0, 3, "Verse three. ");
			IScrSection sectionRev2 = CreateSection(m_genesisRevision, "My other aching head!");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev2, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 4, "Verse four. ");

			IScrSection sectionCurr1 = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCurr1, ScrStyleNames.NormalParagraph);
			AddVerse(para1Curr, 1, 1, "Verse one. ");
			AddVerse(para1Curr, 0, 2, "Verse two. ");
			IScrSection sectionCurr2 = CreateSection(m_genesis, "My other aching head!");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCurr2, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, "3-4", "Verse three. Verse four.");

			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis

			// Check differences
			Assert.AreEqual(2, m_bookMerger.Differences.Count);
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff1, 01001003, 01001004, DifferenceType.TextDifference,
				para2Curr, 0, para2Curr.Contents.Length,
				para1Rev, ichVerse3Rev, para1Rev.Contents.Length);
			DiffTestHelper.VerifyParaAddedDiff(diff2, 01001004, 01001004, DifferenceType.ParagraphMissingInCurrent,
				para2Rev, para2Curr, para2Curr.Contents.Length);

			// Revert both of these differences
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			m_bookMerger.ReplaceCurrentWithRevision(diff2);

			// It doesn't revert back as expected to the revision. However, it does the best that
			// it can with the current clustering algoritm.
			Assert.AreEqual(1, sectionCurr1.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("11Verse one. 2Verse two. ", para1Curr.Contents.Text,
				"Ideally, the first paragraph would contain the following contents: 1One. 2Two. 3Three.");
			Assert.AreEqual(2, sectionCurr2.ContentOA.ParagraphsOS.Count,
				"Ideally, the second section would contain only one paragraph. " +
				"Verse 3 is (incorrectly) moved to the section section.");
			Assert.AreEqual("3Verse three. ", ((IScrTxtPara)sectionCurr2.ContentOA[0]).Contents.Text);
			Assert.AreEqual("4Verse four. ", ((IScrTxtPara)sectionCurr2.ContentOA[1]).Contents.Text);
		}

		#endregion

		#region ReplaceCurrentWithRevision Split/Combined Section "AddedHeadIsFirst" Tests
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when Scripture
		/// sections in the Current are split portions of one section in the Revision,
		/// when the uncorrelated orphan section head is the first section in the cluster.
		/// This special case can happen only when the user added verses to the beginning of the
		/// orphan section (or deleted them in the combined section).
		///
		/// Revision sections         Current sections
		///  Section Zilch			   Section Zilch (verses 1-2 form their own section overlap cluster)
		///   verses 1-2				verses 1-2
		///  Section Ek (combined)	   Section Uno (the orphan that is first in cluster; vs 3,9 added)
		///   Ch2, vs 10,11,12,20		Ch2, vs 3,9,10,11
		///							   Section Dos
		///					            verses 12,20
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_SectionSplitInCurr_AddedHeadIsFirst()
		{
			// Set up the three curr sections
			IScrSection section0Curr = CreateSection(m_genesis, "Section Zilch");
			IScrTxtPara para0Curr = AddParaToMockedSectionContent(section0Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para0Curr, "1-2", ScrStyleNames.VerseNumber);

			IScrSection section1Curr = CreateSection(m_genesis, "Section Uno");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "2", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Curr, "3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "tres ", Cache.DefaultVernWs);
			AddRunToMockedPara(para1Curr, "9", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "nueve ", Cache.DefaultVernWs);
			int ichV10Curr = para1Curr.Contents.Length;
			AddRunToMockedPara(para1Curr, "10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, " ", Cache.DefaultVernWs); //"diez" was deleted
			int ichV11Curr = para1Curr.Contents.Length;
			AddRunToMockedPara(para1Curr, "11", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "QQonce ", Cache.DefaultVernWs);

			IScrSection section2Curr = CreateSection(m_genesis, "Section Dos");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "12", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "XXdoce ", Cache.DefaultVernWs);
			AddRunToMockedPara(para2Curr, "20", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "vente ", Cache.DefaultVernWs);

			// Set up two revision sections
			IScrSection section0Rev = CreateSection(m_genesisRevision, "Section Zilch");
			IScrTxtPara para0Rev = AddParaToMockedSectionContent(section0Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para0Rev, "1-2", ScrStyleNames.VerseNumber);

			IScrSection section1Rev = CreateSection(m_genesisRevision, "Section Ek");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "2", ScrStyleNames.ChapterNumber);
			int ichV10Rev = para1Rev.Contents.Length;
			AddRunToMockedPara(para1Rev, "10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "diez ", Cache.DefaultVernWs);
			int ichV11Rev = para1Rev.Contents.Length;
			AddRunToMockedPara(para1Rev, "11", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "once ", Cache.DefaultVernWs);
			int ichV12Rev = para1Rev.Contents.Length;
			AddRunToMockedPara(para1Rev, "12", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "doce ", Cache.DefaultVernWs);
			int ichV20Rev = para1Rev.Contents.Length;
			AddRunToMockedPara(para1Rev, "20", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "vente ", Cache.DefaultVernWs);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(5, m_bookMerger.Differences.Count);

			// We expect section 1 added in Current, but with chapter 2 and verses 10,11 moved into it
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff1, 01002003, 01002011, DifferenceType.SectionAddedToCurrent,
				section1Curr, para1Rev, 0); // destination IP various values could be okay
			Assert.AreEqual(3, diff1.SubDiffsForParas.Count);
			// subDiff for chapter 2 moved

			DiffTestHelper.VerifySubDiffTextCompared(diff1, 0,
				01002001, 01002001, DifferenceType.VerseMoved,
				para1Curr, 0, 1,
				para1Rev, 0, 1);
			Assert.AreEqual(para2Curr, diff1.SubDiffsForParas[0].ParaMovedFrom);
			Assert.AreEqual(0, diff1.SubDiffsForParas[0].IchMovedFrom);
			// subDiff for verse 10 moved
			DiffTestHelper.VerifySubDiffTextCompared(diff1, 1,
				01002010, 01002010, DifferenceType.VerseMoved,
				para1Curr, ichV10Curr, ichV11Curr,
				para1Rev, 1, ichV11Rev);
			Assert.AreEqual(para2Curr, diff1.SubDiffsForParas[1].ParaMovedFrom);
			Assert.AreEqual(0, diff1.SubDiffsForParas[1].IchMovedFrom);
			// subDiff for verse 11 moved
			DiffTestHelper.VerifySubDiffTextCompared(diff1, 2,
				01002011, 01002011, DifferenceType.VerseMoved,
				para1Curr, ichV11Curr, para1Curr.Contents.Length,
				para1Rev, ichV11Rev, ichV12Rev);
			Assert.AreEqual(para2Curr, diff1.SubDiffsForParas[2].ParaMovedFrom);
			Assert.AreEqual(0, diff1.SubDiffsForParas[2].IchMovedFrom);

			// text difference in verse 10 - "diez" was deleted in current
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff2, 01002010, DifferenceType.TextDifference,
				para1Curr, ichV10Curr + 2,
				para1Rev, ichV10Rev + 2, ichV10Rev + 6);

			// text difference in verse 11 - "QQ was added to current
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff3, 01002011, DifferenceType.TextDifference,
				para1Curr, ichV11Curr + 2, ichV11Curr + 4,
				para1Rev, ichV11Rev + 2);

			// Section head text different (S2Curr <> S1Rev) at V10 in Rev
			Difference diff4 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff4, 01002010, DifferenceType.TextDifference, //no firm reqmt for verse ref of section head
				(IScrTxtPara)section2Curr.HeadingOA[0], 8, 11,
				(IScrTxtPara)section1Rev.HeadingOA[0], 8, 10);

			// text difference in verse 12 - "ZZ" was added to current
			Difference diff5 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff5, 01002012, DifferenceType.TextDifference,
				para2Curr, 2, 4,
				para1Rev, ichV12Rev + 2);

			Assert.AreEqual(3, m_genesis.SectionsOS.Count);

			// Revert the SectionAdded+VersesMoved diff
			m_bookMerger.ReplaceCurrentWithRevision(diff1);

			// Make sure that there are now two sections in the current
			Assert.AreEqual(2, m_genesis.SectionsOS.Count);
			IScrSection section1 = m_genesis.SectionsOS[1];
			Assert.AreEqual(01002010, section1.VerseRefStart);
			Assert.AreEqual(01002020, section1.VerseRefEnd);
			Assert.AreEqual("Section Dos", ((IScrTxtPara)section1.HeadingOA[0]).Contents.Text);
			// with one paragraph
			Assert.AreEqual(1, section1.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("210 11QQonce 12XXdoce 20vente ", ((IScrTxtPara)section1.ContentOA[0]).Contents.Text);
			// check that the this section and para in the Current retained their hvos
			Assert.AreEqual(section2Curr, section1);
			Assert.AreEqual(para2Curr, section1.ContentOA[0]);

			// Revert the verse 10 text diff
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual("210diez 11QQonce 12XXdoce 20vente ", ((IScrTxtPara)section1.ContentOA[0]).Contents.Text);

			// Revert the verse 11 and 12 text diffs
			m_bookMerger.ReplaceCurrentWithRevision(diff3);
			m_bookMerger.ReplaceCurrentWithRevision(diff5);

			// we expect that the verse 12 text difference ich's were adjusted properly when the
			//  earlier diffs were reverted, giving us a good result here
			Assert.AreEqual("210diez 11once 12doce 20vente ", ((IScrTxtPara)section1.ContentOA[0]).Contents.Text);

			// Revert the section head text diff
			m_bookMerger.ReplaceCurrentWithRevision(diff4);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when Scripture
		/// sections in the Current are split portions of one section in the Revision,
		/// when the uncorrelated orphan section head is the first section in the cluster.
		/// This test adds footnotes to the scenario.
		///
		/// Revision sections         Current sections
		///  Section Zilch			   Section Zilch (verses 1-2 form their own section overlap cluster)
		///   verses 1-2 (ft ABC)		verses 1-2 (ft ABC)
		///  Section Ek (combined)	   Section Uno (the orphan that is first in cluster; v3 added)
		///   Ch2, vs 10,11,12,20		Ch2, vs 3,10,11 (ft DEF, Added, GHI)
		///			(ft GHI, JKL)
		///							   Section Dos
		///					            verses 12,20 (ft JKL)
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_SectionSplitInCurr_AddedHeadIsFirst_WithFootnotes()
		{
			// Set up the three curr sections
			IScrSection section0Curr = CreateSection(m_genesis, "Section Zilch");
			IScrTxtPara para0Curr = AddParaToMockedSectionContent(section0Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para0Curr, "1-2", ScrStyleNames.VerseNumber);
			AddFootnote(m_genesis, para0Curr, 3, "ABC");

			IScrSection section1Curr = CreateSection(m_genesis, "Section Uno");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "2", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Curr, "3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "tres ", Cache.DefaultVernWs);
			AddFootnote(m_genesis, para1Curr, para1Curr.Contents.Length, "DEF");
			AddRunToMockedPara(para1Curr, "10", ScrStyleNames.VerseNumber);
			int footnoteAddedPosOrig = para1Curr.Contents.Length;
			IScrFootnote fnAddedCurr = AddFootnote(m_genesis, para1Curr, footnoteAddedPosOrig, "Added");
			AddRunToMockedPara(para1Curr, "diez ", Cache.DefaultVernWs);
			IScrFootnote fnGhiCurr = AddFootnote(m_genesis, para1Curr, para1Curr.Contents.Length, "GHI");
			int ichV11Curr = para1Curr.Contents.Length;
			AddRunToMockedPara(para1Curr, "11", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "once ", Cache.DefaultVernWs);

			IScrSection section2Curr = CreateSection(m_genesis, "Section Dos");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "12", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "doce ", Cache.DefaultVernWs);
			AddFootnote(m_genesis, para2Curr, para2Curr.Contents.Length, "JKL");
			AddRunToMockedPara(para2Curr, "20", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "vente ", Cache.DefaultVernWs);
			Assert.AreEqual(5, m_genesis.FootnotesOS.Count);

			// Set up two revision sections
			IScrSection section0Rev = CreateSection(m_genesisRevision, "Section Zilch");
			IScrTxtPara para0Rev = AddParaToMockedSectionContent(section0Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para0Rev, "1-2", ScrStyleNames.VerseNumber);
			AddFootnote(m_genesisRevision, para0Rev, 3, "ABC");

			IScrSection section1Rev = CreateSection(m_genesisRevision, "Section Ek");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "2", ScrStyleNames.ChapterNumber);
			int ichV10Rev = para1Rev.Contents.Length;
			AddRunToMockedPara(para1Rev, "10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "diez ", Cache.DefaultVernWs);
			int footnoteGHIPos = para1Rev.Contents.Length;
			AddFootnote(m_genesisRevision, para1Rev, footnoteGHIPos, "GHI");
			int ichV11Rev = para1Rev.Contents.Length;
			AddRunToMockedPara(para1Rev, "11", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "once ", Cache.DefaultVernWs);
			int ichV12Rev = para1Rev.Contents.Length;
			AddRunToMockedPara(para1Rev, "12", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "doce ", Cache.DefaultVernWs);
			int footnoteJKLPos = para1Rev.Contents.Length;
			AddFootnote(m_genesisRevision, para1Rev, footnoteJKLPos, "JKL");
			int ichV20Rev = para1Rev.Contents.Length;
			AddRunToMockedPara(para1Rev, "20", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "vente ", Cache.DefaultVernWs);
			Assert.AreEqual(3, m_genesisRevision.FootnotesOS.Count);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(3, m_bookMerger.Differences.Count);

			// We expect section 1 added in Current, but with chapter 2 and verses 10,11 moved into it
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff1, 01002003, 01002011, DifferenceType.SectionAddedToCurrent,
				section1Curr, para1Rev, 0); // destination IP various values could be okay
			Assert.AreEqual(3, diff1.SubDiffsForParas.Count);

			// Added footnote after verse number 10
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff2, 01002010, DifferenceType.FootnoteAddedToCurrent,
				para1Curr, footnoteAddedPosOrig, footnoteAddedPosOrig + 1,
				para1Rev, ichV10Rev + 2);

			// Section head text different (S2Curr <> S1Rev) at V10 in Rev
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff3, 01002010, DifferenceType.TextDifference,
				(IScrTxtPara)section2Curr.HeadingOA[0], 8, 11,
				(IScrTxtPara)section1Rev.HeadingOA[0], 8, 10);

			Assert.AreEqual(3, m_genesis.SectionsOS.Count);

			// Revert the SectionAdded+VersesMoved diff
			m_bookMerger.ReplaceCurrentWithRevision(diff1);

			// Make sure that there are now two sections in the current
			Assert.AreEqual(2, m_genesis.SectionsOS.Count);
			IScrSection section1 = m_genesis.SectionsOS[1];
			Assert.AreEqual(01002010, section1.VerseRefStart);
			Assert.AreEqual(01002020, section1.VerseRefEnd);
			Assert.AreEqual("Section Dos", ((IScrTxtPara)section1.HeadingOA[0]).Contents.Text);
			// with one paragraph
			Assert.AreEqual(1, section1.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("210" + StringUtils.kChObject + "diez " + StringUtils.kChObject +
				"11once 12doce " + StringUtils.kChObject + "20vente ",
				((IScrTxtPara)section1.ContentOA[0]).Contents.Text);
			// check that this section and para in the Current retained their hvos
			Assert.AreEqual(section2Curr, section1);
			Assert.AreEqual(para2Curr, section1.ContentOA[0]);

			// Make sure that there are now four footnotes in the current
			Assert.AreEqual(4, m_genesis.FootnotesOS.Count);

			// The first footnote should be the ABC footnote in the first paragraph of the first section
			IScrFootnote footnoteNew = m_genesis.FootnotesOS[0];
			IScrTxtPara para = (IScrTxtPara)m_genesis.SectionsOS[0].ContentOA[0];
			VerifyFootnote(footnoteNew, para, 3);
			Assert.AreEqual("ABC", ((IScrTxtPara)footnoteNew[0]).Contents.Text);

			// The DEF foot note belonged to verse 3, which was deleted when the added section was reverted

			// The second footnote should be the Added footnote in the first paragraph of the second section
			//  this added footnote belongs to verse 10 which was moved from the orphan section
			footnoteNew = m_genesis.FootnotesOS[1];
			para = (IScrTxtPara)m_genesis.SectionsOS[1].ContentOA[0];
			VerifyFootnote(footnoteNew, para, ichV10Rev + 2); //expect position to match the Revision destIP
			Assert.AreEqual("Added", ((IScrTxtPara)footnoteNew[0]).Contents.Text);
			Assert.AreEqual(fnAddedCurr, footnoteNew); // same hvo as original footnote in orphan section

			// The third footnote should be the GHI footnote in the first paragraph of the second section
			//  this matched footnote belongs to verse 10 which was moved from the orphan section
			footnoteNew = m_genesis.FootnotesOS[2];
			para = (IScrTxtPara)m_genesis.SectionsOS[1].ContentOA[0];
			VerifyFootnote(footnoteNew, para, footnoteGHIPos + 1); //added footnote ORC moved us one char
			Assert.AreEqual("GHI", ((IScrTxtPara)footnoteNew[0]).Contents.Text);
			Assert.AreEqual(fnGhiCurr, footnoteNew); // same hvo as original footnote in orphan section

			// The fourth footnote should be the JKL footnote in the first paragraph of the second section
			footnoteNew = m_genesis.FootnotesOS[3];
			para = (IScrTxtPara)m_genesis.SectionsOS[1].ContentOA[0];
			VerifyFootnote(footnoteNew, para, footnoteJKLPos + 1); //added footnote ORC moved us one char
			Assert.AreEqual("JKL", ((IScrTxtPara)footnoteNew[0]).Contents.Text);

			// Revert the added footnote and the section head text diff
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			m_bookMerger.ReplaceCurrentWithRevision(diff3);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		//TODO TE-4826:
		//public void ReplaceCurWithRev_SectionSplitInCurr_AtParaBreak_AddedHeadIsFirst()
		// Revision section         Current sections
		//  Section Ek (combined)  Section Uno (the orphan that is first in cluster; v3 added)
		//   verse 10 para			verses 3,10
		//	 verses 12,20 para
		//						   Section Dos
		//							verses 12,20

		//TODO TE-4826:
		//public void ReplaceCurWithRev_SectionSplitInCurr_MultiParasRev_AddedHeadIsFirst()
		// Revision section         Current sections
		//  Section Ek (combined)  Section Uno (the orphan that is first in cluster; v3 added)
		//   verse 10 para			verses 3,10,11
		//	 verse 11 para
		//	 verses 12,20 para
		//						   Section Dos
		//							verses 12,20

		//TODO TE-4826:
		//public void ReplaceCurWithRev_SectionSplitInCurr_MultiParasCurr_AddedHeadIsFirst()

		//TODO TE-4826:
		// The section split is mid-verse. The associated IP in the Revision at a para break.
		//public void ReplaceCurWithRev_SectionSplitInCurrMidVerse_AtParaBreak_AddedHeadIsFirst()
		// The section split is mid-verse. The associated IP in the Revision is mid-paragraph.
		//public void ReplaceCurWithRev_SectionSplitInCurrMidVerse_AtMidPara_AddedHeadIsFirst()

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when Scripture
		/// sections in the Current are split portions of one section in the Revision,
		/// when the uncorrelated orphan section head is the first section in the cluster.
		/// This test is a scenario with chapter number 1 and verse 10 were also deleted from
		/// the Current. The moved verse 11 is ordered after the deleted items.
		///
		/// Revision sections         Current sections
		///  Section Ek (combined)	   Section Uno (the orphan that is first in cluster; vs 3,9 added)
		///   Ch1, vs 10,11,12,20		verses 3,9,11 (Ch1 and v10 removed)
		///							   Section Dos
		///					            verses 12,20
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_SectionSplitInCurr_AddedHeadIsFirst_DeletedVerses()
		{
			// Set up the two curr sections
			IScrSection section1Curr = CreateSection(m_genesis, "Section Uno");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "tres ", Cache.DefaultVernWs);
			AddRunToMockedPara(para1Curr, "9", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "nueve ", Cache.DefaultVernWs);
			int ichV11Curr = para1Curr.Contents.Length;
			AddRunToMockedPara(para1Curr, "11", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "once ", Cache.DefaultVernWs);

			IScrSection section2Curr = CreateSection(m_genesis, "Section Dos");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "12", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "doce ", Cache.DefaultVernWs);
			AddRunToMockedPara(para2Curr, "20", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "vente ", Cache.DefaultVernWs);

			// Set up revision section
			IScrSection section1Rev = CreateSection(m_genesisRevision, "Section Ek");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.ChapterNumber);
			AddRunToMockedPara(para1Rev, "10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "diez ", Cache.DefaultVernWs);
			int ichV11Rev = para1Rev.Contents.Length;
			AddRunToMockedPara(para1Rev, "11", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "once ", Cache.DefaultVernWs);
			int ichV12Rev = para1Rev.Contents.Length;
			AddRunToMockedPara(para1Rev, "12", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "doce ", Cache.DefaultVernWs);
			int ichV20Rev = para1Rev.Contents.Length;
			AddRunToMockedPara(para1Rev, "20", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "vente ", Cache.DefaultVernWs);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(4, m_bookMerger.Differences.Count);

			// We expect section 1 added in Current, but with verse 11 moved into it
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff1, 01001003, 01001011, DifferenceType.SectionAddedToCurrent,
				section1Curr, para1Rev, 0); // destination IP various values could be okay
			Assert.AreEqual(1, diff1.SubDiffsForParas.Count);
			// subDiff for verse 11 moved
			DiffTestHelper.VerifySubDiffTextCompared(diff1, 0,
				01001011, 01001011, DifferenceType.VerseMoved,
				para1Curr, ichV11Curr, para1Curr.Contents.Length,
				para1Rev, ichV11Rev, ichV12Rev);
			Assert.AreEqual(para2Curr, diff1.SubDiffsForParas[0].ParaMovedFrom);
			Assert.AreEqual(0, diff1.SubDiffsForParas[0].IchMovedFrom);

			// We expect Chapter 1 missing in Current
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff2, 01001001, DifferenceType.VerseMissingInCurrent,
				para1Curr, 0,
				para1Rev, 0, 1);

			// We expect Verse 10 missing in Current
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff3, 01001010, DifferenceType.VerseMissingInCurrent,
				para1Curr, ichV11Curr,
				para1Rev, 1, ichV11Rev);

			// Section head text different (S2Curr <> S1Rev) at V10 in Rev
			Difference diff4 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff4, 01001010, DifferenceType.TextDifference,
				(IScrTxtPara)section2Curr.HeadingOA[0], 8, 11,
				(IScrTxtPara)section1Rev.HeadingOA[0], 8, 10);

			Assert.AreEqual(2, m_genesis.SectionsOS.Count);

			// Revert the SectionAdded+VersesMoved diff
			m_bookMerger.ReplaceCurrentWithRevision(diff1);

			// Make sure that there is now one section in the current
			Assert.AreEqual(1, m_genesis.SectionsOS.Count);
			IScrSection section1 = m_genesis.SectionsOS[0];
			Assert.AreEqual(01001011, section1.VerseRefStart);
			Assert.AreEqual(01001020, section1.VerseRefEnd);
			Assert.AreEqual("Section Dos", ((IScrTxtPara)section1.HeadingOA[0]).Contents.Text);
			// with one paragraph
			Assert.AreEqual(1, section1.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("11once 12doce 20vente ", ((IScrTxtPara)section1.ContentOA[0]).Contents.Text);
			// check that the first section and para in the Current retained their hvos
			Assert.AreEqual(section2Curr, section1);
			Assert.AreEqual(para2Curr, section1.ContentOA[0]);

			// Revert the VerseMissing diffs xxxxxxxxxxxxxxx(reverse order for an extra challenge)
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			m_bookMerger.ReplaceCurrentWithRevision(diff3);

			Assert.AreEqual(1, m_genesis.SectionsOS.Count);
			section1 = m_genesis.SectionsOS[0];
			Assert.AreEqual(01001010, section1.VerseRefStart);
			Assert.AreEqual(01001020, section1.VerseRefEnd);
			// with one paragraph
			Assert.AreEqual(1, section1.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("110diez 11once 12doce 20vente ", ((IScrTxtPara)section1.ContentOA[0]).Contents.Text);

			// Revert the section head text diff
			m_bookMerger.ReplaceCurrentWithRevision(diff4);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when Scripture
		/// sections in the Current are split portions of one section in the Revision,
		/// when the uncorrelated orphan section head is the first section in the cluster.
		/// This test is a scenario when chapter number 1 and verse 11 were also deleted from
		/// the Current. The moved verse 10 is ordered between the deleted items. Yuck.
		///
		/// Revision sections         Current sections
		///  Section Ek (combined)	   Section Uno (the orphan that is first in cluster; v3 added)
		///   Ch1, vs 10,11,12,20		verses 3,10 (Ch1 and v11 removed)
		///							   Section Dos
		///					            verses 12,20
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		[Ignore("TE-4813 not fixed yet")]
		public void ReplaceCurWithRev_SectionSplitInCurr_AddedHeadIsFirst_DeletedVerses2()
		{
			// Set up the two curr sections
			IScrSection section1Curr = CreateSection(m_genesis, "Section Uno");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "3", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "tres ", Cache.DefaultVernWs);
			int ichV10Curr = para1Curr.Contents.Length;
			AddRunToMockedPara(para1Curr, "10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Curr, "diez ", Cache.DefaultVernWs);

			IScrSection section2Curr = CreateSection(m_genesis, "Section Dos");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Curr, "12", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "doce ", Cache.DefaultVernWs);
			AddRunToMockedPara(para2Curr, "20", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Curr, "vente ", Cache.DefaultVernWs);

			// Set up revision section
			IScrSection section1Rev = CreateSection(m_genesisRevision, "Section Ek");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.ChapterNumber);
			int ichV10Rev = para1Rev.Contents.Length;
			AddRunToMockedPara(para1Rev, "10", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "diez ", Cache.DefaultVernWs);
			int ichV11Rev = para1Rev.Contents.Length;
			AddRunToMockedPara(para1Rev, "11", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "once ", Cache.DefaultVernWs);
			int ichV12Rev = para1Rev.Contents.Length;
			AddRunToMockedPara(para1Rev, "12", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "doce ", Cache.DefaultVernWs);
			int ichV20Rev = para1Rev.Contents.Length;
			AddRunToMockedPara(para1Rev, "20", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para1Rev, "vente ", Cache.DefaultVernWs);

			// find the diffs for Genesis
			m_bookMerger.DetectDifferences(null);

			// Verify the differences found
			Assert.AreEqual(4, m_bookMerger.Differences.Count);

			// We expect section 1 added in Current, but with verse 10 moved into it
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff1, 01001003, 01001010, DifferenceType.SectionAddedToCurrent,
				section1Curr, para1Rev, 0); // destination IP various values could be okay
			Assert.AreEqual(1, diff1.SubDiffsForParas.Count);
			// subDiff for verse 11 moved
			DiffTestHelper.VerifySubDiffTextCompared(diff1, 0,
				01001010, 01001010, DifferenceType.VerseMoved,
				para1Curr, ichV10Curr, para1Curr.Contents.Length,
				para1Rev, ichV10Rev, ichV11Rev);
			Assert.AreEqual(para2Curr, diff1.SubDiffsForParas[0].ParaMovedFrom);
			Assert.AreEqual(0, diff1.SubDiffsForParas[0].IchMovedFrom);

			// We expect Chapter 1 missing in Current
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff2, 01001001, DifferenceType.VerseMissingInCurrent,
				para1Curr, 0,
				para1Rev, 0, 1);

			// We expect Verse 11 missing in Current
			Difference diff3 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff3, 01001011, DifferenceType.VerseMissingInCurrent,
				para1Curr, para1Curr.Contents.Length,
				para1Rev, ichV11Rev, ichV12Rev);

			// Section head text different (S2Curr <> S1Rev) at V10 in Rev
			Difference diff4 = m_bookMerger.Differences.MoveNext();
			DiffTestHelper.VerifyParaDiff(diff4, 01001010, DifferenceType.TextDifference,
				(IScrTxtPara)section2Curr.HeadingOA[0], 8, 11,
				(IScrTxtPara)section1Rev.HeadingOA[0], 8, 10);

			Assert.AreEqual(2, m_genesis.SectionsOS.Count);

			// Revert the SectionAdded+VersesMoved diff
			m_bookMerger.ReplaceCurrentWithRevision(diff1);

			// Make sure that there is now one section in the current
			Assert.AreEqual(1, m_genesis.SectionsOS.Count);
			IScrSection section1 = m_genesis.SectionsOS[0];
			Assert.AreEqual(01001010, section1.VerseRefStart);
			Assert.AreEqual(01001020, section1.VerseRefEnd);
			Assert.AreEqual("Section Dos", ((IScrTxtPara)section1.HeadingOA[0]).Contents.Text);
			// with one paragraph
			Assert.AreEqual(1, section1.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("10diez 12doce 20vente ", ((IScrTxtPara)section1.ContentOA[0]).Contents.Text);
			// check that the first section and para in the Current retained their hvos
			Assert.AreEqual(section2Curr, section1);
			Assert.AreEqual(para2Curr, section1.ContentOA[0]);

			// Revert the VerseMissing diffs
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			m_bookMerger.ReplaceCurrentWithRevision(diff3);

			Assert.AreEqual(1, m_genesis.SectionsOS.Count);
			section1 = m_genesis.SectionsOS[0];
			//Assert.AreEqual(01001010, section1.VerseRefStart);
			Assert.AreEqual(01001020, section1.VerseRefEnd);
			// with one paragraph
			Assert.AreEqual(1, section1.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("110diez 11once 12doce 20vente ", ((IScrTxtPara)section1.ContentOA[0]).Contents.Text);

			// Revert the section head text diff
			m_bookMerger.ReplaceCurrentWithRevision(diff4);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when a Scripture
		/// section in the Current is a combination of two in the Revision,
		/// when the uncorrelated orphan section head is the first section in the cluster.
		/// This special case can happen only when the user deleted verses at the beginning of
		/// the combined section (or added them to the orphan).
		///
		/// Revision sections         Current sections
		///  Section Zilch			   Section Zilch (verses 1-2 form their own section overlap cluster)
		///   verses 1-2				verses 1-2
		///	 Section Uno (the orphan)  Section Ek (combined section; vs 3,9 were removed)
		///	  Ch2, vs 3,9,10,11			Ch2, vs 10,11,12,20
		///  Section Dos
		///	  verses 12,20
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		[Ignore("Test needed as part of TE-4768")]
		public void ReplaceCurWithRev_SectionsCombinedInCurr_AddedHeadIsFirst()
		{
			// See DetectDifferences_SectionsCombinedInCurr_AddedHeadIsFirst() to copy code to
			//  set up the data and detect the diffs.



			// adapt the following...

			//Assert.AreEqual(3, m_genesis.SectionsOS.Count);

			//// Revert the SectionAdded+VersesMoved diff
			//m_bookMerger.ReplaceCurrentWithRevision(diff1);

			//// Make sure that there are now two sections in the current
			//Assert.AreEqual(2, m_genesis.SectionsOS.Count);
			//IScrSection section1 = m_genesis.SectionsOS[1];
			//Assert.AreEqual(01002010, section1.VerseRefStart);
			//Assert.AreEqual(01002020, section1.VerseRefEnd);
			//Assert.AreEqual("Section Dos", ((IScrTxtPara)section1.HeadingOA[0]).Contents.Text);
			//// with one paragraph
			//Assert.AreEqual(1, section1.ContentOA.ParagraphsOS.Count);
			//Assert.AreEqual("210 11QQonce 12XXdoce 20vente ", ((IScrTxtPara)section1.ContentOA[0]).Contents.Text);
			//// check that the this section and para in the Current retained their hvos
			//Assert.AreEqual(section2CurrHvo, section1);
			//Assert.AreEqual(para2CurrHvo, section1.ContentOA[0]);

			//// Revert the verse 10 text diff
			//m_bookMerger.ReplaceCurrentWithRevision(diff2);
			//Assert.AreEqual("210diez 11QQonce 12XXdoce 20vente ", ((IScrTxtPara)section1.ContentOA[0]).Contents.Text);

			//// Revert the verse 11 and 12 text diffs
			//m_bookMerger.ReplaceCurrentWithRevision(diff3);
			//m_bookMerger.ReplaceCurrentWithRevision(diff5);

			//// we expect that the verse 12 text difference ich's were adjusted properly when the
			////  earlier diffs were reverted, giving us a good result here
			//Assert.AreEqual("210diez 11once 12doce 20vente ", ((IScrTxtPara)section1.ContentOA[0]).Contents.Text);

			//// Revert the section head text diff
			//m_bookMerger.ReplaceCurrentWithRevision(diff4);

			//// Recheck that Current is now identical to Revision
			//m_bookMerger.DetectDifferences_ReCheck();
			//Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}
		#endregion

		#region ReplaceCurrentWithRevision empty paragraph Tests
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the section
		/// head and contents of the first section in the current are empty and the revision is
		/// a multi-paragraph verse.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurrentWithRev_EmptySectionCurMultiParaVerseRev()
		{
			IScrSection section1Curr = CreateSection(m_genesis, string.Empty);
			IScrTxtPara para1Curr = AddEmptyPara(section1Curr);
			IScrSection section2Curr = CreateSection(m_genesis, "Heading 2");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 2, 1, "Verses with references after the revision verses.");

			IScrSection section1Rev = CreateSection(m_genesisRevision, string.Empty);
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 1, 1, "First para of verse 1");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "Second para of verse 1");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 0, "Third para of verse 1");

			m_bookMerger.DetectDifferences(null);

			Assert.AreEqual(2, m_bookMerger.Differences.Count);
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			Difference diff2 = m_bookMerger.Differences.MoveNext();

			// The empty paragraph is ignored.
			// First difference is a paragraph structure change for the multiple paragraphs in verse one.
			DiffTestHelper.VerifyParaStructDiff(diff1, 01001001, 01001001, DifferenceType.ParagraphStructureChange);
			Assert.AreEqual(4, diff1.SubDiffsForParas.Count);
			DiffTestHelper.VerifySubDiffParaReferencePoints(diff1, para1Curr, 0, para1Rev, 0);
			DiffTestHelper.VerifySubDiffParaAdded(diff1, 1, DifferenceType.ParagraphMissingInCurrent,
				para1Rev, para1Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffParaAdded(diff1, 2, DifferenceType.ParagraphMissingInCurrent,
				para2Rev, para2Rev.Contents.Length);
			DiffTestHelper.VerifySubDiffParaAdded(diff1, 3, DifferenceType.ParagraphMissingInCurrent,
				para3Rev, para3Rev.Contents.Length);
			// Second difference is an added section in the current.
			Assert.AreEqual(DifferenceType.SectionAddedToCurrent, diff2.DiffType);
			Assert.AreEqual(01002001, diff2.RefStart.BBCCCVVV);

			// Revert all of the differences.
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(2, m_genesis.SectionsOS.Count, "There should be two sections.");
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(1, m_genesis.SectionsOS.Count, "The second section should be reverted.");

			// We expect the current to have the content of the revision in section 1.
			// And that the content of section two in the current would be reverted.
			section1Curr = m_genesis.SectionsOS[0];
			Assert.AreEqual(3, section1Curr.ContentOA.ParagraphsOS.Count);
			Assert.IsNull(section1Curr.HeadingOA[0].Contents.Text);
			Assert.AreEqual("11First para of verse 1", section1Curr.ContentOA[0].Contents.Text);
			Assert.AreEqual("Second para of verse 1", section1Curr.ContentOA[1].Contents.Text);
			Assert.AreEqual("Third para of verse 1", section1Curr.ContentOA[2].Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the first
		/// section in the revision is empty and the current is a multi-paragraph verse.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurrentWithRev_EmptySectionRevMultiParaVerseCur()
		{
			IScrSection section1Cur = CreateSection(m_genesis, string.Empty);
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(section1Cur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 1, 1, "First para of verse 1");
			IScrTxtPara para2Cur = AddParaToMockedSectionContent(section1Cur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Cur, 0, 0, "Second para of verse 1");
			IScrTxtPara para3Cur = AddParaToMockedSectionContent(section1Cur, ScrStyleNames.NormalParagraph);
			AddVerse(para3Cur, 0, 0, "Third para of verse 1");

			IScrSection section1Rev = CreateSection(m_genesisRevision, string.Empty);
			AddEmptyPara(section1Rev);
			IScrSection section2Rev = CreateSection(m_genesisRevision, string.Empty); // try setting heading text
			IScrTxtPara para2 = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddVerse(para2, 2, 1, "Verses with references after the revision verses.");

			m_bookMerger.DetectDifferences(null);

			// We expect a paragraph added differences.
			Assert.AreEqual(2, m_bookMerger.Differences.Count);
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			Difference diff2 = m_bookMerger.Differences.MoveNext();

			// A quick check of differences...
			// First, a paragraph structure change for the multiple paragraphs in verse one.
			Assert.AreEqual(DifferenceType.ParagraphStructureChange, diff1.DiffType);
			Assert.AreEqual(01001001, diff1.RefStart.BBCCCVVV);
			// Third, an added section in the current.
			Assert.AreEqual(DifferenceType.SectionMissingInCurrent, diff2.DiffType);
			Assert.AreEqual(01002001, diff2.RefStart.BBCCCVVV);

			// Revert all of the differences.
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			m_bookMerger.ReplaceCurrentWithRevision(diff2);

			// We will have one section in the current because the empty section is not restored.
			Assert.AreEqual(1, m_genesis.SectionsOS.Count);
			// The section should contain a para for 2:1.
			section1Cur = m_genesis.SectionsOS[0];
			Assert.AreEqual("21Verses with references after the revision verses.",
				section1Cur.ContentOA[0].Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();

			// Not really sure whether this is what we want, but there is still a difference because
			// the first (empty) section in the revision is not preserved.
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference remainingDiff = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.SectionMissingInCurrent, remainingDiff.DiffType);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when a Scripture
		/// section in the Current is empty (containing a stanza break and two other empty paras)
		/// and the revision has content in multiple paras. Test for TE-8003
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_TE8003()
		{
			IScrSection sectionCur = AddSectionToMockedBook(m_genesis);
			AddSectionHeadParaToSection(sectionCur, "Section 1",
				ScrStyleNames.SectionHead);
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 1, 0, string.Empty);
			IScrTxtPara para2Cur = AddEmptyPara(sectionCur, ScrStyleNames.StanzaBreak);
			IScrTxtPara para3Cur = AddEmptyPara(sectionCur, ScrStyleNames.Line1);

			IScrSection sectionRev = AddSectionToMockedBook(m_genesisRevision);
			AddSectionHeadParaToSection(sectionRev, "Section 1",
				ScrStyleNames.SectionHead);
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 1, 0, "This is the first part");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.Line2);
			AddVerse(para2Rev, 0, 0, "of a two para verse.");
			IScrTxtPara para3Rev = AddEmptyPara(sectionRev, ScrStyleNames.StanzaBreak);
			IScrTxtPara para4Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.Line1);
			AddVerse(para4Rev, 0, 0, "more text.");

			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(2, m_bookMerger.Differences.Count);
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			Assert.AreEqual(DifferenceType.ParagraphMergedInCurrent, diff1.DiffType);
			Difference diff2 = m_bookMerger.Differences.MoveNext();
			Assert.AreEqual(DifferenceType.StanzaBreakAddedToCurrent, diff2.DiffType);

			// Revert the first difference -- content paragraphs restored to Current version
			Assert.AreEqual(3, sectionCur.ContentOA.ParagraphsOS.Count);
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			Assert.AreEqual(6, sectionCur.ContentOA.ParagraphsOS.Count);
			// Make sure that the paragraphs came in the expected order.
			Assert.AreEqual(ScrStyleNames.NormalParagraph,  sectionCur.ContentOA[0].StyleName);
			Assert.AreEqual("1This is the first part", sectionCur.ContentOA[0].Contents.Text);
			Assert.AreEqual(ScrStyleNames.Line2, sectionCur.ContentOA[1].StyleName);
			Assert.AreEqual("of a two para verse.", sectionCur.ContentOA[1].Contents.Text);
			Assert.AreEqual(ScrStyleNames.StanzaBreak, sectionCur.ContentOA[2].StyleName);
			Assert.AreEqual(ScrStyleNames.Line1, sectionCur.ContentOA[3].StyleName);
			Assert.AreEqual("more text.", sectionCur.ContentOA[3].Contents.Text);
			Assert.AreEqual(ScrStyleNames.StanzaBreak, sectionCur.ContentOA[4].StyleName);
			Assert.AreEqual(ScrStyleNames.Line1, sectionCur.ContentOA[5].StyleName);

			// Revert the second difference -- remove added stanza break at index 4
			m_bookMerger.ReplaceCurrentWithRevision(diff2);
			Assert.AreEqual(5, sectionCur.ContentOA.ParagraphsOS.Count);
			// Confirm that we deleted the last stanza break
			Assert.AreEqual(ScrStyleNames.StanzaBreak, sectionCur.ContentOA[2].StyleName);
			Assert.AreEqual(ScrStyleNames.Line1, sectionCur.ContentOA[3].StyleName);
			// Since the ScrVerse iterator ignores empty paragraphs, the original Line1 empty paragraph remains at the end.
			Assert.AreEqual(ScrStyleNames.Line1, sectionCur.ContentOA[4].StyleName);
			Assert.AreEqual(0, sectionCur.ContentOA[4].Contents.Length);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method when the section
		/// in the first section in the current is empty and the revision has a non-empty
		/// paragraph with a different style.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurrentWithRev_EmptyCurPara_DifferentStyleRevPara()
		{
			IScrSection section1Curr = CreateSection(m_genesis, string.Empty);
			IScrTxtPara para1Curr = AddEmptyPara(section1Curr);
			IScrSection section2Curr = CreateSection(m_genesis, string.Empty);
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			AddVerse(para2Curr, 0, 2, "Verse two.");

			IScrSection section1Rev = CreateSection(m_genesisRevision, string.Empty);
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.Line2);
			AddVerse(para1Rev, 1, 1, "Verse one. ");
			AddVerse(para1Rev, 0, 2, "Verse two.");

			m_bookMerger.DetectDifferences(null);

			Assert.AreEqual(2, m_bookMerger.Differences.Count);
			Difference diff1 = m_bookMerger.Differences.MoveFirst();
			Difference diff2 = m_bookMerger.Differences.MoveNext();

			// Revert all of the differences.
			m_bookMerger.ReplaceCurrentWithRevision(diff1);
			m_bookMerger.ReplaceCurrentWithRevision(diff2);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the ReplaceCurrentWithRevision method when a section is inserted between two
		/// existing sections but its contents have no chapter/verse numbers.
		///
		/// Revision                 Current
		///  First section head       First section head
		///  C1                       C1
		///                           Middle section head
		///                           empty para
		///  Last section head        Last section head
		///   verse 2                 verse 2
		///
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_SectionContentWithoutVersesInserted()
		{
			// Build the "current" sections
			IScrSection section1Curr = CreateSection(m_genesis, "First");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(section1Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Curr, "1", ScrStyleNames.ChapterNumber);
			IScrSection section2Curr = CreateSection(m_genesis, "Middle");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(section2Curr, ScrStyleNames.NormalParagraph);
			IScrSection section3Curr = CreateSection(m_genesis, "Last");
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(section3Curr, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para3Curr, "2", ScrStyleNames.VerseNumber);

			// Build the "revision" section
			IScrSection section1Rev = CreateSection(m_genesisRevision, "First");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(section1Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para1Rev, "1", ScrStyleNames.ChapterNumber);
			IScrSection section2Rev = CreateSection(m_genesisRevision, "Last");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(section2Rev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "2", ScrStyleNames.VerseNumber);

			// Detect differences
			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(1, m_bookMerger.Differences.Count);

			Difference diff = m_bookMerger.Differences.MoveFirst();
			DiffTestHelper.VerifySectionDiff(diff, 01001001, 01001001, DifferenceType.SectionAddedToCurrent,
				section2Curr, para1Rev, 1);

			m_bookMerger.ReplaceCurrentWithRevision(diff);

			// Make sure that there are now two sections in the current
			Assert.AreEqual(2, m_genesis.SectionsOS.Count);
			IScrSection section1 = m_genesis.SectionsOS[0];
			IScrSection section2 = m_genesis.SectionsOS[1];
			Assert.AreEqual(01001001, section1.VerseRefStart);
			Assert.AreEqual(01001001, section1.VerseRefEnd);
			Assert.AreEqual("First", section1.HeadingOA[0].Contents.Text);
			Assert.AreEqual(1, section1.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("1", section1.ContentOA[0].Contents.Text);
			Assert.AreEqual(01001002, section2.VerseRefStart);
			Assert.AreEqual(01001002, section2.VerseRefEnd);
			Assert.AreEqual("Last", section2.HeadingOA[0].Contents.Text);
			Assert.AreEqual(1, section2.ContentOA.ParagraphsOS.Count);
			Assert.AreEqual("2", section2.ContentOA[0].Contents.Text);

			// Recheck that Current is now identical to Revision
			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}
		#endregion

		#region ReplaceCurrentWithRevision Copy Paragraph Tests
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the IScrTxtPara.ReplacePara() method.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaCopyTo()
		{
			IScrTxtPara paraRev = SetUpParagraphInRevision();

			// Prepare an empty paragraph in the Current book
			IScrSection sectionCurr = CreateSection(m_genesis, "My aching head!");
			IScrTxtPara newPara = AddParaToMockedSectionContent(sectionCurr,
				ScrStyleNames.NormalParagraph);

			// Now, call the method under test!
			newPara.ReplacePara(paraRev);

			// Verify
			VerifyCopiedPara(newPara);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Helper method:
		/// Set up the test paragraph in the Revision, incl footnotes and back translations.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		private IScrTxtPara SetUpParagraphInRevision()
		{
			// Build a paragraph in the revision book
			IScrSection sectionRev = CreateSection(m_genesisRevision, "My aching head!");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddRunToMockedPara(para2Rev, "2", ScrStyleNames.VerseNumber);
			AddRunToMockedPara(para2Rev, "verse two", Cache.DefaultVernWs);

			// and the second para includes a footnote
			IScrFootnote footnote2Rev = AddFootnote(m_genesisRevision, para2Rev, 1,
				"New footnote text");

			// Add back translation to the paragraph, and its status
			int btWs = Cache.DefaultAnalWs;
			ICmTranslation paraTrans = AddBtToMockedParagraph(para2Rev, btWs);
			AddRunToMockedTrans(paraTrans, btWs, "BT of verse two", null);

			// Add back translation of footnote, and its status
			ICmTranslation footnoteTrans = AddBtFootnote(paraTrans, 2, btWs,
				footnote2Rev, "BT of footnote");

			paraTrans.Status.set_String(btWs, BackTranslationStatus.Checked.ToString());
			footnoteTrans.Status.set_String(btWs, BackTranslationStatus.Finished.ToString());

			return para2Rev;
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Helper method:
		/// Verify the given copied paragraph, including footnotes and back translation.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		private void VerifyCopiedPara(IScrTxtPara newPara)
		{
			int btWs = Cache.DefaultAnalWs;

			// Check the paragraph BT
			// para must have only only 1 translation, the BT
			Assert.AreEqual(1, newPara.TranslationsOC.Count);
			ICmTranslation paraTrans = newPara.GetBT();
			// BT alternate must have the original status
			Assert.AreEqual(BackTranslationStatus.Checked.ToString(),
				paraTrans.Status.get_String(btWs).Text);

			// Check the footnote BT
			Assert.AreEqual(1, m_genesis.FootnotesOS.Count);
			IScrFootnote footnote = m_genesis.FootnotesOS[0];
			IScrTxtPara footnotePara = (IScrTxtPara)footnote[0];
			// footnote must have only only 1 translation, the BT
			Assert.AreEqual(1, footnotePara.TranslationsOC.Count);
			ICmTranslation footnoteTrans = footnotePara.GetBT();
			// BT alternate must have the original status
			Assert.AreEqual(BackTranslationStatus.Finished.ToString(),
				footnoteTrans.Status.get_String(btWs).Text);
		}
		#endregion

		#region ReplaceCurWithRev_ParaStyleDifferenceInSubDiff Tests
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method to ensure that
		/// reverting a complex difference that includes paragraph style changes gets the
		/// paragraph style set correctly. This also tests part of TE-7036 (detecting the para
		/// style difference).
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ParaStyleDifferenceInSubDiff_TE9094()
		{
			IScrSection sectionCur = AddSectionToMockedBook(m_genesis);
			AddSectionHeadParaToSection(sectionCur, "Section 1",
				ScrStyleNames.SectionHead);
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para1Cur, 1, 0, "This is the first part");
			IScrTxtPara para2Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.Line2);
			AddVerse(para2Cur, 0, 0, "of a 2 para");
			IScrTxtPara para4Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.Line1);
			AddVerse(para4Cur, 0, 0, "verse. more text.");

			IScrSection sectionRev = AddSectionToMockedBook(m_genesisRevision);
			AddSectionHeadParaToSection(sectionRev, "Section 1",
				ScrStyleNames.SectionHead);
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 1, 0, "This is the first part");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "of a two para verse.");
			IScrTxtPara para3Rev = AddEmptyPara(sectionRev, ScrStyleNames.StanzaBreak);
			IScrTxtPara para4Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para4Rev, 0, 0, "more text.");

			m_bookMerger.DetectDifferences(null);
			Assert.AreEqual(1, m_bookMerger.Differences.Count);
			Difference diff1 = m_bookMerger.Differences.MoveFirst();

			// Revert the first difference -- content paragraphs restored to Current version
			m_bookMerger.ReplaceCurrentWithRevision(diff1);

			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}
		#endregion

		#region ReplaceCurrentWithRevision Complex Verse Break Differences Tests
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Test the <see cref="BookMerger.ReplaceCurrentWithRevision"/> method to ensure that
		/// reverting a set of complex verse break differences do not cause a spurious paragraph
		/// style change. TE-9103 (see also TE-9094)
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurWithRev_ComplexVerseBreakDifferences_TE9103()
		{
			IScrSection sectionCur = AddSectionToMockedBook(m_genesis);
			AddSectionHeadParaToSection(sectionCur, String.Empty, ScrStyleNames.SectionHead);
			IScrTxtPara para1Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.Line3);
			AddVerse(para1Cur, 0, 0, "and followed ");
			AddVerse(para1Cur, 0, 8, "me sown. ");
			AddVerse(para1Cur, 0, 11, "Israel ");
			AddVerse(para1Cur, 0, 12, "was holy to ");
			AddVerse(para1Cur, 0, 13, "the LORD, ");
			IScrTxtPara para2Cur = AddParaToMockedSectionContent(sectionCur, ScrStyleNames.NormalParagraph);
			AddVerse(para2Cur, 0, 14, "the firstfruits ");
			AddRunToMockedPara(para2Cur, "15-16", ScrStyleNames.VerseNumber);
			AddVerse(para2Cur, 0, 0, "of his harvest; all who");

			IScrSection sectionRev = AddSectionToMockedBook(m_genesisRevision);
			AddSectionHeadParaToSection(sectionRev, String.Empty, ScrStyleNames.SectionHead);
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.Line3);
			AddVerse(para1Rev, 0, 0, "and followed ");
			AddVerse(para1Rev, 0, 8, "me sown. Israel ");
			AddRunToMockedPara(para1Rev, "11-12", ScrStyleNames.VerseNumber);
			AddVerse(para1Rev, 0, 0, "was hold to the LORD, ");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 0, "the firstfruits ");
			AddVerse(para2Rev, 0, 13, "of his harvest; all who");

			m_bookMerger.DetectDifferences(null);

			while (m_bookMerger.Differences.Count > 0)
			{
				Difference diff = m_bookMerger.Differences.MoveFirst();
				Assert.AreNotEqual(DifferenceType.ParagraphStyleDifference, diff.DiffType);
				m_bookMerger.ReplaceCurrentWithRevision(diff);
			}

			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}
		#endregion

		#region Wickedly evil, straight from the pit of Hades tests
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Simulates a complex scenario where multiple paragraph style changes and paragraph
		/// splits and joins happen. TE-9274.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		[Test]
		public void ReplaceCurrentWithRevision_WickedlyEvil_TE9274()
		{
			// Create a section for both the current version of Genesis and the stored revision.
			IScrSection sectionRev1 = CreateSection(m_genesisRevision, "Warning Against Prejudice");
			IScrTxtPara para1Rev = AddParaToMockedSectionContent(sectionRev1, ScrStyleNames.NormalParagraph);
			AddVerse(para1Rev, 2, 1, "My friends, as believers in our Lord Jesus Christ, the Lord of glory, you must never treat people in different ways according to their outward appearance. ");
			AddVerse(para1Rev, 0, 2, "Suppose a rich man wearing a gold ring and fine clothes comes to your meeting, and a poor man in ragged clothes also comes. ");
			AddVerse(para1Rev, 0, 3, "If you show more respect to the well-dressed man and say to him, Have this best seat here, but say to the poor man, Stand over there, or sit here on the floor by my feet,");
			AddVerse(para1Rev, 0, 4, "then you are guilty of creating distinctions among yourselves and of making judgments based on evil motives.");
			IScrTxtPara para2Rev = AddParaToMockedSectionContent(sectionRev1, ScrStyleNames.NormalParagraph);
			AddVerse(para2Rev, 0, 5, "Listen, my dear friends! God chose the poor people of this world to be rich in faith and to possess the kingdom which he promised to those who love him. ");
			AddVerse(para2Rev, 0, 6, "But you dishonor the poor! Who are the ones who oppress you and drag you before the judges? The rich! ");
			AddVerse(para2Rev, 0, 7, "They are the ones who speak evil of that good name which has been given to you.");
			IScrTxtPara para3Rev = AddParaToMockedSectionContent(sectionRev1, ScrStyleNames.NormalParagraph);
			AddVerse(para3Rev, 0, 8, "You will be doing the right thing if you obey the law of the Kingdom, which is found in the scripture, Love your neighbor as you love yourself. ");
			AddVerse(para3Rev, 0, 9, "But if you treat people according to their outward appearance, you are guilty of sin, and the Law condemns you as a lawbreaker. ");
			AddVerse(para3Rev, 0, 10, "Whoever breaks one commandment is guilty of breaking them all. ");
			AddVerse(para3Rev, 0, 11, "For the same one who said, Do not commit adultery, also said, Do not commit murder. Even if you do not commit adultery, you have become a lawbreaker if you commit murder. ");
			AddVerse(para3Rev, 0, 12, "Speak and act as people who will be judged by the law that sets us free. ");
			AddVerse(para3Rev, 0, 13, "For God will not show mercy when he judges the person who has not been merciful; but mercy triumphs over judgment.");

			IScrSection sectionCurr1 = CreateSection(m_genesis, "Warning Against Prejudice");
			IScrTxtPara para1Curr = AddParaToMockedSectionContent(sectionCurr1, ScrStyleNames.Line1);
			AddVerse(para1Curr, 2, 1, "My friends, as believers in our Lord Jesus Christ, the Lord of glory, you must never treat people in different ways according to their outward appearance. ");
			AddVerse(para1Curr, 0, 2, "Suppose a rich man wearing a gold ring and fine clothes comes to ");
			IScrTxtPara para2Curr = AddParaToMockedSectionContent(sectionCurr1, ScrStyleNames.Line2);
			AddVerse(para2Curr, 0, 0, "your meeting, and a poor man in ragged clothes also comes. ");
			AddVerse(para2Curr, 0, 3, "If you show more respect to the well-dressed man and say to him, Have this best seat here, but say to the poor man, Stand over there, or sit here on the floor by my feet,");
			AddVerse(para2Curr, 0, 4, "then you are guilty of ");
			IScrTxtPara para3Curr = AddParaToMockedSectionContent(sectionCurr1, ScrStyleNames.Line3);
			AddVerse(para3Curr, 0, 0, "creating distinctions among yourselves and of making judgments based on evil motives.");
			IScrTxtPara para4Curr = AddParaToMockedSectionContent(sectionCurr1, ScrStyleNames.Line3);
			AddVerse(para4Curr, 0, 5, "Listen, my dear friends! God chose the poor people of this world to be rich in faith and to possess the kingdom which he promised to those who love him. ");
			AddVerse(para4Curr, 0, 6, "But you dishonor the poor! Who are the ones who oppress you and drag you before the judges? The rich! ");
			AddVerse(para4Curr, 0, 7, "They are the ones who speak evil of that good name which has been given to you. ");
			AddVerse(para4Curr, 0, 8, "You will be doing the right thing if you obey the law of the Kingdom, which is found in the scripture, Love your neighbor as you love yourself. ");
			AddVerse(para4Curr, 0, 9, "But if you treat people according to their ");
			IScrTxtPara para5Curr = AddParaToMockedSectionContent(sectionCurr1, ScrStyleNames.Line3);
			AddVerse(para5Curr, 0, 0, "outward appearance, you are guilty of sin, and the Law condemns you as a lawbreaker. ");
			AddVerse(para5Curr, 0, 10, "Whoever breaks one commandment is guilty of breaking them all. ");
			AddVerse(para5Curr, 0, 11, "For the same one who said, Do not commit adultery, also said, Do not commit murder. ");
			IScrTxtPara para6Curr = AddParaToMockedSectionContent(sectionCurr1, ScrStyleNames.Line3);
			AddVerse(para6Curr, 0, 0, "Even if you do not commit adultery, you have become a lawbreaker if you commit murder. ");
			AddVerse(para6Curr, 0, 12, "Speak and act as people who will be judged by the law that sets us free. ");
			AddVerse(para6Curr, 0, 13, "For God will not show mercy when he judges the person who has not been merciful; but mercy triumphs over judgment.");

			m_bookMerger.DetectDifferences(null); // find the diffs for Genesis

			Assert.AreEqual(9, m_bookMerger.Differences.Count);

			while (m_bookMerger.Differences.Count > 0)
			{
				Difference diff = m_bookMerger.Differences.MoveFirst();
				m_bookMerger.ReplaceCurrentWithRevision(diff);
			}

			m_bookMerger.DetectDifferences_ReCheck();
			Assert.AreEqual(0, m_bookMerger.Differences.Count);
		}
		#endregion

		#region Other helper methods
		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// AddVerse to a paragraph saving the character offset with the para at the the start
		/// of the verse.
		/// </summary>
		/// <param name="para">The para.</param>
		/// <param name="chapter">The chapter.</param>
		/// <param name="verse">The verse.</param>
		/// <param name="verseText">The verse text.</param>
		/// <param name="verseToIch">The dictionary from the verse number to character
		/// offset to the start of this verse.</param>
		/// <remarks>The dictionary does not consider the chapter number as part of the key.
		/// So, this method should not be used with data that ranges over multiple chapters.
		/// </remarks>
		/// ------------------------------------------------------------------------------------
		private void AddVerseWithIch(IScrTxtPara para, int chapter, int verse, string verseText,
			Dictionary<int, int> verseToIch)
		{
			// Save the starting index of the verse if it begins with a verse number.
			if (verse != 0)
				verseToIch[verse] = para.Contents.Length;
			AddVerse(para, chapter, verse, verseText);
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Reverts all differences.
		/// </summary>
		/// <param name="fForward">if set to <c>true</c> revert the differences from first to
		/// last.; if <c>false</c> revert the differences from last to first.</param>
		/// ------------------------------------------------------------------------------------
		private void RevertAllDifferences(bool fForward)
		{
			if (fForward)
				m_bookMerger.Differences.MoveFirst();  // reverting from first
			else
			{
				// reverting from the last difference
				m_bookMerger.Differences.CurrentDifferenceIndex = m_bookMerger.Differences.Count - 1;
			}

			// Revert all differences beginning with the current difference.
			for (; m_bookMerger.Differences.Count > 0; )
			{
				Difference diff = m_bookMerger.Differences.CurrentDifference;
				m_bookMerger.ReplaceCurrentWithRevision(diff);
			}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Compares the Current to Revision after reverting all differences. We expect that the
		/// Current will be the same as the Revision.
		/// </summary>
		/// ------------------------------------------------------------------------------------
		private void CompareToRevision()
		{
			Assert.AreEqual(m_genesisRevision.SectionsOS.Count, m_genesis.SectionsOS.Count,
				"Number of sections are not equal.");
			for (int iSection = 0; iSection < m_genesis.SectionsOS.Count; iSection++)
			{
				IScrSection sectionRev = (IScrSection)m_genesisRevision.SectionsOS[iSection];
				IScrSection sectionCur = (IScrSection)m_genesis.SectionsOS[iSection];

				// Compare heading paragraphs.
				Assert.AreEqual(sectionRev.HeadingOA.ParagraphsOS.Count,
					sectionCur.HeadingOA.ParagraphsOS.Count,
					"Count of heading paragraphs in section " + iSection + " are not equal.");
				CompareParas(true, iSection, sectionRev.HeadingOA.ParagraphsOS,
					sectionCur.HeadingOA.ParagraphsOS);

				// Compare content paragraphs.
				Assert.AreEqual(sectionRev.ContentOA.ParagraphsOS.Count,
					sectionCur.ContentOA.ParagraphsOS.Count,
					"Count of content paragraphs in section " + iSection + " are not equal.");
				CompareParas(false, iSection, sectionRev.HeadingOA.ParagraphsOS,
					sectionCur.HeadingOA.ParagraphsOS);
			}
		}

		/// ------------------------------------------------------------------------------------
		/// <summary>
		/// Compares the revision and current paragraphs (can be heading or content paragraphs).
		/// </summary>
		/// <param name="fIsHeading">if set to <c>true</c> comparing heading paragraphs;
		/// if set to <c>false</c> comparing content paragraphs.</param>
		/// <param name="iSection">index of the section</param>
		/// <param name="revParas">The rev paras.</param>
		/// <param name="curParas">The cur paras.</param>
		/// ------------------------------------------------------------------------------------
		private void CompareParas(bool fIsHeading, int iSection, ILcmOwningSequence<IStPara> revParas,
			ILcmOwningSequence<IStPara> curParas)
		{
			for (int iPara = 0; iPara < revParas.Count; iPara++)
			{
				AssertEx.AreTsStringsEqual(((IScrTxtPara)revParas[iPara]).Contents,
					((IScrTxtPara)curParas[iPara]).Contents,
					((fIsHeading) ? "Headings" : "Contents") + " are different in para " + iPara +
					" of section " + iSection);
			}
		}


		#endregion
	}
}
