
| DO NOT EDIT THIS FILE DIRECTLY!
|

| ------------------------------------------------------------
|                TOP-LEVEL WORD
| ------------------------------------------------------------
rule {Top-level cliticless word}
  OrthographicWord = Word
								| percolation
		<OrthographicWord synCat>       = <Word synCat>
		<OrthographicWord morphoSyntax> = <Word morphoSyntax>

rule {Top-level word with one or more proclitics and enclitics}
  OrthographicWord = Proclitics Word Enclitics
								| percolation
		<OrthographicWord synCat>       = <Word synCat>
		<OrthographicWord morphoSyntax> = <Word morphoSyntax>
		<OrthographicWord proclitics morphoSyntax> = <Proclitics morphoSyntax>
		<OrthographicWord enclitics morphoSyntax> = <Enclitics morphoSyntax>
								| drip (pass down)
		<Word synCat>       = <Proclitics synCat>
		<Word synCat>       = <Enclitics synCat>

rule {Top-level word with one or more proclitics}
  OrthographicWord = Proclitics Word
								| percolation
		<OrthographicWord synCat>       = <Word synCat>
		<OrthographicWord morphoSyntax> = <Word morphoSyntax>
		<OrthographicWord proclitics morphoSyntax> = <Proclitics morphoSyntax>
								| drip (pass down)
		<Word synCat>       = <Proclitics synCat>

rule {Top-level word with one or more enclitics}
  OrthographicWord =            Word Enclitics
								| percolation
		<OrthographicWord synCat>       = <Word synCat>
		<OrthographicWord morphoSyntax> = <Word morphoSyntax>
		<OrthographicWord enclitics morphoSyntax> = <Enclitics morphoSyntax>
								| drip (pass down)
		<Word synCat>       = <Enclitics synCat>


| ------------------------------------------------------------
|                CLITICS
| ------------------------------------------------------------
rule {One or more proclitics}
  Proclitics_1 = proclitic (Proclitics_2)
								| percolation
		<Proclitics_1 morphoSyntax> = <proclitic morphoSyntax>
								| drip (pass down)
		<Proclitics_1 synCat>       = <Proclitics_2 synCat>
								| constraints
		<Proclitics_2 morphoSyntax> = <proclitic morphoSyntax>
		<Proclitics_1 synCat>       = <proclitic fromCat>

rule {One or more enclitics}
  Enclitics_1  = (Enclitics_2) enclitic
								| percolation
		<Enclitics_1 morphoSyntax> = <enclitic morphoSyntax>
								| drip (pass down)
		<Enclitics_1 synCat>       = <Enclitics_2 synCat>
								| constraints
		<Enclitics_2 morphoSyntax> = <enclitic morphoSyntax>
		<Enclitics_1 synCat>       = <enclitic fromCat>


| ------------------------------------------------------------
|                WORD
| ------------------------------------------------------------
rule {clitic word}
  Word = clitic
								| percolation
		<Word synCat>       = <clitic rootCat>
		<Word morphoSyntax> = <clitic morphoSyntax>

rule {Fully analyzed word}
  Word = Full
								| percolation
		<Word synCat>       = <Full synCat>
		<Word morphoSyntax> = <Full morphoSyntax>
		<Full> == [requiresInflection : -] /  | doesn't require inflection or
				  [inflected : +]             | is inflected

rule {Partially analyzed word}
  Word = Partial
								| percolation
		<Word synCat>       = <Partial synCat>
		<Word morphoSyntax> = <Partial morphoSyntax>

| ------------------------------------------------------------
|                FULLY ANALYZED WORD PORTION
| ------------------------------------------------------------

rule {Fully analyzed stem with no inflectional template}
  Full = Stem
								| percolation
		<Full synCat>       = <Stem synCat>
		<Full morphoSyntax> = <Stem morphoSyntax>
		<Full stratum>      = <Stem stratum>
		<Full requiresInflection> = <Stem requiresInflection>
						  | constraint
		<Full inflected>    = -  | this Full word category is not inflected
		<Stem blocksInflection> = - | prevent a non-final template from immediately being inflected without any intervening derivation or compounding

rule {Fully analyzed stem with a final inflectional template 102}
  Full =  Stem (103_0)
														 | percolation
  <Full synCat>       = <Stem synCat>
  <Full morphoSyntax> = <Stem morphoSyntax>
  <Full inflected>    = +
  <Full requiresInflection> = -
						  | constraints
  <Stem blocksInflection> = - | prevent a non-final template from immediately being inflected without any intervening derivation or compounding
{
  <Stem  synCat>       = 81 /
  <Stem  synCat>       =  82 /
  <Stem  synCat>       =  85 /
  <Stem  synCat>       =  88 /
  <Stem  synCat>       =  91 /
  <Stem  synCat>       =  94
}
  <Stem morphoSyntax>    = <103_0 morphoSyntax>
  <Stem synCat>          = <103_0 envCat>   | allomorph
  <Stem exception>       = <103_0 fromException>
  <Stem inflectionClass> = <103_0 inflectionClass>
  <Full stemNameInfo morphoSyntax> = <103_0 morphoSyntax>
rule {Fully analyzed stem with a final inflectional template 156}
  Full =  (181_0) Stem 180_0
														 | percolation
  <Full synCat>       = <Stem synCat>
  <Full morphoSyntax> = <Stem morphoSyntax>
  <Full inflected>    = +
  <Full requiresInflection> = -
						  | constraints
  <Stem blocksInflection> = - | prevent a non-final template from immediately being inflected without any intervening derivation or compounding
  <Stem  synCat>       = 153
  <Stem morphoSyntax>    = <181_0 morphoSyntax>
  <Stem synCat>          = <181_0 envCat>   | allomorph
  <Stem exception>       = <181_0 fromException>
  <Stem inflectionClass> = <181_0 inflectionClass>
  <Full stemNameInfo morphoSyntax> = <181_0 morphoSyntax>
  <Stem morphoSyntax>    = <180_0 morphoSyntax>
  <Stem synCat>          = <180_0 envCat>   | allomorph
  <Stem exception>       = <180_0 fromException>
  <Stem inflectionClass> = <180_0 inflectionClass>
  <Full stemNameInfo morphoSyntax> = <180_0 morphoSyntax>
rule {Fully analyzed stem with a final inflectional template 166}
  Full =  (181_0) Stem 167_0
														 | percolation
  <Full synCat>       = <Stem synCat>
  <Full morphoSyntax> = <Stem morphoSyntax>
  <Full inflected>    = +
  <Full requiresInflection> = -
						  | constraints
  <Stem blocksInflection> = - | prevent a non-final template from immediately being inflected without any intervening derivation or compounding
  <Stem  synCat>       = 163
  <Stem morphoSyntax>    = <181_0 morphoSyntax>
  <Stem synCat>          = <181_0 envCat>   | allomorph
  <Stem exception>       = <181_0 fromException>
  <Stem inflectionClass> = <181_0 inflectionClass>
  <Full stemNameInfo morphoSyntax> = <181_0 morphoSyntax>
  <Stem morphoSyntax>    = <167_0 morphoSyntax>
  <Stem synCat>          = <167_0 envCat>   | allomorph
  <Stem exception>       = <167_0 fromException>
  <Stem inflectionClass> = <167_0 inflectionClass>
  <Full stemNameInfo morphoSyntax> = <167_0 morphoSyntax>
rule {Fully analyzed stem with a final inflectional template 171}
  Full =  (181_0) 182_1 Stem 180_0
														 | percolation
  <Full synCat>       = <Stem synCat>
  <Full morphoSyntax> = <Stem morphoSyntax>
  <Full inflected>    = +
  <Full requiresInflection> = -
						  | constraints
  <Stem blocksInflection> = - | prevent a non-final template from immediately being inflected without any intervening derivation or compounding
  <Stem  synCat>       = 168
  <Stem morphoSyntax>    = <181_0 morphoSyntax>
  <Stem synCat>          = <181_0 envCat>   | allomorph
  <Stem exception>       = <181_0 fromException>
  <Stem inflectionClass> = <181_0 inflectionClass>
  <Full stemNameInfo morphoSyntax> = <181_0 morphoSyntax>
  <Stem morphoSyntax>    = <182_1 morphoSyntax>
  <Stem synCat>          = <182_1 envCat>   | allomorph
  <Stem exception>       = <182_1 fromException>
  <Stem inflectionClass> = <182_1 inflectionClass>
  <Full stemNameInfo morphoSyntax> = <182_1 morphoSyntax>
  <Stem morphoSyntax>    = <180_0 morphoSyntax>
  <Stem synCat>          = <180_0 envCat>   | allomorph
  <Stem exception>       = <180_0 fromException>
  <Stem inflectionClass> = <180_0 inflectionClass>
  <Full stemNameInfo morphoSyntax> = <180_0 morphoSyntax>
rule {Fully analyzed stem with a final inflectional template 175}
  Full =  (181_0) 182_1 Stem 180_0
														 | percolation
  <Full synCat>       = <Stem synCat>
  <Full morphoSyntax> = <Stem morphoSyntax>
  <Full inflected>    = +
  <Full requiresInflection> = -
						  | constraints
  <Stem blocksInflection> = - | prevent a non-final template from immediately being inflected without any intervening derivation or compounding
  <Stem  synCat>       = 172
  <Stem morphoSyntax>    = <181_0 morphoSyntax>
  <Stem synCat>          = <181_0 envCat>   | allomorph
  <Stem exception>       = <181_0 fromException>
  <Stem inflectionClass> = <181_0 inflectionClass>
  <Full stemNameInfo morphoSyntax> = <181_0 morphoSyntax>
  <Stem morphoSyntax>    = <182_1 morphoSyntax>
  <Stem synCat>          = <182_1 envCat>   | allomorph
  <Stem exception>       = <182_1 fromException>
  <Stem inflectionClass> = <182_1 inflectionClass>
  <Full stemNameInfo morphoSyntax> = <182_1 morphoSyntax>
  <Stem morphoSyntax>    = <180_0 morphoSyntax>
  <Stem synCat>          = <180_0 envCat>   | allomorph
  <Stem exception>       = <180_0 fromException>
  <Stem inflectionClass> = <180_0 inflectionClass>
  <Full stemNameInfo morphoSyntax> = <180_0 morphoSyntax>
| ------------------------------------------------------------
|                STEM
| ------------------------------------------------------------

rule {Stem consisting of a single root}
  Stem = root
					| percolation
		<Stem synCat>          = <root rootCat>
		<Stem morphoSyntax>    = <root morphoSyntax>
		<Stem inflectionClass> = <root inflectionClass>
		<Stem stratum>         = <root stratum>
		<Stem requiresInflection> = <root requiresInflection>
		<Stem stemName>   = <root stemName>
		<Stem exception>       = <root exception>
		<root> == ~[rootCat : unknown]  | root category has to be overt


rule {Stem with a derivational prefix}
  Stem_1 = derivPfx Stem_2
								| percolation
		<Stem_1 synCat>           = <Stem_2 synCat> | default to Stem 2 (in case deriv prefix has no category)
		<Stem_1 synCat>           <= <derivPfx toCat> | use priority union to override anything in Stem_2
		<Stem_1 morphoSyntax>     = <Stem_2 morphoSyntax>
		<Stem_1 stratum>          = <derivPfx stratum>
		<Stem_1 requiresInflection> = <Stem_2 requiresInflection> | default to stem 2 (in case deriv prefix has no to category)
		<Stem_1 requiresInflection> <= <derivPfx requiresInflection> | use deriv prefix when it has a category
		<Stem_1 exception>        = <Stem_2 exception>
		<Stem_1 stemName>         = <Stem_2 stemName>
		<Stem_1 morphoSyntax>    <= <derivPfx toMorphoSyntax>
		<Stem_1 inflectionClass> = <Stem_2 inflectionClass>
		<Stem_1 inflectionClass> <= <derivPfx toInflectionClass>
		<Stem_1 exception>       <= <derivPfx toException>
		<Stem_1 blocksInflection> = - | This stem can now be inflected
								| constraints
		<Stem_2 morphoSyntax>     = <derivPfx fromMorphoSyntax>
		<Stem_2 inflectionClass>  = <derivPfx fromInflectionClass>
		<Stem_2 stemName>         = <derivPfx stemName>
		<Stem_2 exception>        = <derivPfx fromException>
		{
		
		<Stem_2 synCat>           = <derivPfx fromCat>
		<Stem_2 synCat>           = <derivPfx envCat>
		/
		<derivPfx fromCat>        = 6
		<derivPfx envCat>         = 6
{
	  
		<Stem_2 synCat>           = 6 /
		<Stem_2 synCat>           = 7 /
		<Stem_2 synCat>           = 10
}

		/
		<derivPfx fromCat>        = 21
		<derivPfx envCat>         = 21
{
	  
		<Stem_2 synCat>           = 21 /
		<Stem_2 synCat>           = 22 /
		<Stem_2 synCat>           = 25 /
		<Stem_2 synCat>           = 28 /
		<Stem_2 synCat>           = 31 /
		<Stem_2 synCat>           = 34 /
		<Stem_2 synCat>           = 37 /
		<Stem_2 synCat>           = 40 /
		<Stem_2 synCat>           = 43 /
		<Stem_2 synCat>           = 46 /
		<Stem_2 synCat>           = 49 /
		<Stem_2 synCat>           = 52 /
		<Stem_2 synCat>           = 55 /
		<Stem_2 synCat>           = 58 /
		<Stem_2 synCat>           = 61 /
		<Stem_2 synCat>           = 64
}

		/
		<derivPfx fromCat>        = 69
		<derivPfx envCat>         = 69
{
	  
		<Stem_2 synCat>           = 69 /
		<Stem_2 synCat>           = 70 /
		<Stem_2 synCat>           = 73
}

		/
		<derivPfx fromCat>        = 81
		<derivPfx envCat>         = 81
{
	  
		<Stem_2 synCat>           = 81 /
		<Stem_2 synCat>           = 82 /
		<Stem_2 synCat>           = 85 /
		<Stem_2 synCat>           = 88 /
		<Stem_2 synCat>           = 91 /
		<Stem_2 synCat>           = 94
}

		/
		<derivPfx fromCat>        = 110
		<derivPfx envCat>         = 110
{
	  
		<Stem_2 synCat>           = 110 /
		<Stem_2 synCat>           = 111 /
		<Stem_2 synCat>           = 114 /
		<Stem_2 synCat>           = 117 /
		<Stem_2 synCat>           = 120 /
		<Stem_2 synCat>           = 123 /
		<Stem_2 synCat>           = 126
}

		/
		<derivPfx fromCat>        = 131
		<derivPfx envCat>         = 131
{
	  
		<Stem_2 synCat>           = 131 /
		<Stem_2 synCat>           = 132 /
		<Stem_2 synCat>           = 133 /
		<Stem_2 synCat>           = 136 /
		<Stem_2 synCat>           = 141
}

		/
		<derivPfx fromCat>        = 132
		<derivPfx envCat>         = 132
{
	  
		<Stem_2 synCat>           = 132 /
		<Stem_2 synCat>           = 133 /
		<Stem_2 synCat>           = 136
}

		/
		<derivPfx fromCat>        = 146
		<derivPfx envCat>         = 146
{
	  
		<Stem_2 synCat>           = 146 /
		<Stem_2 synCat>           = 147 /
		<Stem_2 synCat>           = 150 /
		<Stem_2 synCat>           = 153 /
		<Stem_2 synCat>           = 157 /
		<Stem_2 synCat>           = 160 /
		<Stem_2 synCat>           = 163 /
		<Stem_2 synCat>           = 168 /
		<Stem_2 synCat>           = 172
}

	  }

rule {Stem with a derivational suffix}
  Stem_1 =          Stem_2 derivSfx
								| percolation
		<Stem_1 synCat>           = <Stem_2 synCat> | default to Stem 2 (in case deriv suffix has no to category)
		<Stem_1 synCat>           <= <derivSfx toCat> | use priority union to override anything in Stem_2
		<Stem_1 morphoSyntax>     = <Stem_2 morphoSyntax>
		<Stem_1 stratum>          = <derivSfx stratum>
		<Stem_1 requiresInflection> = <Stem_2 requiresInflection> | default to stem 2 (in case deriv suffix has no to category)
		<Stem_1 requiresInflection> <= <derivSfx requiresInflection> | use deriv suffix when it has a category
		<Stem_1 exception>        = <Stem_2 exception>
		<Stem_1 stemName>         = <Stem_2 stemName>
		<Stem_1 morphoSyntax>    <= <derivSfx toMorphoSyntax>
		<Stem_1 inflectionClass> = <Stem_2 inflectionClass>
		<Stem_1 inflectionClass> <= <derivSfx toInflectionClass>
		<Stem_1 exception>       <= <derivSfx toException>
		<Stem_1 blocksInflection> = - | This stem can now be inflected
								| constraints
		<Stem_2 morphoSyntax>     = <derivSfx fromMorphoSyntax>
		<Stem_2 inflectionClass>  = <derivSfx fromInflectionClass>
		<Stem_2 stemName>         = <derivSfx stemName>
		<Stem_2 exception>        = <derivSfx fromException>
		{
		
		<Stem_2 synCat>           = <derivSfx fromCat>
		<Stem_2 synCat>           = <derivSfx envCat>
		/
		<derivSfx fromCat>        = 6
		<derivSfx envCat>         = 6
{
	  
		<Stem_2 synCat>           = 6 /
		<Stem_2 synCat>           = 7 /
		<Stem_2 synCat>           = 10
}

		/
		<derivSfx fromCat>        = 21
		<derivSfx envCat>         = 21
{
	  
		<Stem_2 synCat>           = 21 /
		<Stem_2 synCat>           = 22 /
		<Stem_2 synCat>           = 25 /
		<Stem_2 synCat>           = 28 /
		<Stem_2 synCat>           = 31 /
		<Stem_2 synCat>           = 34 /
		<Stem_2 synCat>           = 37 /
		<Stem_2 synCat>           = 40 /
		<Stem_2 synCat>           = 43 /
		<Stem_2 synCat>           = 46 /
		<Stem_2 synCat>           = 49 /
		<Stem_2 synCat>           = 52 /
		<Stem_2 synCat>           = 55 /
		<Stem_2 synCat>           = 58 /
		<Stem_2 synCat>           = 61 /
		<Stem_2 synCat>           = 64
}

		/
		<derivSfx fromCat>        = 69
		<derivSfx envCat>         = 69
{
	  
		<Stem_2 synCat>           = 69 /
		<Stem_2 synCat>           = 70 /
		<Stem_2 synCat>           = 73
}

		/
		<derivSfx fromCat>        = 81
		<derivSfx envCat>         = 81
{
	  
		<Stem_2 synCat>           = 81 /
		<Stem_2 synCat>           = 82 /
		<Stem_2 synCat>           = 85 /
		<Stem_2 synCat>           = 88 /
		<Stem_2 synCat>           = 91 /
		<Stem_2 synCat>           = 94
}

		/
		<derivSfx fromCat>        = 110
		<derivSfx envCat>         = 110
{
	  
		<Stem_2 synCat>           = 110 /
		<Stem_2 synCat>           = 111 /
		<Stem_2 synCat>           = 114 /
		<Stem_2 synCat>           = 117 /
		<Stem_2 synCat>           = 120 /
		<Stem_2 synCat>           = 123 /
		<Stem_2 synCat>           = 126
}

		/
		<derivSfx fromCat>        = 131
		<derivSfx envCat>         = 131
{
	  
		<Stem_2 synCat>           = 131 /
		<Stem_2 synCat>           = 132 /
		<Stem_2 synCat>           = 133 /
		<Stem_2 synCat>           = 136 /
		<Stem_2 synCat>           = 141
}

		/
		<derivSfx fromCat>        = 132
		<derivSfx envCat>         = 132
{
	  
		<Stem_2 synCat>           = 132 /
		<Stem_2 synCat>           = 133 /
		<Stem_2 synCat>           = 136
}

		/
		<derivSfx fromCat>        = 146
		<derivSfx envCat>         = 146
{
	  
		<Stem_2 synCat>           = 146 /
		<Stem_2 synCat>           = 147 /
		<Stem_2 synCat>           = 150 /
		<Stem_2 synCat>           = 153 /
		<Stem_2 synCat>           = 157 /
		<Stem_2 synCat>           = 160 /
		<Stem_2 synCat>           = 163 /
		<Stem_2 synCat>           = 168 /
		<Stem_2 synCat>           = 172
}

	  }
rule {Stem with a derivational circumfix}
		 Stem_1 = derivCircumPfx Stem_2 derivCircumSfx
		 | percolation
		 <Stem_1 synCat>           = <Stem_2 synCat> | default to Stem 2 (in case deriv circumfixes have no to category)
		 <Stem_1 synCat>           <= <derivCircumPfx toCat> | use priority union to override anything in Stem_2
		 <Stem_1 synCat>           <= <derivCircumSfx toCat>
		 <Stem_1 morphoSyntax>     = <Stem_2 morphoSyntax>
		 <Stem_1 stratum>          = <derivCircumPfx stratum>
		 <Stem_1 stratum>          = <derivCircumSfx stratum>
		 <Stem_1 requiresInflection> = <Stem_2 requiresInflection> | default to stem 2 (in case deriv prefix has no category)
		 <Stem_1 requiresInflection> <= <derivCircumPfx requiresInflection> | use deriv prefix when it has a category
		 <Stem_1 requiresInflection> <= <derivCircumSfx requiresInflection> | use deriv suffix when it has a category
		 <Stem_1 exception>        = <Stem_2 exception>
		 <Stem_1 stemName>         = <Stem_2 stemName>
		 <Stem_1 morphoSyntax>    <= <derivCircumPfx toMorphoSyntax>
		 <Stem_1 morphoSyntax>    <= <derivCircumSfx toMorphoSyntax>
		 <Stem_1 inflectionClass> = <Stem_2 inflectionClass>
		 <Stem_1 inflectionClass> <= <derivCircumPfx toInflectionClass>
		 <Stem_1 inflectionClass> <= <derivCircumSfx toInflectionClass>
		 <Stem_1 exception>       <= <derivCircumPfx toException>
		 <Stem_1 exception>       <= <derivCircumSfx toException>
		 <Stem_1 blocksInflection> = - | This stem can now be inflected
		 | constraints
		 <Stem_2 morphoSyntax>     = <derivCircumPfx fromMorphoSyntax>
		 <Stem_2 morphoSyntax>     = <derivCircumSfx fromMorphoSyntax>
		 <Stem_2 inflectionClass>  = <derivCircumPfx fromInflectionClass>
		 <Stem_2 inflectionClass>  = <derivCircumSfx fromInflectionClass>
		 <Stem_2 stemName>         = <derivCircumPfx stemName>
		 <Stem_2 stemName>         = <derivCircumSfx stemName>
		 <Stem_2 exception>        = <derivCircumPfx fromException>
		 <Stem_2 exception>        = <derivCircumSfx fromException>
	  {
	  
		<Stem_2 synCat>           = <derivCircumPfx fromCat>
		<Stem_2 synCat>           = <derivCircumPfx envCat>
		<Stem_2 synCat>           = <derivCircumSfx fromCat>
		<Stem_2 synCat>           = <derivCircumSfx envCat>
		/
		<derivCircumPfx fromCat>        = 6
		<derivCircumPfx envCat>         = 6
		<derivCircumSfx fromCat>        = 6
		<derivCircumSfx envCat>         = 6
{
	  
		<Stem_2 synCat>           = 6 /
		<Stem_2 synCat>           = 7 /
		<Stem_2 synCat>           = 10
}

		/
		<derivCircumPfx fromCat>        = 21
		<derivCircumPfx envCat>         = 21
		<derivCircumSfx fromCat>        = 21
		<derivCircumSfx envCat>         = 21
{
	  
		<Stem_2 synCat>           = 21 /
		<Stem_2 synCat>           = 22 /
		<Stem_2 synCat>           = 25 /
		<Stem_2 synCat>           = 28 /
		<Stem_2 synCat>           = 31 /
		<Stem_2 synCat>           = 34 /
		<Stem_2 synCat>           = 37 /
		<Stem_2 synCat>           = 40 /
		<Stem_2 synCat>           = 43 /
		<Stem_2 synCat>           = 46 /
		<Stem_2 synCat>           = 49 /
		<Stem_2 synCat>           = 52 /
		<Stem_2 synCat>           = 55 /
		<Stem_2 synCat>           = 58 /
		<Stem_2 synCat>           = 61 /
		<Stem_2 synCat>           = 64
}

		/
		<derivCircumPfx fromCat>        = 69
		<derivCircumPfx envCat>         = 69
		<derivCircumSfx fromCat>        = 69
		<derivCircumSfx envCat>         = 69
{
	  
		<Stem_2 synCat>           = 69 /
		<Stem_2 synCat>           = 70 /
		<Stem_2 synCat>           = 73
}

		/
		<derivCircumPfx fromCat>        = 81
		<derivCircumPfx envCat>         = 81
		<derivCircumSfx fromCat>        = 81
		<derivCircumSfx envCat>         = 81
{
	  
		<Stem_2 synCat>           = 81 /
		<Stem_2 synCat>           = 82 /
		<Stem_2 synCat>           = 85 /
		<Stem_2 synCat>           = 88 /
		<Stem_2 synCat>           = 91 /
		<Stem_2 synCat>           = 94
}

		/
		<derivCircumPfx fromCat>        = 110
		<derivCircumPfx envCat>         = 110
		<derivCircumSfx fromCat>        = 110
		<derivCircumSfx envCat>         = 110
{
	  
		<Stem_2 synCat>           = 110 /
		<Stem_2 synCat>           = 111 /
		<Stem_2 synCat>           = 114 /
		<Stem_2 synCat>           = 117 /
		<Stem_2 synCat>           = 120 /
		<Stem_2 synCat>           = 123 /
		<Stem_2 synCat>           = 126
}

		/
		<derivCircumPfx fromCat>        = 131
		<derivCircumPfx envCat>         = 131
		<derivCircumSfx fromCat>        = 131
		<derivCircumSfx envCat>         = 131
{
	  
		<Stem_2 synCat>           = 131 /
		<Stem_2 synCat>           = 132 /
		<Stem_2 synCat>           = 133 /
		<Stem_2 synCat>           = 136 /
		<Stem_2 synCat>           = 141
}

		/
		<derivCircumPfx fromCat>        = 132
		<derivCircumPfx envCat>         = 132
		<derivCircumSfx fromCat>        = 132
		<derivCircumSfx envCat>         = 132
{
	  
		<Stem_2 synCat>           = 132 /
		<Stem_2 synCat>           = 133 /
		<Stem_2 synCat>           = 136
}

		/
		<derivCircumPfx fromCat>        = 146
		<derivCircumPfx envCat>         = 146
		<derivCircumSfx fromCat>        = 146
		<derivCircumSfx envCat>         = 146
{
	  
		<Stem_2 synCat>           = 146 /
		<Stem_2 synCat>           = 147 /
		<Stem_2 synCat>           = 150 /
		<Stem_2 synCat>           = 153 /
		<Stem_2 synCat>           = 157 /
		<Stem_2 synCat>           = 160 /
		<Stem_2 synCat>           = 163 /
		<Stem_2 synCat>           = 168 /
		<Stem_2 synCat>           = 172
}

	  }
	  
rule {Stem with a derivational circumfix where the rightmost part is an infix (and so may end up as a prefix}
		 Stem_1 = derivCircumPfx_1 derivCircumPfx_2 Stem_2
		 | percolation
		 <Stem_1 synCat>           = <Stem_2 synCat> | default to Stem 2 (in case deriv circumfixes have no to category)
		 <Stem_1 synCat>           <= <derivCircumPfx_1 toCat> | use priority union to override anything in Stem_2
		 <Stem_1 synCat>           <= <derivCircumPfx_2 toCat>
		 <Stem_1 morphoSyntax>     = <Stem_2 morphoSyntax>
		 <Stem_1 stratum>          = <derivCircumPfx_1 stratum>
		 <Stem_1 stratum>          = <derivCircumPfx_2 stratum>
		 <Stem_1 requiresInflection> = <Stem_2 requiresInflection> | default to stem 2 (in case deriv prefix has no category)
		 <Stem_1 requiresInflection> <= <derivCircumPfx_1 requiresInflection> | use deriv prefix when it has a category
		 <Stem_1 requiresInflection> <= <derivCircumPfx_2 requiresInflection> | use deriv suffix when it has a category
		 <Stem_1 exception>        = <Stem_2 exception>
		 <Stem_1 stemName>         = <Stem_2 stemName>
		 <Stem_1 morphoSyntax>    <= <derivCircumPfx_1 toMorphoSyntax>
		 <Stem_1 morphoSyntax>    <= <derivCircumPfx_2 toMorphoSyntax>
		 <Stem_1 inflectionClass> = <Stem_2 inflectionClass>
		 <Stem_1 inflectionClass> <= <derivCircumPfx_1 toInflectionClass>
		 <Stem_1 inflectionClass> <= <derivCircumPfx_2 toInflectionClass>
		 <Stem_1 exception>       <= <derivCircumPfx_1 toException>
		 <Stem_1 exception>       <= <derivCircumPfx_2 toException>
		 <Stem_1 blocksInflection> = - | This stem can now be inflected
		 | constraints
		 <Stem_2 morphoSyntax>     = <derivCircumPfx_1 fromMorphoSyntax>
		 <Stem_2 morphoSyntax>     = <derivCircumPfx_2 fromMorphoSyntax>
		 <Stem_2 inflectionClass>  = <derivCircumPfx_1 fromInflectionClass>
		 <Stem_2 inflectionClass>  = <derivCircumPfx_2 fromInflectionClass>
		 <Stem_2 stemName>         = <derivCircumPfx_1 stemName>
		 <Stem_2 stemName>         = <derivCircumPfx_2 stemName>
		 <Stem_2 exception>        = <derivCircumPfx_1 fromException>
		 <Stem_2 exception>        = <derivCircumPfx_2 fromException>
		 | rightmost "prefix" must be an infix
		 <derivCircumPfx_2> == [morphType : infix]
	  {
	  
		<Stem_2 synCat>           = <derivCircumPfx_1 fromCat>
		<Stem_2 synCat>           = <derivCircumPfx_1 envCat>
		<Stem_2 synCat>           = <derivCircumPfx_2 fromCat>
		<Stem_2 synCat>           = <derivCircumPfx_2 envCat>
		/
		<derivCircumPfx_1 fromCat>        = 6
		<derivCircumPfx_1 envCat>         = 6
		<derivCircumPfx_2 fromCat>        = 6
		<derivCircumPfx_2 envCat>         = 6
{
	  
		<Stem_2 synCat>           = 6 /
		<Stem_2 synCat>           = 7 /
		<Stem_2 synCat>           = 10
}

		/
		<derivCircumPfx_1 fromCat>        = 21
		<derivCircumPfx_1 envCat>         = 21
		<derivCircumPfx_2 fromCat>        = 21
		<derivCircumPfx_2 envCat>         = 21
{
	  
		<Stem_2 synCat>           = 21 /
		<Stem_2 synCat>           = 22 /
		<Stem_2 synCat>           = 25 /
		<Stem_2 synCat>           = 28 /
		<Stem_2 synCat>           = 31 /
		<Stem_2 synCat>           = 34 /
		<Stem_2 synCat>           = 37 /
		<Stem_2 synCat>           = 40 /
		<Stem_2 synCat>           = 43 /
		<Stem_2 synCat>           = 46 /
		<Stem_2 synCat>           = 49 /
		<Stem_2 synCat>           = 52 /
		<Stem_2 synCat>           = 55 /
		<Stem_2 synCat>           = 58 /
		<Stem_2 synCat>           = 61 /
		<Stem_2 synCat>           = 64
}

		/
		<derivCircumPfx_1 fromCat>        = 69
		<derivCircumPfx_1 envCat>         = 69
		<derivCircumPfx_2 fromCat>        = 69
		<derivCircumPfx_2 envCat>         = 69
{
	  
		<Stem_2 synCat>           = 69 /
		<Stem_2 synCat>           = 70 /
		<Stem_2 synCat>           = 73
}

		/
		<derivCircumPfx_1 fromCat>        = 81
		<derivCircumPfx_1 envCat>         = 81
		<derivCircumPfx_2 fromCat>        = 81
		<derivCircumPfx_2 envCat>         = 81
{
	  
		<Stem_2 synCat>           = 81 /
		<Stem_2 synCat>           = 82 /
		<Stem_2 synCat>           = 85 /
		<Stem_2 synCat>           = 88 /
		<Stem_2 synCat>           = 91 /
		<Stem_2 synCat>           = 94
}

		/
		<derivCircumPfx_1 fromCat>        = 110
		<derivCircumPfx_1 envCat>         = 110
		<derivCircumPfx_2 fromCat>        = 110
		<derivCircumPfx_2 envCat>         = 110
{
	  
		<Stem_2 synCat>           = 110 /
		<Stem_2 synCat>           = 111 /
		<Stem_2 synCat>           = 114 /
		<Stem_2 synCat>           = 117 /
		<Stem_2 synCat>           = 120 /
		<Stem_2 synCat>           = 123 /
		<Stem_2 synCat>           = 126
}

		/
		<derivCircumPfx_1 fromCat>        = 131
		<derivCircumPfx_1 envCat>         = 131
		<derivCircumPfx_2 fromCat>        = 131
		<derivCircumPfx_2 envCat>         = 131
{
	  
		<Stem_2 synCat>           = 131 /
		<Stem_2 synCat>           = 132 /
		<Stem_2 synCat>           = 133 /
		<Stem_2 synCat>           = 136 /
		<Stem_2 synCat>           = 141
}

		/
		<derivCircumPfx_1 fromCat>        = 132
		<derivCircumPfx_1 envCat>         = 132
		<derivCircumPfx_2 fromCat>        = 132
		<derivCircumPfx_2 envCat>         = 132
{
	  
		<Stem_2 synCat>           = 132 /
		<Stem_2 synCat>           = 133 /
		<Stem_2 synCat>           = 136
}

		/
		<derivCircumPfx_1 fromCat>        = 146
		<derivCircumPfx_1 envCat>         = 146
		<derivCircumPfx_2 fromCat>        = 146
		<derivCircumPfx_2 envCat>         = 146
{
	  
		<Stem_2 synCat>           = 146 /
		<Stem_2 synCat>           = 147 /
		<Stem_2 synCat>           = 150 /
		<Stem_2 synCat>           = 153 /
		<Stem_2 synCat>           = 157 /
		<Stem_2 synCat>           = 160 /
		<Stem_2 synCat>           = 163 /
		<Stem_2 synCat>           = 168 /
		<Stem_2 synCat>           = 172
}

	  }
	  
rule {Stem via compound rule 7130}
  Stem_1 = Stem_2 Stem_3
                                | percolation
		<Stem_1 synCat>       = 153 

		<Stem_1 requiresInflection> = +
		<Stem_1 inflected> = -
						
		<Stem_1 inflectionClass>       = 179
		<Stem_1 blocksInflection> = - | This stem can now be inflected
						  | constraints

				{
		<Stem_2 synCat> =  81 /
		<Stem_2 synCat>           = 82 /
		<Stem_2 synCat>           = 85 /
		<Stem_2 synCat>           = 88 /
		<Stem_2 synCat>           = 91 /
		<Stem_2 synCat>           = 94 }
								
		<Stem_3 synCat> = 73
rule {Stem via compound rule 7134}
  Stem_1 = Stem_2 Stem_3
                                | percolation
		<Stem_1 synCat>       = 153 

		<Stem_1 requiresInflection> = +
		<Stem_1 inflected> = -
						
		<Stem_1 inflectionClass>       = 179
		<Stem_1 blocksInflection> = - | This stem can now be inflected
						  | constraints

		<Stem_2 synCat> = 				73
				{
		<Stem_3 synCat> =  81 /
		<Stem_3 synCat>           = 82 /
		<Stem_3 synCat>           = 85 /
		<Stem_3 synCat>           = 88 /
		<Stem_3 synCat>           = 91 /
		<Stem_3 synCat>           = 94 }
				
rule {Stem via compound rule 7139}
  Stem_1 = Stem_2 Stem_3
                                | percolation
		<Stem_1 morphoSyntax> = <Stem_3 morphoSyntax>
		<Stem_1 synCat> = <Stem_3 synCat>
		<Stem_1 requiresInflection> = <Stem_3 requiresInflection>
		<Stem_1 inflectionClass> = <Stem_3 inflectionClass>
		<Stem_1 exception> = <Stem_3 exception>
			   | for stem names, use priority union to handle case of compound within a compound; last one wins
		<Stem_1 stemName>   <= <Stem_3 stemName>

		<Stem_1 blocksInflection> = - | This stem can now be inflected
						  | constraints

		<Stem_2 synCat> = 				70
				{
		<Stem_3 synCat> =  81 /
		<Stem_3 synCat>           = 82 /
		<Stem_3 synCat>           = 85 /
		<Stem_3 synCat>           = 88 /
		<Stem_3 synCat>           = 91 /
		<Stem_3 synCat>           = 94 }
				
rule {Stem via compound rule 7144}
  Stem_1 = Stem_2 Stem_3
                                | percolation
		<Stem_1 morphoSyntax> = <Stem_2 morphoSyntax>
		<Stem_1 synCat> = <Stem_2 synCat>
		<Stem_1 requiresInflection> = <Stem_2 requiresInflection>
		<Stem_1 inflectionClass> = <Stem_2 inflectionClass>
		<Stem_1 exception> = <Stem_2 exception>
			   | for stem names, use priority union to handle case of compound within a compound; last one wins
		<Stem_1 stemName>   <= <Stem_2 stemName>

		<Stem_1 blocksInflection> = - | This stem can now be inflected
						  | constraints

				{
		<Stem_2 synCat> =  146 /
		<Stem_2 synCat>           = 147 /
		<Stem_2 synCat>           = 150 /
		<Stem_2 synCat>           = 153 /
		<Stem_2 synCat>           = 157 /
		<Stem_2 synCat>           = 160 /
		<Stem_2 synCat>           = 163 /
		<Stem_2 synCat>           = 168 /
		<Stem_2 synCat>           = 172 }
								
		<Stem_3 synCat> = 73
rule {Stem via compound rule 7148}
  Stem_1 = Stem_2 Stem_3
                                | percolation
		<Stem_1 morphoSyntax> = <Stem_3 morphoSyntax>
		<Stem_1 synCat> = <Stem_3 synCat>
		<Stem_1 requiresInflection> = <Stem_3 requiresInflection>
		<Stem_1 inflectionClass> = <Stem_3 inflectionClass>
		<Stem_1 exception> = <Stem_3 exception>
			   | for stem names, use priority union to handle case of compound within a compound; last one wins
		<Stem_1 stemName>   <= <Stem_3 stemName>

		<Stem_1 blocksInflection> = - | This stem can now be inflected
						  | constraints

				{
		<Stem_2 synCat> =  81 /
		<Stem_2 synCat>           = 82 /
		<Stem_2 synCat>           = 85 /
		<Stem_2 synCat>           = 88 /
		<Stem_2 synCat>           = 91 /
		<Stem_2 synCat>           = 94 }
								
		<Stem_3 synCat> = 168
rule {Stem via compound rule 7152}
  Stem_1 = Stem_2 Stem_3
                                | percolation
		<Stem_1 morphoSyntax> = <Stem_3 morphoSyntax>
		<Stem_1 synCat> = <Stem_3 synCat>
		<Stem_1 requiresInflection> = <Stem_3 requiresInflection>
		<Stem_1 inflectionClass> = <Stem_3 inflectionClass>
		<Stem_1 exception> = <Stem_3 exception>
			   | for stem names, use priority union to handle case of compound within a compound; last one wins
		<Stem_1 stemName>   <= <Stem_3 stemName>

		<Stem_1 blocksInflection> = - | This stem can now be inflected
						  | constraints

				{
		<Stem_2 synCat> =  81 /
		<Stem_2 synCat>           = 82 /
		<Stem_2 synCat>           = 85 /
		<Stem_2 synCat>           = 88 /
		<Stem_2 synCat>           = 91 /
		<Stem_2 synCat>           = 94 }
								
		<Stem_3 synCat> = 153
| ------------------------------------------------------------
|                PARTIALLY ANALYZED WORD PORTION
| ------------------------------------------------------------

			  | an unmarked root
rule {A root unmarked for category is a partial analysis}
Partial = root
								| percolation
  <Partial synCat> = <root rootCat>
								| constraint
  <root rootCat> = unknown

			  | affixes on an unmarked root
rule {One or more prefixes and suffixes on an unmarked stem}
Partial_1 = Prefs Partial_2 Suffs
								| percolation
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraint
  <Partial_2 synCat> = unknown

			  | prefixes on an unmarked root
rule {One or more prefixes on an unmarked stem}
Partial_1 = Prefs Partial_2
								| percolation
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraint
  <Partial_2 synCat> = unknown

			  | suffixes on an unmarked root
rule {One or more suffixes on an unmarked stem}
Partial_1 = Partial_2 Suffs
								| percolation
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraint
  <Partial_2 synCat> = unknown

rule {Derivational circumfix on an unmarked stem}
Partial_1 = derivCircumPfx Partial_2 derivCircumSfx
								| percolation
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraint
  <Partial_2 synCat> = unknown
rule {Derivational circumfix on an unmarked stem where second is an infix}
Partial_1 = derivCircumPfx_1 derivCircumPfx_2 Partial_2
								 | percolation
  <Partial_1 synCat> = <Partial_2 synCat>
								 | constraint
  <Partial_2 synCat> = unknown
								 | rightmost "prefix" must be an infix
  <derivCircumPfx_2> == [morphType : infix]

rule {Unclassifed circumfix on an unmarked stem}
Partial_1 = circumPfx Partial_2 circumSfx
								| percolation
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraint
  <Partial_2 synCat> = unknown
  rule {Unclassifed circumfix on an unmarked stem where second is an infix}
  Partial_1 = circumPfx_1 circumPfx_2 Partial_2
								| percolation
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraint
  <Partial_2 synCat> = unknown
								| rightmost "prefix" must be an infix
  <circumPfx_2> == [morphType : infix]

rule {An unanalyzed prefix added to a sequence of prefixes; no compound rules}
  Prefs_1 = prefix (Prefs_2)
				| no percolation or constraints

rule {A derivational prefix added to a sequence of prefixes; the derivational prefix may be next to the stem}
  Prefs_1 = derivPfx (Prefs_2)
				| no percolation or constraints

rule {An unanalyzed suffix added to a sequence of suffixes; no compound rules}
  Suffs_1 = (Suffs_2) suffix
				| no percolation or constraints

rule {A derivational suffix added to a sequence of suffixes; the derivational suffix may be next to the stem}
  Suffs_1 = (Suffs_2) derivSfx
				| no percolation or constraints

			  | affixes on otherwise fully analyzed
			  | these never allow derivational affixes next to the stem
rule {One or more unanalyzed prefixes and suffixes on a fully analyzed stem}
  Partial = Prefixes Full Suffixes
								| percolation
  <Partial inflected> = <Full inflected>
  <Partial synCat> = <Full synCat>
								| constraints
  
  {
  
		<Full synCat>           = <Prefixes synCat>
		<Full synCat>           = <Prefixes envCat>
		<Full synCat>           = <Suffixes synCat>
		<Full synCat>           = <Suffixes envCat>
		/
		<Prefixes synCat>        = 6
		<Prefixes envCat>         = 6
		<Suffixes synCat>        = 6
		<Suffixes envCat>         = 6
{
	  
		<Full synCat>           = 6 /
		<Full synCat>           = 7 /
		<Full synCat>           = 10
}

		/
		<Prefixes synCat>        = 21
		<Prefixes envCat>         = 21
		<Suffixes synCat>        = 21
		<Suffixes envCat>         = 21
{
	  
		<Full synCat>           = 21 /
		<Full synCat>           = 22 /
		<Full synCat>           = 25 /
		<Full synCat>           = 28 /
		<Full synCat>           = 31 /
		<Full synCat>           = 34 /
		<Full synCat>           = 37 /
		<Full synCat>           = 40 /
		<Full synCat>           = 43 /
		<Full synCat>           = 46 /
		<Full synCat>           = 49 /
		<Full synCat>           = 52 /
		<Full synCat>           = 55 /
		<Full synCat>           = 58 /
		<Full synCat>           = 61 /
		<Full synCat>           = 64
}

		/
		<Prefixes synCat>        = 69
		<Prefixes envCat>         = 69
		<Suffixes synCat>        = 69
		<Suffixes envCat>         = 69
{
	  
		<Full synCat>           = 69 /
		<Full synCat>           = 70 /
		<Full synCat>           = 73
}

		/
		<Prefixes synCat>        = 81
		<Prefixes envCat>         = 81
		<Suffixes synCat>        = 81
		<Suffixes envCat>         = 81
{
	  
		<Full synCat>           = 81 /
		<Full synCat>           = 82 /
		<Full synCat>           = 85 /
		<Full synCat>           = 88 /
		<Full synCat>           = 91 /
		<Full synCat>           = 94
}

		/
		<Prefixes synCat>        = 110
		<Prefixes envCat>         = 110
		<Suffixes synCat>        = 110
		<Suffixes envCat>         = 110
{
	  
		<Full synCat>           = 110 /
		<Full synCat>           = 111 /
		<Full synCat>           = 114 /
		<Full synCat>           = 117 /
		<Full synCat>           = 120 /
		<Full synCat>           = 123 /
		<Full synCat>           = 126
}

		/
		<Prefixes synCat>        = 131
		<Prefixes envCat>         = 131
		<Suffixes synCat>        = 131
		<Suffixes envCat>         = 131
{
	  
		<Full synCat>           = 131 /
		<Full synCat>           = 132 /
		<Full synCat>           = 133 /
		<Full synCat>           = 136 /
		<Full synCat>           = 141
}

		/
		<Prefixes synCat>        = 132
		<Prefixes envCat>         = 132
		<Suffixes synCat>        = 132
		<Suffixes envCat>         = 132
{
	  
		<Full synCat>           = 132 /
		<Full synCat>           = 133 /
		<Full synCat>           = 136
}

		/
		<Prefixes synCat>        = 146
		<Prefixes envCat>         = 146
		<Suffixes synCat>        = 146
		<Suffixes envCat>         = 146
{
	  
		<Full synCat>           = 146 /
		<Full synCat>           = 147 /
		<Full synCat>           = 150 /
		<Full synCat>           = 153 /
		<Full synCat>           = 157 /
		<Full synCat>           = 160 /
		<Full synCat>           = 163 /
		<Full synCat>           = 168 /
		<Full synCat>           = 172
}

  }

rule {One or more unanalyzed prefixes on a fully analyzed stem}
  Partial = Prefixes Full
								| percolation
  <Partial inflected> = <Full inflected>
  <Partial synCat> = <Full synCat>
								| constraints
  
  {
  
		<Full synCat>           = <Prefixes synCat>
		<Full synCat>           = <Prefixes envCat>
		/
		<Prefixes synCat>        = 6
		<Prefixes envCat>         = 6
{
	  
		<Full synCat>           = 6 /
		<Full synCat>           = 7 /
		<Full synCat>           = 10
}

		/
		<Prefixes synCat>        = 21
		<Prefixes envCat>         = 21
{
	  
		<Full synCat>           = 21 /
		<Full synCat>           = 22 /
		<Full synCat>           = 25 /
		<Full synCat>           = 28 /
		<Full synCat>           = 31 /
		<Full synCat>           = 34 /
		<Full synCat>           = 37 /
		<Full synCat>           = 40 /
		<Full synCat>           = 43 /
		<Full synCat>           = 46 /
		<Full synCat>           = 49 /
		<Full synCat>           = 52 /
		<Full synCat>           = 55 /
		<Full synCat>           = 58 /
		<Full synCat>           = 61 /
		<Full synCat>           = 64
}

		/
		<Prefixes synCat>        = 69
		<Prefixes envCat>         = 69
{
	  
		<Full synCat>           = 69 /
		<Full synCat>           = 70 /
		<Full synCat>           = 73
}

		/
		<Prefixes synCat>        = 81
		<Prefixes envCat>         = 81
{
	  
		<Full synCat>           = 81 /
		<Full synCat>           = 82 /
		<Full synCat>           = 85 /
		<Full synCat>           = 88 /
		<Full synCat>           = 91 /
		<Full synCat>           = 94
}

		/
		<Prefixes synCat>        = 110
		<Prefixes envCat>         = 110
{
	  
		<Full synCat>           = 110 /
		<Full synCat>           = 111 /
		<Full synCat>           = 114 /
		<Full synCat>           = 117 /
		<Full synCat>           = 120 /
		<Full synCat>           = 123 /
		<Full synCat>           = 126
}

		/
		<Prefixes synCat>        = 131
		<Prefixes envCat>         = 131
{
	  
		<Full synCat>           = 131 /
		<Full synCat>           = 132 /
		<Full synCat>           = 133 /
		<Full synCat>           = 136 /
		<Full synCat>           = 141
}

		/
		<Prefixes synCat>        = 132
		<Prefixes envCat>         = 132
{
	  
		<Full synCat>           = 132 /
		<Full synCat>           = 133 /
		<Full synCat>           = 136
}

		/
		<Prefixes synCat>        = 146
		<Prefixes envCat>         = 146
{
	  
		<Full synCat>           = 146 /
		<Full synCat>           = 147 /
		<Full synCat>           = 150 /
		<Full synCat>           = 153 /
		<Full synCat>           = 157 /
		<Full synCat>           = 160 /
		<Full synCat>           = 163 /
		<Full synCat>           = 168 /
		<Full synCat>           = 172
}

  }

rule {One or more unanalyzed suffixes on a fully analyzed stem}
  Partial =          Full Suffixes
								| percolation
  <Partial inflected> = <Full inflected>
  <Partial synCat> = <Full synCat>
								| constraints
  
  {
  
		<Full synCat>           = <Suffixes synCat>
		<Full synCat>           = <Suffixes envCat>
		/
		<Suffixes synCat>        = 6
		<Suffixes envCat>         = 6
{
	  
		<Full synCat>           = 6 /
		<Full synCat>           = 7 /
		<Full synCat>           = 10
}

		/
		<Suffixes synCat>        = 21
		<Suffixes envCat>         = 21
{
	  
		<Full synCat>           = 21 /
		<Full synCat>           = 22 /
		<Full synCat>           = 25 /
		<Full synCat>           = 28 /
		<Full synCat>           = 31 /
		<Full synCat>           = 34 /
		<Full synCat>           = 37 /
		<Full synCat>           = 40 /
		<Full synCat>           = 43 /
		<Full synCat>           = 46 /
		<Full synCat>           = 49 /
		<Full synCat>           = 52 /
		<Full synCat>           = 55 /
		<Full synCat>           = 58 /
		<Full synCat>           = 61 /
		<Full synCat>           = 64
}

		/
		<Suffixes synCat>        = 69
		<Suffixes envCat>         = 69
{
	  
		<Full synCat>           = 69 /
		<Full synCat>           = 70 /
		<Full synCat>           = 73
}

		/
		<Suffixes synCat>        = 81
		<Suffixes envCat>         = 81
{
	  
		<Full synCat>           = 81 /
		<Full synCat>           = 82 /
		<Full synCat>           = 85 /
		<Full synCat>           = 88 /
		<Full synCat>           = 91 /
		<Full synCat>           = 94
}

		/
		<Suffixes synCat>        = 110
		<Suffixes envCat>         = 110
{
	  
		<Full synCat>           = 110 /
		<Full synCat>           = 111 /
		<Full synCat>           = 114 /
		<Full synCat>           = 117 /
		<Full synCat>           = 120 /
		<Full synCat>           = 123 /
		<Full synCat>           = 126
}

		/
		<Suffixes synCat>        = 131
		<Suffixes envCat>         = 131
{
	  
		<Full synCat>           = 131 /
		<Full synCat>           = 132 /
		<Full synCat>           = 133 /
		<Full synCat>           = 136 /
		<Full synCat>           = 141
}

		/
		<Suffixes synCat>        = 132
		<Suffixes envCat>         = 132
{
	  
		<Full synCat>           = 132 /
		<Full synCat>           = 133 /
		<Full synCat>           = 136
}

		/
		<Suffixes synCat>        = 146
		<Suffixes envCat>         = 146
{
	  
		<Full synCat>           = 146 /
		<Full synCat>           = 147 /
		<Full synCat>           = 150 /
		<Full synCat>           = 153 /
		<Full synCat>           = 157 /
		<Full synCat>           = 160 /
		<Full synCat>           = 163 /
		<Full synCat>           = 168 /
		<Full synCat>           = 172
}

  }

rule {Unanalyzed circumfix on a fully analyzed stem}
  Partial = circumPfx Full circumSfx
								| percolation
  <Partial inflected> = <Full inflected>
  <Partial synCat> = <Full synCat>
								| constraints
  
  {
  
		<Full synCat>           = <circumPfx synCat>
		<Full synCat>           = <circumPfx envCat>
		<Full synCat>           = <circumSfx synCat>
		<Full synCat>           = <circumSfx envCat>
		/
		<circumPfx synCat>        = 6
		<circumPfx envCat>         = 6
		<circumSfx synCat>        = 6
		<circumSfx envCat>         = 6
{
	  
		<Full synCat>           = 6 /
		<Full synCat>           = 7 /
		<Full synCat>           = 10
}

		/
		<circumPfx synCat>        = 21
		<circumPfx envCat>         = 21
		<circumSfx synCat>        = 21
		<circumSfx envCat>         = 21
{
	  
		<Full synCat>           = 21 /
		<Full synCat>           = 22 /
		<Full synCat>           = 25 /
		<Full synCat>           = 28 /
		<Full synCat>           = 31 /
		<Full synCat>           = 34 /
		<Full synCat>           = 37 /
		<Full synCat>           = 40 /
		<Full synCat>           = 43 /
		<Full synCat>           = 46 /
		<Full synCat>           = 49 /
		<Full synCat>           = 52 /
		<Full synCat>           = 55 /
		<Full synCat>           = 58 /
		<Full synCat>           = 61 /
		<Full synCat>           = 64
}

		/
		<circumPfx synCat>        = 69
		<circumPfx envCat>         = 69
		<circumSfx synCat>        = 69
		<circumSfx envCat>         = 69
{
	  
		<Full synCat>           = 69 /
		<Full synCat>           = 70 /
		<Full synCat>           = 73
}

		/
		<circumPfx synCat>        = 81
		<circumPfx envCat>         = 81
		<circumSfx synCat>        = 81
		<circumSfx envCat>         = 81
{
	  
		<Full synCat>           = 81 /
		<Full synCat>           = 82 /
		<Full synCat>           = 85 /
		<Full synCat>           = 88 /
		<Full synCat>           = 91 /
		<Full synCat>           = 94
}

		/
		<circumPfx synCat>        = 110
		<circumPfx envCat>         = 110
		<circumSfx synCat>        = 110
		<circumSfx envCat>         = 110
{
	  
		<Full synCat>           = 110 /
		<Full synCat>           = 111 /
		<Full synCat>           = 114 /
		<Full synCat>           = 117 /
		<Full synCat>           = 120 /
		<Full synCat>           = 123 /
		<Full synCat>           = 126
}

		/
		<circumPfx synCat>        = 131
		<circumPfx envCat>         = 131
		<circumSfx synCat>        = 131
		<circumSfx envCat>         = 131
{
	  
		<Full synCat>           = 131 /
		<Full synCat>           = 132 /
		<Full synCat>           = 133 /
		<Full synCat>           = 136 /
		<Full synCat>           = 141
}

		/
		<circumPfx synCat>        = 132
		<circumPfx envCat>         = 132
		<circumSfx synCat>        = 132
		<circumSfx envCat>         = 132
{
	  
		<Full synCat>           = 132 /
		<Full synCat>           = 133 /
		<Full synCat>           = 136
}

		/
		<circumPfx synCat>        = 146
		<circumPfx envCat>         = 146
		<circumSfx synCat>        = 146
		<circumSfx envCat>         = 146
{
	  
		<Full synCat>           = 146 /
		<Full synCat>           = 147 /
		<Full synCat>           = 150 /
		<Full synCat>           = 153 /
		<Full synCat>           = 157 /
		<Full synCat>           = 160 /
		<Full synCat>           = 163 /
		<Full synCat>           = 168 /
		<Full synCat>           = 172
}

  }
	| (Note: we do not allow for a derivational circumfix to attach to a Full in order to produce a partial - that would be an error.)
rule {Unanalyzed circumfix on a fully analyzed stem where second is an infix}
 Partial = circumPfx_1 circumPfx_2 Full
								 | percolation
	<Partial inflected> = <Full inflected>
	<Partial synCat> = <Full synCat>
								 | constraints
								 | rightmost "prefix" must be an infix
	<circumPfx_2> == [morphType : infix]
	  
	  {
	  
		<Full synCat>           = <circumPfx_1 synCat>
		<Full synCat>           = <circumPfx_1 envCat>
		<Full synCat>           = <circumPfx_2 synCat>
		<Full synCat>           = <circumPfx_2 envCat>
		/
		<circumPfx_1 synCat>        = 6
		<circumPfx_1 envCat>         = 6
		<circumPfx_2 synCat>        = 6
		<circumPfx_2 envCat>         = 6
{
	  
		<Full synCat>           = 6 /
		<Full synCat>           = 7 /
		<Full synCat>           = 10
}

		/
		<circumPfx_1 synCat>        = 21
		<circumPfx_1 envCat>         = 21
		<circumPfx_2 synCat>        = 21
		<circumPfx_2 envCat>         = 21
{
	  
		<Full synCat>           = 21 /
		<Full synCat>           = 22 /
		<Full synCat>           = 25 /
		<Full synCat>           = 28 /
		<Full synCat>           = 31 /
		<Full synCat>           = 34 /
		<Full synCat>           = 37 /
		<Full synCat>           = 40 /
		<Full synCat>           = 43 /
		<Full synCat>           = 46 /
		<Full synCat>           = 49 /
		<Full synCat>           = 52 /
		<Full synCat>           = 55 /
		<Full synCat>           = 58 /
		<Full synCat>           = 61 /
		<Full synCat>           = 64
}

		/
		<circumPfx_1 synCat>        = 69
		<circumPfx_1 envCat>         = 69
		<circumPfx_2 synCat>        = 69
		<circumPfx_2 envCat>         = 69
{
	  
		<Full synCat>           = 69 /
		<Full synCat>           = 70 /
		<Full synCat>           = 73
}

		/
		<circumPfx_1 synCat>        = 81
		<circumPfx_1 envCat>         = 81
		<circumPfx_2 synCat>        = 81
		<circumPfx_2 envCat>         = 81
{
	  
		<Full synCat>           = 81 /
		<Full synCat>           = 82 /
		<Full synCat>           = 85 /
		<Full synCat>           = 88 /
		<Full synCat>           = 91 /
		<Full synCat>           = 94
}

		/
		<circumPfx_1 synCat>        = 110
		<circumPfx_1 envCat>         = 110
		<circumPfx_2 synCat>        = 110
		<circumPfx_2 envCat>         = 110
{
	  
		<Full synCat>           = 110 /
		<Full synCat>           = 111 /
		<Full synCat>           = 114 /
		<Full synCat>           = 117 /
		<Full synCat>           = 120 /
		<Full synCat>           = 123 /
		<Full synCat>           = 126
}

		/
		<circumPfx_1 synCat>        = 131
		<circumPfx_1 envCat>         = 131
		<circumPfx_2 synCat>        = 131
		<circumPfx_2 envCat>         = 131
{
	  
		<Full synCat>           = 131 /
		<Full synCat>           = 132 /
		<Full synCat>           = 133 /
		<Full synCat>           = 136 /
		<Full synCat>           = 141
}

		/
		<circumPfx_1 synCat>        = 132
		<circumPfx_1 envCat>         = 132
		<circumPfx_2 synCat>        = 132
		<circumPfx_2 envCat>         = 132
{
	  
		<Full synCat>           = 132 /
		<Full synCat>           = 133 /
		<Full synCat>           = 136
}

		/
		<circumPfx_1 synCat>        = 146
		<circumPfx_1 envCat>         = 146
		<circumPfx_2 synCat>        = 146
		<circumPfx_2 envCat>         = 146
{
	  
		<Full synCat>           = 146 /
		<Full synCat>           = 147 /
		<Full synCat>           = 150 /
		<Full synCat>           = 153 /
		<Full synCat>           = 157 /
		<Full synCat>           = 160 /
		<Full synCat>           = 163 /
		<Full synCat>           = 168 /
		<Full synCat>           = 172
}

	  }
	  | (Note: we do not allow for a derivational circumfix to attach to a Full in order to produce a partial - that would be an error.)

			  | affixes on partial with non-final inflection
rule {One or more unanalyzed prefixes and suffixes on partial}
  Partial_1 = Prefs Partial_2 Suffs
								| percolation
  <Partial_1 inflected> = <Partial_2 inflected>
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraints
  <Partial_2> == ~[synCat:unknown]

rule {One or more unanalyzed prefixes on partial}
  Partial_1 = Prefs Partial_2
								| percolation
  <Partial_1 inflected> = <Partial_2 inflected>
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraints
  <Partial_2> == ~[synCat:unknown]

rule {One or more unanalyzed suffixes on partial}
  Partial_1 =          Partial_2 Suffs
								| percolation
  <Partial_1 inflected> = <Partial_2 inflected>
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraints
  <Partial_2> == ~[synCat:unknown]

rule {Unanalyzed circumfix on partial}
  Partial_1 = circumPfx Partial_2 circumSfx
								| percolation
  <Partial_1 inflected> = <Partial_2 inflected>
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraints
  <Partial_2> == ~[synCat:unknown]
rule {Unanalyzed circumfix on partial, where second part is an infix}
  Partial_1 = circumPfx_1 circumPfx_2 Partial_2
								| percolation
  <Partial_1 inflected> = <Partial_2 inflected>
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraints
  <Partial_2> == ~[synCat:unknown]
								| rightmost "prefix" must be an infix
  <circumPfx_2> == [morphType : infix]

rule {Derivational circumfix on partial}
  Partial_1 = derivCircumPfx Partial_2 derivCircumSfx
								| percolation
  <Partial_1 inflected> = <Partial_2 inflected>
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraints
  <Partial_2> == ~[synCat:unknown]
rule {Derivational circumfix on partial, where second part is an infix}
  Partial_1 = derivCircumPfx_1 derivCircumPfx_2 Partial_2
								| percolation
  <Partial_1 inflected> = <Partial_2 inflected>
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraints
  <Partial_2> == ~[synCat:unknown]
								| rightmost "prefix" must be an infix
   <derivCircumPfx_2> == [morphType : infix]

rule {An unanalyzed prefix added to a sequence of prefixes}
  Prefixes_1 = prefix (Prefixes_2)
								| percolation
  <Prefixes_1 synCat> = <prefix fromCat>  | keep the same category
								| constraints
  
  {
  
		<Prefixes_2 synCat>           = <prefix fromCat>
		/
		<prefix fromCat>        = 6
{
	  
		<Prefixes_2 synCat>           = 6 /
		<Prefixes_2 synCat>           = 7 /
		<Prefixes_2 synCat>           = 10
}

		/
		<prefix fromCat>        = 21
{
	  
		<Prefixes_2 synCat>           = 21 /
		<Prefixes_2 synCat>           = 22 /
		<Prefixes_2 synCat>           = 25 /
		<Prefixes_2 synCat>           = 28 /
		<Prefixes_2 synCat>           = 31 /
		<Prefixes_2 synCat>           = 34 /
		<Prefixes_2 synCat>           = 37 /
		<Prefixes_2 synCat>           = 40 /
		<Prefixes_2 synCat>           = 43 /
		<Prefixes_2 synCat>           = 46 /
		<Prefixes_2 synCat>           = 49 /
		<Prefixes_2 synCat>           = 52 /
		<Prefixes_2 synCat>           = 55 /
		<Prefixes_2 synCat>           = 58 /
		<Prefixes_2 synCat>           = 61 /
		<Prefixes_2 synCat>           = 64
}

		/
		<prefix fromCat>        = 69
{
	  
		<Prefixes_2 synCat>           = 69 /
		<Prefixes_2 synCat>           = 70 /
		<Prefixes_2 synCat>           = 73
}

		/
		<prefix fromCat>        = 81
{
	  
		<Prefixes_2 synCat>           = 81 /
		<Prefixes_2 synCat>           = 82 /
		<Prefixes_2 synCat>           = 85 /
		<Prefixes_2 synCat>           = 88 /
		<Prefixes_2 synCat>           = 91 /
		<Prefixes_2 synCat>           = 94
}

		/
		<prefix fromCat>        = 110
{
	  
		<Prefixes_2 synCat>           = 110 /
		<Prefixes_2 synCat>           = 111 /
		<Prefixes_2 synCat>           = 114 /
		<Prefixes_2 synCat>           = 117 /
		<Prefixes_2 synCat>           = 120 /
		<Prefixes_2 synCat>           = 123 /
		<Prefixes_2 synCat>           = 126
}

		/
		<prefix fromCat>        = 131
{
	  
		<Prefixes_2 synCat>           = 131 /
		<Prefixes_2 synCat>           = 132 /
		<Prefixes_2 synCat>           = 133 /
		<Prefixes_2 synCat>           = 136 /
		<Prefixes_2 synCat>           = 141
}

		/
		<prefix fromCat>        = 132
{
	  
		<Prefixes_2 synCat>           = 132 /
		<Prefixes_2 synCat>           = 133 /
		<Prefixes_2 synCat>           = 136
}

		/
		<prefix fromCat>        = 146
{
	  
		<Prefixes_2 synCat>           = 146 /
		<Prefixes_2 synCat>           = 147 /
		<Prefixes_2 synCat>           = 150 /
		<Prefixes_2 synCat>           = 153 /
		<Prefixes_2 synCat>           = 157 /
		<Prefixes_2 synCat>           = 160 /
		<Prefixes_2 synCat>           = 163 /
		<Prefixes_2 synCat>           = 168 /
		<Prefixes_2 synCat>           = 172
}

  }

rule {A derivational prefix added to a sequence of prefixes; the derivational cannot be next to the stem}
  Prefixes_1 = derivPfx Prefixes_2
								| percolation
  <Prefixes_1 synCat> = <derivPfx toCat>
								| constraints
  {
  
		<Prefixes_2 synCat>           = <derivPfx fromCat>
		/
		<derivPfx fromCat>        = 6
{
	  
		<Prefixes_2 synCat>           = 6 /
		<Prefixes_2 synCat>           = 7 /
		<Prefixes_2 synCat>           = 10
}

		/
		<derivPfx fromCat>        = 21
{
	  
		<Prefixes_2 synCat>           = 21 /
		<Prefixes_2 synCat>           = 22 /
		<Prefixes_2 synCat>           = 25 /
		<Prefixes_2 synCat>           = 28 /
		<Prefixes_2 synCat>           = 31 /
		<Prefixes_2 synCat>           = 34 /
		<Prefixes_2 synCat>           = 37 /
		<Prefixes_2 synCat>           = 40 /
		<Prefixes_2 synCat>           = 43 /
		<Prefixes_2 synCat>           = 46 /
		<Prefixes_2 synCat>           = 49 /
		<Prefixes_2 synCat>           = 52 /
		<Prefixes_2 synCat>           = 55 /
		<Prefixes_2 synCat>           = 58 /
		<Prefixes_2 synCat>           = 61 /
		<Prefixes_2 synCat>           = 64
}

		/
		<derivPfx fromCat>        = 69
{
	  
		<Prefixes_2 synCat>           = 69 /
		<Prefixes_2 synCat>           = 70 /
		<Prefixes_2 synCat>           = 73
}

		/
		<derivPfx fromCat>        = 81
{
	  
		<Prefixes_2 synCat>           = 81 /
		<Prefixes_2 synCat>           = 82 /
		<Prefixes_2 synCat>           = 85 /
		<Prefixes_2 synCat>           = 88 /
		<Prefixes_2 synCat>           = 91 /
		<Prefixes_2 synCat>           = 94
}

		/
		<derivPfx fromCat>        = 110
{
	  
		<Prefixes_2 synCat>           = 110 /
		<Prefixes_2 synCat>           = 111 /
		<Prefixes_2 synCat>           = 114 /
		<Prefixes_2 synCat>           = 117 /
		<Prefixes_2 synCat>           = 120 /
		<Prefixes_2 synCat>           = 123 /
		<Prefixes_2 synCat>           = 126
}

		/
		<derivPfx fromCat>        = 131
{
	  
		<Prefixes_2 synCat>           = 131 /
		<Prefixes_2 synCat>           = 132 /
		<Prefixes_2 synCat>           = 133 /
		<Prefixes_2 synCat>           = 136 /
		<Prefixes_2 synCat>           = 141
}

		/
		<derivPfx fromCat>        = 132
{
	  
		<Prefixes_2 synCat>           = 132 /
		<Prefixes_2 synCat>           = 133 /
		<Prefixes_2 synCat>           = 136
}

		/
		<derivPfx fromCat>        = 146
{
	  
		<Prefixes_2 synCat>           = 146 /
		<Prefixes_2 synCat>           = 147 /
		<Prefixes_2 synCat>           = 150 /
		<Prefixes_2 synCat>           = 153 /
		<Prefixes_2 synCat>           = 157 /
		<Prefixes_2 synCat>           = 160 /
		<Prefixes_2 synCat>           = 163 /
		<Prefixes_2 synCat>           = 168 /
		<Prefixes_2 synCat>           = 172
}

  }

rule {A derivational prefix added to a partial analysis}
Partial_1 = derivPfx Partial_2
								| percolation
<Partial_1 synCat> = <derivPfx toCat>
								| constraints
{
  
		<Partial_2 synCat>           = <derivPfx fromCat>
		<Partial_2 synCat>           = <derivPfx envCat>
		/
		<derivPfx fromCat>        = 6
		<derivPfx envCat>         = 6
{
	  
		<Partial_2 synCat>           = 6 /
		<Partial_2 synCat>           = 7 /
		<Partial_2 synCat>           = 10
}

		/
		<derivPfx fromCat>        = 21
		<derivPfx envCat>         = 21
{
	  
		<Partial_2 synCat>           = 21 /
		<Partial_2 synCat>           = 22 /
		<Partial_2 synCat>           = 25 /
		<Partial_2 synCat>           = 28 /
		<Partial_2 synCat>           = 31 /
		<Partial_2 synCat>           = 34 /
		<Partial_2 synCat>           = 37 /
		<Partial_2 synCat>           = 40 /
		<Partial_2 synCat>           = 43 /
		<Partial_2 synCat>           = 46 /
		<Partial_2 synCat>           = 49 /
		<Partial_2 synCat>           = 52 /
		<Partial_2 synCat>           = 55 /
		<Partial_2 synCat>           = 58 /
		<Partial_2 synCat>           = 61 /
		<Partial_2 synCat>           = 64
}

		/
		<derivPfx fromCat>        = 69
		<derivPfx envCat>         = 69
{
	  
		<Partial_2 synCat>           = 69 /
		<Partial_2 synCat>           = 70 /
		<Partial_2 synCat>           = 73
}

		/
		<derivPfx fromCat>        = 81
		<derivPfx envCat>         = 81
{
	  
		<Partial_2 synCat>           = 81 /
		<Partial_2 synCat>           = 82 /
		<Partial_2 synCat>           = 85 /
		<Partial_2 synCat>           = 88 /
		<Partial_2 synCat>           = 91 /
		<Partial_2 synCat>           = 94
}

		/
		<derivPfx fromCat>        = 110
		<derivPfx envCat>         = 110
{
	  
		<Partial_2 synCat>           = 110 /
		<Partial_2 synCat>           = 111 /
		<Partial_2 synCat>           = 114 /
		<Partial_2 synCat>           = 117 /
		<Partial_2 synCat>           = 120 /
		<Partial_2 synCat>           = 123 /
		<Partial_2 synCat>           = 126
}

		/
		<derivPfx fromCat>        = 131
		<derivPfx envCat>         = 131
{
	  
		<Partial_2 synCat>           = 131 /
		<Partial_2 synCat>           = 132 /
		<Partial_2 synCat>           = 133 /
		<Partial_2 synCat>           = 136 /
		<Partial_2 synCat>           = 141
}

		/
		<derivPfx fromCat>        = 132
		<derivPfx envCat>         = 132
{
	  
		<Partial_2 synCat>           = 132 /
		<Partial_2 synCat>           = 133 /
		<Partial_2 synCat>           = 136
}

		/
		<derivPfx fromCat>        = 146
		<derivPfx envCat>         = 146
{
	  
		<Partial_2 synCat>           = 146 /
		<Partial_2 synCat>           = 147 /
		<Partial_2 synCat>           = 150 /
		<Partial_2 synCat>           = 153 /
		<Partial_2 synCat>           = 157 /
		<Partial_2 synCat>           = 160 /
		<Partial_2 synCat>           = 163 /
		<Partial_2 synCat>           = 168 /
		<Partial_2 synCat>           = 172
}

  }

rule {An unanalyzed suffix added to a sequence of suffixes}
  Suffixes_1 = (Suffixes_2) suffix
								| percolation
  <Suffixes_1 synCat> = <suffix fromCat>  | keep the same category
								| constraints
  
  {
  
		<Suffixes_2 synCat>           = <suffix fromCat>
		/
		<suffix fromCat>        = 6
{
	  
		<Suffixes_2 synCat>           = 6 /
		<Suffixes_2 synCat>           = 7 /
		<Suffixes_2 synCat>           = 10
}

		/
		<suffix fromCat>        = 21
{
	  
		<Suffixes_2 synCat>           = 21 /
		<Suffixes_2 synCat>           = 22 /
		<Suffixes_2 synCat>           = 25 /
		<Suffixes_2 synCat>           = 28 /
		<Suffixes_2 synCat>           = 31 /
		<Suffixes_2 synCat>           = 34 /
		<Suffixes_2 synCat>           = 37 /
		<Suffixes_2 synCat>           = 40 /
		<Suffixes_2 synCat>           = 43 /
		<Suffixes_2 synCat>           = 46 /
		<Suffixes_2 synCat>           = 49 /
		<Suffixes_2 synCat>           = 52 /
		<Suffixes_2 synCat>           = 55 /
		<Suffixes_2 synCat>           = 58 /
		<Suffixes_2 synCat>           = 61 /
		<Suffixes_2 synCat>           = 64
}

		/
		<suffix fromCat>        = 69
{
	  
		<Suffixes_2 synCat>           = 69 /
		<Suffixes_2 synCat>           = 70 /
		<Suffixes_2 synCat>           = 73
}

		/
		<suffix fromCat>        = 81
{
	  
		<Suffixes_2 synCat>           = 81 /
		<Suffixes_2 synCat>           = 82 /
		<Suffixes_2 synCat>           = 85 /
		<Suffixes_2 synCat>           = 88 /
		<Suffixes_2 synCat>           = 91 /
		<Suffixes_2 synCat>           = 94
}

		/
		<suffix fromCat>        = 110
{
	  
		<Suffixes_2 synCat>           = 110 /
		<Suffixes_2 synCat>           = 111 /
		<Suffixes_2 synCat>           = 114 /
		<Suffixes_2 synCat>           = 117 /
		<Suffixes_2 synCat>           = 120 /
		<Suffixes_2 synCat>           = 123 /
		<Suffixes_2 synCat>           = 126
}

		/
		<suffix fromCat>        = 131
{
	  
		<Suffixes_2 synCat>           = 131 /
		<Suffixes_2 synCat>           = 132 /
		<Suffixes_2 synCat>           = 133 /
		<Suffixes_2 synCat>           = 136 /
		<Suffixes_2 synCat>           = 141
}

		/
		<suffix fromCat>        = 132
{
	  
		<Suffixes_2 synCat>           = 132 /
		<Suffixes_2 synCat>           = 133 /
		<Suffixes_2 synCat>           = 136
}

		/
		<suffix fromCat>        = 146
{
	  
		<Suffixes_2 synCat>           = 146 /
		<Suffixes_2 synCat>           = 147 /
		<Suffixes_2 synCat>           = 150 /
		<Suffixes_2 synCat>           = 153 /
		<Suffixes_2 synCat>           = 157 /
		<Suffixes_2 synCat>           = 160 /
		<Suffixes_2 synCat>           = 163 /
		<Suffixes_2 synCat>           = 168 /
		<Suffixes_2 synCat>           = 172
}

  }

rule {A derivational suffix added to a sequence of suffixes; the derivational cannot be next to the stem}
  Suffixes_1 = Suffixes_2 derivSfx
								| percolation
  <Suffixes_1 synCat> = <derivSfx toCat>
								| constraints
  {
  
		<Suffixes_2 synCat>           = <derivSfx fromCat>
		/
		<derivSfx fromCat>        = 6
{
	  
		<Suffixes_2 synCat>           = 6 /
		<Suffixes_2 synCat>           = 7 /
		<Suffixes_2 synCat>           = 10
}

		/
		<derivSfx fromCat>        = 21
{
	  
		<Suffixes_2 synCat>           = 21 /
		<Suffixes_2 synCat>           = 22 /
		<Suffixes_2 synCat>           = 25 /
		<Suffixes_2 synCat>           = 28 /
		<Suffixes_2 synCat>           = 31 /
		<Suffixes_2 synCat>           = 34 /
		<Suffixes_2 synCat>           = 37 /
		<Suffixes_2 synCat>           = 40 /
		<Suffixes_2 synCat>           = 43 /
		<Suffixes_2 synCat>           = 46 /
		<Suffixes_2 synCat>           = 49 /
		<Suffixes_2 synCat>           = 52 /
		<Suffixes_2 synCat>           = 55 /
		<Suffixes_2 synCat>           = 58 /
		<Suffixes_2 synCat>           = 61 /
		<Suffixes_2 synCat>           = 64
}

		/
		<derivSfx fromCat>        = 69
{
	  
		<Suffixes_2 synCat>           = 69 /
		<Suffixes_2 synCat>           = 70 /
		<Suffixes_2 synCat>           = 73
}

		/
		<derivSfx fromCat>        = 81
{
	  
		<Suffixes_2 synCat>           = 81 /
		<Suffixes_2 synCat>           = 82 /
		<Suffixes_2 synCat>           = 85 /
		<Suffixes_2 synCat>           = 88 /
		<Suffixes_2 synCat>           = 91 /
		<Suffixes_2 synCat>           = 94
}

		/
		<derivSfx fromCat>        = 110
{
	  
		<Suffixes_2 synCat>           = 110 /
		<Suffixes_2 synCat>           = 111 /
		<Suffixes_2 synCat>           = 114 /
		<Suffixes_2 synCat>           = 117 /
		<Suffixes_2 synCat>           = 120 /
		<Suffixes_2 synCat>           = 123 /
		<Suffixes_2 synCat>           = 126
}

		/
		<derivSfx fromCat>        = 131
{
	  
		<Suffixes_2 synCat>           = 131 /
		<Suffixes_2 synCat>           = 132 /
		<Suffixes_2 synCat>           = 133 /
		<Suffixes_2 synCat>           = 136 /
		<Suffixes_2 synCat>           = 141
}

		/
		<derivSfx fromCat>        = 132
{
	  
		<Suffixes_2 synCat>           = 132 /
		<Suffixes_2 synCat>           = 133 /
		<Suffixes_2 synCat>           = 136
}

		/
		<derivSfx fromCat>        = 146
{
	  
		<Suffixes_2 synCat>           = 146 /
		<Suffixes_2 synCat>           = 147 /
		<Suffixes_2 synCat>           = 150 /
		<Suffixes_2 synCat>           = 153 /
		<Suffixes_2 synCat>           = 157 /
		<Suffixes_2 synCat>           = 160 /
		<Suffixes_2 synCat>           = 163 /
		<Suffixes_2 synCat>           = 168 /
		<Suffixes_2 synCat>           = 172
}

  }

rule {A derivational suffix added to a partial analysis}
Partial_1 = Partial_2 derivSfx
								| percolation
<Partial_1 synCat> = <derivSfx toCat>
								| constraints
{
  
		<Partial_2 synCat>           = <derivSfx fromCat>
		<Partial_2 synCat>           = <derivSfx envCat>
		/
		<derivSfx fromCat>        = 6
		<derivSfx envCat>         = 6
{
	  
		<Partial_2 synCat>           = 6 /
		<Partial_2 synCat>           = 7 /
		<Partial_2 synCat>           = 10
}

		/
		<derivSfx fromCat>        = 21
		<derivSfx envCat>         = 21
{
	  
		<Partial_2 synCat>           = 21 /
		<Partial_2 synCat>           = 22 /
		<Partial_2 synCat>           = 25 /
		<Partial_2 synCat>           = 28 /
		<Partial_2 synCat>           = 31 /
		<Partial_2 synCat>           = 34 /
		<Partial_2 synCat>           = 37 /
		<Partial_2 synCat>           = 40 /
		<Partial_2 synCat>           = 43 /
		<Partial_2 synCat>           = 46 /
		<Partial_2 synCat>           = 49 /
		<Partial_2 synCat>           = 52 /
		<Partial_2 synCat>           = 55 /
		<Partial_2 synCat>           = 58 /
		<Partial_2 synCat>           = 61 /
		<Partial_2 synCat>           = 64
}

		/
		<derivSfx fromCat>        = 69
		<derivSfx envCat>         = 69
{
	  
		<Partial_2 synCat>           = 69 /
		<Partial_2 synCat>           = 70 /
		<Partial_2 synCat>           = 73
}

		/
		<derivSfx fromCat>        = 81
		<derivSfx envCat>         = 81
{
	  
		<Partial_2 synCat>           = 81 /
		<Partial_2 synCat>           = 82 /
		<Partial_2 synCat>           = 85 /
		<Partial_2 synCat>           = 88 /
		<Partial_2 synCat>           = 91 /
		<Partial_2 synCat>           = 94
}

		/
		<derivSfx fromCat>        = 110
		<derivSfx envCat>         = 110
{
	  
		<Partial_2 synCat>           = 110 /
		<Partial_2 synCat>           = 111 /
		<Partial_2 synCat>           = 114 /
		<Partial_2 synCat>           = 117 /
		<Partial_2 synCat>           = 120 /
		<Partial_2 synCat>           = 123 /
		<Partial_2 synCat>           = 126
}

		/
		<derivSfx fromCat>        = 131
		<derivSfx envCat>         = 131
{
	  
		<Partial_2 synCat>           = 131 /
		<Partial_2 synCat>           = 132 /
		<Partial_2 synCat>           = 133 /
		<Partial_2 synCat>           = 136 /
		<Partial_2 synCat>           = 141
}

		/
		<derivSfx fromCat>        = 132
		<derivSfx envCat>         = 132
{
	  
		<Partial_2 synCat>           = 132 /
		<Partial_2 synCat>           = 133 /
		<Partial_2 synCat>           = 136
}

		/
		<derivSfx fromCat>        = 146
		<derivSfx envCat>         = 146
{
	  
		<Partial_2 synCat>           = 146 /
		<Partial_2 synCat>           = 147 /
		<Partial_2 synCat>           = 150 /
		<Partial_2 synCat>           = 153 /
		<Partial_2 synCat>           = 157 /
		<Partial_2 synCat>           = 160 /
		<Partial_2 synCat>           = 163 /
		<Partial_2 synCat>           = 168 /
		<Partial_2 synCat>           = 172
}

  }


rule {Partially analyzed stem that's been inflected with empty template}
	Partial = PartialInflected
								| percolation
	<Partial synCat> = <PartialInflected synCat>
								| constraints
	<Partial synCat> = <PartialInflected synCat>
	<Partial morphoSyntax> = <PartialInflected morphoSyntax>

	<Partial inflected> = +
	<PartialInflected inflected> = +

	
rule {Partially analyzed stem with inflectional template  102}
		PartialInflected =   Partial (103_0)  :
														 | percolation
  <PartialInflected synCat>       = <Partial synCat>
														 | constraints
{
  <Partial synCat>       = 81 /
				  <Partial_2 synCat>       =  82 /
				  <Partial_2 synCat>       =  85 /
				  <Partial_2 synCat>       =  88 /
				  <Partial_2 synCat>       =  91 /
				  <Partial_2 synCat>       =  94
} 

  <Partial_1 morphoSyntax>    = <103_0 morphoSyntax>
														 | constraint
  <PartialInflected inflected> = +
  <Partial inflected> = -
		
rule {Partially analyzed stem with inflectional template  156}
		Partial_1 =   (181_0) Partial_2 180_0  :
														 | percolation
  <Partial_1 synCat>       = <Partial_2 synCat>
														 | constraints
  <Partial_2 synCat>       = 153 

  <Partial_1 morphoSyntax>    = <181_0 morphoSyntax>
  <Partial_1 morphoSyntax>    = <180_0 morphoSyntax>
														 | constraint
  <Partial_1 inflected> = +
  <Partial_2 inflected> = -
		
rule {Partially analyzed stem with inflectional template  166}
		Partial_1 =   (181_0) Partial_2 167_0  :
														 | percolation
  <Partial_1 synCat>       = <Partial_2 synCat>
														 | constraints
  <Partial_2 synCat>       = 163 

  <Partial_1 morphoSyntax>    = <181_0 morphoSyntax>
  <Partial_1 morphoSyntax>    = <167_0 morphoSyntax>
														 | constraint
  <Partial_1 inflected> = +
  <Partial_2 inflected> = -
		
rule {Partially analyzed stem with inflectional template  171}
		Partial_1 =   (181_0) 182_1 Partial_2 180_0  :
														 | percolation
  <Partial_1 synCat>       = <Partial_2 synCat>
														 | constraints
  <Partial_2 synCat>       = 168 

  <Partial_1 morphoSyntax>    = <181_0 morphoSyntax>
  <Partial_1 morphoSyntax>    = <182_1 morphoSyntax>
  <Partial_1 morphoSyntax>    = <180_0 morphoSyntax>
														 | constraint
  <Partial_1 inflected> = +
  <Partial_2 inflected> = -
		
rule {Partially analyzed stem with inflectional template  175}
		Partial_1 =   (181_0) 182_1 Partial_2 180_0  :
														 | percolation
  <Partial_1 synCat>       = <Partial_2 synCat>
														 | constraints
  <Partial_2 synCat>       = 172 

  <Partial_1 morphoSyntax>    = <181_0 morphoSyntax>
  <Partial_1 morphoSyntax>    = <182_1 morphoSyntax>
  <Partial_1 morphoSyntax>    = <180_0 morphoSyntax>
														 | constraint
  <Partial_1 inflected> = +
  <Partial_2 inflected> = -
		
| ------------------------------------------------------------
|                TEMPLATES
| ------------------------------------------------------------
Let W be []
Let W/W be []
Let Prt be []
Let Linker be []
Let Proclitic be []
Let Enclitic be []
Let Bound be []

Let RootPOS0 be [rootCat:unknown] 
Let CliticPOS0 be [rootCat:unknown] 
Let RootPOS3 be [rootCat:3
	requiresInflection : -]
Let MSEnvPOS3 be {[envCat:3]}
Let FromPOS3 be [fromCat:3]

Let ToPOS3 be [toCat:3
	requiresInflection : -]
Let CliticPOS3 be {[rootCat:3]}
Let CFP3 be {[fromCat:3]}
Let RootPOS6 be [rootCat:6
	requiresInflection : -]
Let MSEnvPOS6 be {[envCat:6][envCat:7][envCat:10]}
Let FromPOS6 be [fromCat:6]

Let ToPOS6 be [toCat:6
	requiresInflection : -]
Let CliticPOS6 be {[rootCat:6][rootCat:7][rootCat:10]}
Let CFP6 be {[fromCat:6][fromCat:7][fromCat:10]}
Let RootPOS7 be [rootCat:7
	requiresInflection : -]
Let MSEnvPOS7 be {[envCat:7]}
Let FromPOS7 be [fromCat:7]

Let ToPOS7 be [toCat:7
	requiresInflection : -]
Let CliticPOS7 be {[rootCat:7]}
Let CFP7 be {[fromCat:7]}
Let RootPOS10 be [rootCat:10
	requiresInflection : -]
Let MSEnvPOS10 be {[envCat:10]}
Let FromPOS10 be [fromCat:10]

Let ToPOS10 be [toCat:10
	requiresInflection : -]
Let CliticPOS10 be {[rootCat:10]}
Let CFP10 be {[fromCat:10]}
Let RootPOS15 be [rootCat:15
	requiresInflection : -]
Let MSEnvPOS15 be {[envCat:15]}
Let FromPOS15 be [fromCat:15]

Let ToPOS15 be [toCat:15
	requiresInflection : -]
Let CliticPOS15 be {[rootCat:15]}
Let CFP15 be {[fromCat:15]}
Let RootPOS18 be [rootCat:18
	requiresInflection : -]
Let MSEnvPOS18 be {[envCat:18]}
Let FromPOS18 be [fromCat:18]

Let ToPOS18 be [toCat:18
	requiresInflection : -]
Let CliticPOS18 be {[rootCat:18]}
Let CFP18 be {[fromCat:18]}
Let RootPOS21 be [rootCat:21
	requiresInflection : -]
Let MSEnvPOS21 be {[envCat:21][envCat:22][envCat:25][envCat:28][envCat:31][envCat:34][envCat:37][envCat:40][envCat:43][envCat:46][envCat:49][envCat:52][envCat:55][envCat:58][envCat:61][envCat:64]}
Let FromPOS21 be [fromCat:21]

Let ToPOS21 be [toCat:21
	requiresInflection : -]
Let CliticPOS21 be {[rootCat:21][rootCat:22][rootCat:25][rootCat:28][rootCat:31][rootCat:34][rootCat:37][rootCat:40][rootCat:43][rootCat:46][rootCat:49][rootCat:52][rootCat:55][rootCat:58][rootCat:61][rootCat:64]}
Let CFP21 be {[fromCat:21][fromCat:22][fromCat:25][fromCat:28][fromCat:31][fromCat:34][fromCat:37][fromCat:40][fromCat:43][fromCat:46][fromCat:49][fromCat:52][fromCat:55][fromCat:58][fromCat:61][fromCat:64]}
Let RootPOS22 be [rootCat:22
	requiresInflection : -]
Let MSEnvPOS22 be {[envCat:22]}
Let FromPOS22 be [fromCat:22]

Let ToPOS22 be [toCat:22
	requiresInflection : -]
Let CliticPOS22 be {[rootCat:22]}
Let CFP22 be {[fromCat:22]}
Let RootPOS25 be [rootCat:25
	requiresInflection : -]
Let MSEnvPOS25 be {[envCat:25]}
Let FromPOS25 be [fromCat:25]

Let ToPOS25 be [toCat:25
	requiresInflection : -]
Let CliticPOS25 be {[rootCat:25]}
Let CFP25 be {[fromCat:25]}
Let RootPOS28 be [rootCat:28
	requiresInflection : -]
Let MSEnvPOS28 be {[envCat:28]}
Let FromPOS28 be [fromCat:28]

Let ToPOS28 be [toCat:28
	requiresInflection : -]
Let CliticPOS28 be {[rootCat:28]}
Let CFP28 be {[fromCat:28]}
Let RootPOS31 be [rootCat:31
	requiresInflection : -]
Let MSEnvPOS31 be {[envCat:31]}
Let FromPOS31 be [fromCat:31]

Let ToPOS31 be [toCat:31
	requiresInflection : -]
Let CliticPOS31 be {[rootCat:31]}
Let CFP31 be {[fromCat:31]}
Let RootPOS34 be [rootCat:34
	requiresInflection : -]
Let MSEnvPOS34 be {[envCat:34]}
Let FromPOS34 be [fromCat:34]

Let ToPOS34 be [toCat:34
	requiresInflection : -]
Let CliticPOS34 be {[rootCat:34]}
Let CFP34 be {[fromCat:34]}
Let RootPOS37 be [rootCat:37
	requiresInflection : -]
Let MSEnvPOS37 be {[envCat:37]}
Let FromPOS37 be [fromCat:37]

Let ToPOS37 be [toCat:37
	requiresInflection : -]
Let CliticPOS37 be {[rootCat:37]}
Let CFP37 be {[fromCat:37]}
Let RootPOS40 be [rootCat:40
	requiresInflection : -]
Let MSEnvPOS40 be {[envCat:40]}
Let FromPOS40 be [fromCat:40]

Let ToPOS40 be [toCat:40
	requiresInflection : -]
Let CliticPOS40 be {[rootCat:40]}
Let CFP40 be {[fromCat:40]}
Let RootPOS43 be [rootCat:43
	requiresInflection : -]
Let MSEnvPOS43 be {[envCat:43]}
Let FromPOS43 be [fromCat:43]

Let ToPOS43 be [toCat:43
	requiresInflection : -]
Let CliticPOS43 be {[rootCat:43]}
Let CFP43 be {[fromCat:43]}
Let RootPOS46 be [rootCat:46
	requiresInflection : -]
Let MSEnvPOS46 be {[envCat:46]}
Let FromPOS46 be [fromCat:46]

Let ToPOS46 be [toCat:46
	requiresInflection : -]
Let CliticPOS46 be {[rootCat:46]}
Let CFP46 be {[fromCat:46]}
Let RootPOS49 be [rootCat:49
	requiresInflection : -]
Let MSEnvPOS49 be {[envCat:49]}
Let FromPOS49 be [fromCat:49]

Let ToPOS49 be [toCat:49
	requiresInflection : -]
Let CliticPOS49 be {[rootCat:49]}
Let CFP49 be {[fromCat:49]}
Let RootPOS52 be [rootCat:52
	requiresInflection : -]
Let MSEnvPOS52 be {[envCat:52]}
Let FromPOS52 be [fromCat:52]

Let ToPOS52 be [toCat:52
	requiresInflection : -]
Let CliticPOS52 be {[rootCat:52]}
Let CFP52 be {[fromCat:52]}
Let RootPOS55 be [rootCat:55
	requiresInflection : -]
Let MSEnvPOS55 be {[envCat:55]}
Let FromPOS55 be [fromCat:55]

Let ToPOS55 be [toCat:55
	requiresInflection : -]
Let CliticPOS55 be {[rootCat:55]}
Let CFP55 be {[fromCat:55]}
Let RootPOS58 be [rootCat:58
	requiresInflection : -]
Let MSEnvPOS58 be {[envCat:58]}
Let FromPOS58 be [fromCat:58]

Let ToPOS58 be [toCat:58
	requiresInflection : -]
Let CliticPOS58 be {[rootCat:58]}
Let CFP58 be {[fromCat:58]}
Let RootPOS61 be [rootCat:61
	requiresInflection : -]
Let MSEnvPOS61 be {[envCat:61]}
Let FromPOS61 be [fromCat:61]

Let ToPOS61 be [toCat:61
	requiresInflection : -]
Let CliticPOS61 be {[rootCat:61]}
Let CFP61 be {[fromCat:61]}
Let RootPOS64 be [rootCat:64
	requiresInflection : -]
Let MSEnvPOS64 be {[envCat:64]}
Let FromPOS64 be [fromCat:64]

Let ToPOS64 be [toCat:64
	requiresInflection : -]
Let CliticPOS64 be {[rootCat:64]}
Let CFP64 be {[fromCat:64]}
Let RootPOS69 be [rootCat:69
	requiresInflection : -]
Let MSEnvPOS69 be {[envCat:69][envCat:70][envCat:73]}
Let FromPOS69 be [fromCat:69]

Let ToPOS69 be [toCat:69
	requiresInflection : -]
Let CliticPOS69 be {[rootCat:69][rootCat:70][rootCat:73]}
Let CFP69 be {[fromCat:69][fromCat:70][fromCat:73]}
Let RootPOS70 be [rootCat:70
	requiresInflection : -]
Let MSEnvPOS70 be {[envCat:70]}
Let FromPOS70 be [fromCat:70]

Let ToPOS70 be [toCat:70
	requiresInflection : -]
Let CliticPOS70 be {[rootCat:70]}
Let CFP70 be {[fromCat:70]}
Let RootPOS73 be [rootCat:73
	requiresInflection : -]
Let MSEnvPOS73 be {[envCat:73]}
Let FromPOS73 be [fromCat:73]

Let ToPOS73 be [toCat:73
	requiresInflection : -]
Let CliticPOS73 be {[rootCat:73]}
Let CFP73 be {[fromCat:73]}
Let RootPOS78 be [rootCat:78
	requiresInflection : -]
Let MSEnvPOS78 be {[envCat:78]}
Let FromPOS78 be [fromCat:78]

Let ToPOS78 be [toCat:78
	requiresInflection : -]
Let CliticPOS78 be {[rootCat:78]}
Let CFP78 be {[fromCat:78]}
Let RootPOS81 be [rootCat:81
	requiresInflection : +]
Let MSEnvPOS81 be {[envCat:81][envCat:82][envCat:85][envCat:88][envCat:91][envCat:94]}
Let FromPOS81 be [fromCat:81]

Let ToPOS81 be [toCat:81
	requiresInflection : +]
Let CliticPOS81 be {[rootCat:81][rootCat:82][rootCat:85][rootCat:88][rootCat:91][rootCat:94]}
Let CFP81 be {[fromCat:81][fromCat:82][fromCat:85][fromCat:88][fromCat:91][fromCat:94]}
Let RootPOS82 be [rootCat:82
	requiresInflection : +]
Let MSEnvPOS82 be {[envCat:82]}
Let FromPOS82 be [fromCat:82]

Let ToPOS82 be [toCat:82
	requiresInflection : +]
Let CliticPOS82 be {[rootCat:82]}
Let CFP82 be {[fromCat:82]}
Let RootPOS85 be [rootCat:85
	requiresInflection : +]
Let MSEnvPOS85 be {[envCat:85]}
Let FromPOS85 be [fromCat:85]

Let ToPOS85 be [toCat:85
	requiresInflection : +]
Let CliticPOS85 be {[rootCat:85]}
Let CFP85 be {[fromCat:85]}
Let RootPOS88 be [rootCat:88
	requiresInflection : +]
Let MSEnvPOS88 be {[envCat:88]}
Let FromPOS88 be [fromCat:88]

Let ToPOS88 be [toCat:88
	requiresInflection : +]
Let CliticPOS88 be {[rootCat:88]}
Let CFP88 be {[fromCat:88]}
Let RootPOS91 be [rootCat:91
	requiresInflection : +]
Let MSEnvPOS91 be {[envCat:91]}
Let FromPOS91 be [fromCat:91]

Let ToPOS91 be [toCat:91
	requiresInflection : +]
Let CliticPOS91 be {[rootCat:91]}
Let CFP91 be {[fromCat:91]}
Let RootPOS94 be [rootCat:94
	requiresInflection : +]
Let MSEnvPOS94 be {[envCat:94]}
Let FromPOS94 be [fromCat:94]

Let ToPOS94 be [toCat:94
	requiresInflection : +]
Let CliticPOS94 be {[rootCat:94]}
Let CFP94 be {[fromCat:94]}
Let RootPOS104 be [rootCat:104
	requiresInflection : -]
Let MSEnvPOS104 be {[envCat:104]}
Let FromPOS104 be [fromCat:104]

Let ToPOS104 be [toCat:104
	requiresInflection : -]
Let CliticPOS104 be {[rootCat:104]}
Let CFP104 be {[fromCat:104]}
Let RootPOS107 be [rootCat:107
	requiresInflection : -]
Let MSEnvPOS107 be {[envCat:107]}
Let FromPOS107 be [fromCat:107]

Let ToPOS107 be [toCat:107
	requiresInflection : -]
Let CliticPOS107 be {[rootCat:107]}
Let CFP107 be {[fromCat:107]}
Let RootPOS110 be [rootCat:110
	requiresInflection : -]
Let MSEnvPOS110 be {[envCat:110][envCat:111][envCat:114][envCat:117][envCat:120][envCat:123][envCat:126]}
Let FromPOS110 be [fromCat:110]

Let ToPOS110 be [toCat:110
	requiresInflection : -]
Let CliticPOS110 be {[rootCat:110][rootCat:111][rootCat:114][rootCat:117][rootCat:120][rootCat:123][rootCat:126]}
Let CFP110 be {[fromCat:110][fromCat:111][fromCat:114][fromCat:117][fromCat:120][fromCat:123][fromCat:126]}
Let RootPOS111 be [rootCat:111
	requiresInflection : -]
Let MSEnvPOS111 be {[envCat:111]}
Let FromPOS111 be [fromCat:111]

Let ToPOS111 be [toCat:111
	requiresInflection : -]
Let CliticPOS111 be {[rootCat:111]}
Let CFP111 be {[fromCat:111]}
Let RootPOS114 be [rootCat:114
	requiresInflection : -]
Let MSEnvPOS114 be {[envCat:114]}
Let FromPOS114 be [fromCat:114]

Let ToPOS114 be [toCat:114
	requiresInflection : -]
Let CliticPOS114 be {[rootCat:114]}
Let CFP114 be {[fromCat:114]}
Let RootPOS117 be [rootCat:117
	requiresInflection : -]
Let MSEnvPOS117 be {[envCat:117]}
Let FromPOS117 be [fromCat:117]

Let ToPOS117 be [toCat:117
	requiresInflection : -]
Let CliticPOS117 be {[rootCat:117]}
Let CFP117 be {[fromCat:117]}
Let RootPOS120 be [rootCat:120
	requiresInflection : -]
Let MSEnvPOS120 be {[envCat:120]}
Let FromPOS120 be [fromCat:120]

Let ToPOS120 be [toCat:120
	requiresInflection : -]
Let CliticPOS120 be {[rootCat:120]}
Let CFP120 be {[fromCat:120]}
Let RootPOS123 be [rootCat:123
	requiresInflection : -]
Let MSEnvPOS123 be {[envCat:123]}
Let FromPOS123 be [fromCat:123]

Let ToPOS123 be [toCat:123
	requiresInflection : -]
Let CliticPOS123 be {[rootCat:123]}
Let CFP123 be {[fromCat:123]}
Let RootPOS126 be [rootCat:126
	requiresInflection : -]
Let MSEnvPOS126 be {[envCat:126]}
Let FromPOS126 be [fromCat:126]

Let ToPOS126 be [toCat:126
	requiresInflection : -]
Let CliticPOS126 be {[rootCat:126]}
Let CFP126 be {[fromCat:126]}
Let RootPOS131 be [rootCat:131
	requiresInflection : -]
Let MSEnvPOS131 be {[envCat:131][envCat:132][envCat:133][envCat:136][envCat:141]}
Let FromPOS131 be [fromCat:131]

Let ToPOS131 be [toCat:131
	requiresInflection : -]
Let CliticPOS131 be {[rootCat:131][rootCat:132][rootCat:133][rootCat:136][rootCat:141]}
Let CFP131 be {[fromCat:131][fromCat:132][fromCat:133][fromCat:136][fromCat:141]}
Let RootPOS132 be [rootCat:132
	requiresInflection : -]
Let MSEnvPOS132 be {[envCat:132][envCat:133][envCat:136]}
Let FromPOS132 be [fromCat:132]

Let ToPOS132 be [toCat:132
	requiresInflection : -]
Let CliticPOS132 be {[rootCat:132][rootCat:133][rootCat:136]}
Let CFP132 be {[fromCat:132][fromCat:133][fromCat:136]}
Let RootPOS133 be [rootCat:133
	requiresInflection : -]
Let MSEnvPOS133 be {[envCat:133]}
Let FromPOS133 be [fromCat:133]

Let ToPOS133 be [toCat:133
	requiresInflection : -]
Let CliticPOS133 be {[rootCat:133]}
Let CFP133 be {[fromCat:133]}
Let RootPOS136 be [rootCat:136
	requiresInflection : -]
Let MSEnvPOS136 be {[envCat:136]}
Let FromPOS136 be [fromCat:136]

Let ToPOS136 be [toCat:136
	requiresInflection : -]
Let CliticPOS136 be {[rootCat:136]}
Let CFP136 be {[fromCat:136]}
Let RootPOS141 be [rootCat:141
	requiresInflection : -]
Let MSEnvPOS141 be {[envCat:141]}
Let FromPOS141 be [fromCat:141]

Let ToPOS141 be [toCat:141
	requiresInflection : -]
Let CliticPOS141 be {[rootCat:141]}
Let CFP141 be {[fromCat:141]}
Let RootPOS146 be [rootCat:146
	requiresInflection : -]
Let MSEnvPOS146 be {[envCat:146][envCat:147][envCat:150][envCat:153][envCat:157][envCat:160][envCat:163][envCat:168][envCat:172]}
Let FromPOS146 be [fromCat:146]

Let ToPOS146 be [toCat:146
	requiresInflection : -]
Let CliticPOS146 be {[rootCat:146][rootCat:147][rootCat:150][rootCat:153][rootCat:157][rootCat:160][rootCat:163][rootCat:168][rootCat:172]}
Let CFP146 be {[fromCat:146][fromCat:147][fromCat:150][fromCat:153][fromCat:157][fromCat:160][fromCat:163][fromCat:168][fromCat:172]}
Let RootPOS147 be [rootCat:147
	requiresInflection : -]
Let MSEnvPOS147 be {[envCat:147]}
Let FromPOS147 be [fromCat:147]

Let ToPOS147 be [toCat:147
	requiresInflection : -]
Let CliticPOS147 be {[rootCat:147]}
Let CFP147 be {[fromCat:147]}
Let RootPOS150 be [rootCat:150
	requiresInflection : -]
Let MSEnvPOS150 be {[envCat:150]}
Let FromPOS150 be [fromCat:150]

Let ToPOS150 be [toCat:150
	requiresInflection : -]
Let CliticPOS150 be {[rootCat:150]}
Let CFP150 be {[fromCat:150]}
Let RootPOS153 be [rootCat:153
	requiresInflection : +]
Let MSEnvPOS153 be {[envCat:153]}
Let FromPOS153 be [fromCat:153]

Let ToPOS153 be [toCat:153
	requiresInflection : +]
Let CliticPOS153 be {[rootCat:153]}
Let CFP153 be {[fromCat:153]}
Let RootPOS157 be [rootCat:157
	requiresInflection : -]
Let MSEnvPOS157 be {[envCat:157]}
Let FromPOS157 be [fromCat:157]

Let ToPOS157 be [toCat:157
	requiresInflection : -]
Let CliticPOS157 be {[rootCat:157]}
Let CFP157 be {[fromCat:157]}
Let RootPOS160 be [rootCat:160
	requiresInflection : -]
Let MSEnvPOS160 be {[envCat:160]}
Let FromPOS160 be [fromCat:160]

Let ToPOS160 be [toCat:160
	requiresInflection : -]
Let CliticPOS160 be {[rootCat:160]}
Let CFP160 be {[fromCat:160]}
Let RootPOS163 be [rootCat:163
	requiresInflection : +]
Let MSEnvPOS163 be {[envCat:163]}
Let FromPOS163 be [fromCat:163]

Let ToPOS163 be [toCat:163
	requiresInflection : +]
Let CliticPOS163 be {[rootCat:163]}
Let CFP163 be {[fromCat:163]}
Let RootPOS168 be [rootCat:168
	requiresInflection : +]
Let MSEnvPOS168 be {[envCat:168]}
Let FromPOS168 be [fromCat:168]

Let ToPOS168 be [toCat:168
	requiresInflection : +]
Let CliticPOS168 be {[rootCat:168]}
Let CFP168 be {[fromCat:168]}
Let RootPOS172 be [rootCat:172
	requiresInflection : +]
Let MSEnvPOS172 be {[envCat:172]}
Let FromPOS172 be [fromCat:172]

Let ToPOS172 be [toCat:172
	requiresInflection : +]
Let CliticPOS172 be {[rootCat:172]}
Let CFP172 be {[fromCat:172]}
Let MSFS41343 be [ morphoSyntax : [ 41338:41339] ]
Let MSFS41345 be [ morphoSyntax : [ 41338:41342] ]
Let MSFS41347 be [ morphoSyntax : [ 41338:41341] ]
Let InflClass99 be [inflectionClass:99]
Let FromInflClass99 be [fromInflectionClass:99]
Let ToInflClass99 be [toInflectionClass:99]
Let ICA99 be [inflectionClass:99]
		 
Let InflClass100 be [inflectionClass:100]
Let FromInflClass100 be [fromInflectionClass:100]
Let ToInflClass100 be [toInflectionClass:100]
Let ICA100 be [inflectionClass:100]
		 
Let InflClass101 be [inflectionClass:101]
Let FromInflClass101 be [fromInflectionClass:101]
Let ToInflClass101 be [toInflectionClass:101]
Let ICA101 be [inflectionClass:101]
		 
Let InflClass178 be [inflectionClass:178]
Let FromInflClass178 be [fromInflectionClass:178]
Let ToInflClass178 be [toInflectionClass:178]
Let ICA178 be [inflectionClass:178]
		 
Let InflClass179 be [inflectionClass:179]
Let FromInflClass179 be [fromInflectionClass:179]
Let ToInflClass179 be [toInflectionClass:179]
Let ICA179 be [inflectionClass:179]
		  
Let ICA100ICA101 be {[inflectionClass:100][inflectionClass:101]} 
 
Let CFP6CFP69CFP81CFP110CFP146 be {[CFP6][CFP69][CFP81][CFP110][CFP146]} 
Let CFP81CFP110 be {[CFP81][CFP110]} 

Let Infix be [morphType:infix]
Let prefixinginterfix be {[cat:prefix]
						  [cat:interfix]}
Let suffixinginterfix be {[cat:suffix]
						  [cat:interfix]}
