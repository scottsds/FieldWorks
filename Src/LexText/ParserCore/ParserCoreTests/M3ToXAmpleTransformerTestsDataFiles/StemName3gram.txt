
| DO NOT EDIT THIS FILE DIRECTLY!
|

| ------------------------------------------------------------
|                TOP-LEVEL WORD
| ------------------------------------------------------------
rule {Top-level cliticless word}
  OrthographicWord = Word
								| percolation
		<OrthographicWord synCat>       = <Word synCat>
		<OrthographicWord morphoSyntax> = <Word morphoSyntax>

rule {Top-level word with one or more proclitics and enclitics}
  OrthographicWord = Proclitics Word Enclitics
								| percolation
		<OrthographicWord synCat>       = <Word synCat>
		<OrthographicWord morphoSyntax> = <Word morphoSyntax>
		<OrthographicWord proclitics morphoSyntax> = <Proclitics morphoSyntax>
		<OrthographicWord enclitics morphoSyntax> = <Enclitics morphoSyntax>
								| drip (pass down)
		<Word synCat>       = <Proclitics synCat>
		<Word synCat>       = <Enclitics synCat>

rule {Top-level word with one or more proclitics}
  OrthographicWord = Proclitics Word
								| percolation
		<OrthographicWord synCat>       = <Word synCat>
		<OrthographicWord morphoSyntax> = <Word morphoSyntax>
		<OrthographicWord proclitics morphoSyntax> = <Proclitics morphoSyntax>
								| drip (pass down)
		<Word synCat>       = <Proclitics synCat>

rule {Top-level word with one or more enclitics}
  OrthographicWord =            Word Enclitics
								| percolation
		<OrthographicWord synCat>       = <Word synCat>
		<OrthographicWord morphoSyntax> = <Word morphoSyntax>
		<OrthographicWord enclitics morphoSyntax> = <Enclitics morphoSyntax>
								| drip (pass down)
		<Word synCat>       = <Enclitics synCat>


| ------------------------------------------------------------
|                CLITICS
| ------------------------------------------------------------
rule {One or more proclitics}
  Proclitics_1 = proclitic (Proclitics_2)
								| percolation
		<Proclitics_1 morphoSyntax> = <proclitic morphoSyntax>
								| drip (pass down)
		<Proclitics_1 synCat>       = <Proclitics_2 synCat>
								| constraints
		<Proclitics_2 morphoSyntax> = <proclitic morphoSyntax>
		<Proclitics_1 synCat>       = <proclitic fromCat>

rule {One or more enclitics}
  Enclitics_1  = (Enclitics_2) enclitic
								| percolation
		<Enclitics_1 morphoSyntax> = <enclitic morphoSyntax>
								| drip (pass down)
		<Enclitics_1 synCat>       = <Enclitics_2 synCat>
								| constraints
		<Enclitics_2 morphoSyntax> = <enclitic morphoSyntax>
		<Enclitics_1 synCat>       = <enclitic fromCat>


| ------------------------------------------------------------
|                WORD
| ------------------------------------------------------------
rule {clitic word}
  Word = clitic
								| percolation
		<Word synCat>       = <clitic rootCat>
		<Word morphoSyntax> = <clitic morphoSyntax>

rule {Fully analyzed word}
  Word = Full
								| percolation
		<Word synCat>       = <Full synCat>
		<Word morphoSyntax> = <Full morphoSyntax>
		<Full> == [requiresInflection : -] /  | doesn't require inflection or
				  [inflected : +]             | is inflected

rule {Partially analyzed word}
  Word = Partial
								| percolation
		<Word synCat>       = <Partial synCat>
		<Word morphoSyntax> = <Partial morphoSyntax>

| ------------------------------------------------------------
|                FULLY ANALYZED WORD PORTION
| ------------------------------------------------------------

rule {Fully analyzed stem with no inflectional template}
  Full = Stem
								| percolation
		<Full synCat>       = <Stem synCat>
		<Full morphoSyntax> = <Stem morphoSyntax>
		<Full stratum>      = <Stem stratum>
		<Full requiresInflection> = <Stem requiresInflection>
						  | constraint
		<Full inflected>    = -  | this Full word category is not inflected
		<Stem blocksInflection> = - | prevent a non-final template from immediately being inflected without any intervening derivation or compounding

rule {Fully analyzed stem with a final inflectional template 15313}
  Full =  Stem 15314_0 15315_1
														 | percolation
  <Full synCat>       = <Stem synCat>
  <Full morphoSyntax> = <Stem morphoSyntax>
  <Full inflected>    = +
  <Full requiresInflection> = -
						  | constraints
  <Stem blocksInflection> = - | prevent a non-final template from immediately being inflected without any intervening derivation or compounding
{
  <Stem  synCat>       = 261 /
  <Stem  synCat>       =  15311 /
  <Stem  synCat>       =  15312
}
  <Stem morphoSyntax>    = <15314_0 morphoSyntax>
  <Stem synCat>          = <15314_0 envCat>   | allomorph
  <Stem exception>       = <15314_0 fromException>
  <Stem inflectionClass> = <15314_0 inflectionClass>
  <Full stemNameInfo morphoSyntax> = <15314_0 morphoSyntax>
  <Stem morphoSyntax>    = <15315_1 morphoSyntax>
  <Stem synCat>          = <15315_1 envCat>   | allomorph
  <Stem exception>       = <15315_1 fromException>
  <Stem inflectionClass> = <15315_1 inflectionClass>
  <Full stemNameInfo morphoSyntax> = <15315_1 morphoSyntax>
  <Full stemNameInfo stemName>       = <Stem stemName>
				  | stem name logical constraint
 <Full stemNameInfo> == (
  ([stemName:17837] -> ([morphoSyntax:[ 16481:16483]] ))
				 & ( ([stemName:18510] -> ([morphoSyntax:[ 16489:16490 18512:18514]] ))
				 & ( ([stemName:18674] -> ([morphoSyntax:[16484 : [ 16469:16471] 16489:16490 18512:18515]]  / ([morphoSyntax:[ 16489:16491]] )))
				 & ( ([stemName:20027] -> ([morphoSyntax:[ 16489:16491]] ))
			& ( ([stemName:NotStemName17837StemName18510] -> ~([morphoSyntax:[ 16481:16483]] / ([morphoSyntax:[ 16489:16490 18512:18514]] )))
			& ( ([stemName:NotStemName18510StemName18674] -> ~([morphoSyntax:[ 16489:16490 18512:18514]] / ([morphoSyntax:[16484 : [ 16469:16471] 16489:16490 18512:18515]]  / ([morphoSyntax:[ 16489:16491]] ))))))))))
rule {Fully analyzed stem with a final inflectional template 15340}
  Full =  Stem 15341_0 15342_1
														 | percolation
  <Full synCat>       = <Stem synCat>
  <Full morphoSyntax> = <Stem morphoSyntax>
  <Full inflected>    = +
  <Full requiresInflection> = -
						  | constraints
  <Stem blocksInflection> = - | prevent a non-final template from immediately being inflected without any intervening derivation or compounding
{
  <Stem  synCat>       = 261 /
  <Stem  synCat>       =  15311 /
  <Stem  synCat>       =  15312
}
  <Stem morphoSyntax>    = <15341_0 morphoSyntax>
  <Stem synCat>          = <15341_0 envCat>   | allomorph
  <Stem exception>       = <15341_0 fromException>
  <Stem inflectionClass> = <15341_0 inflectionClass>
  <Full stemNameInfo morphoSyntax> = <15341_0 morphoSyntax>
  <Stem morphoSyntax>    = <15342_1 morphoSyntax>
  <Stem synCat>          = <15342_1 envCat>   | allomorph
  <Stem exception>       = <15342_1 fromException>
  <Stem inflectionClass> = <15342_1 inflectionClass>
  <Full stemNameInfo morphoSyntax> = <15342_1 morphoSyntax>
  <Full stemNameInfo stemName>       = <Stem stemName>
				  | stem name logical constraint
 <Full stemNameInfo> == (
  ([stemName:17837] -> ([morphoSyntax:[ 16481:16483]] ))
				 & ( ([stemName:18510] -> ([morphoSyntax:[ 16489:16490 18512:18514]] ))
				 & ( ([stemName:18674] -> ([morphoSyntax:[16484 : [ 16469:16471] 16489:16490 18512:18515]]  / ([morphoSyntax:[ 16489:16491]] )))
				 & ( ([stemName:20027] -> ([morphoSyntax:[ 16489:16491]] ))
			& ( ([stemName:NotStemName17837StemName18510] -> ~([morphoSyntax:[ 16481:16483]] / ([morphoSyntax:[ 16489:16490 18512:18514]] )))
			& ( ([stemName:NotStemName18510StemName18674] -> ~([morphoSyntax:[ 16489:16490 18512:18514]] / ([morphoSyntax:[16484 : [ 16469:16471] 16489:16490 18512:18515]]  / ([morphoSyntax:[ 16489:16491]] ))))))))))
rule {Fully analyzed stem with a final inflectional template 15355}
  Full =  Stem 15356_0
														 | percolation
  <Full synCat>       = <Stem synCat>
  <Full morphoSyntax> = <Stem morphoSyntax>
  <Full inflected>    = +
  <Full requiresInflection> = -
						  | constraints
  <Stem blocksInflection> = - | prevent a non-final template from immediately being inflected without any intervening derivation or compounding
{
  <Stem  synCat>       = 261 /
  <Stem  synCat>       =  15311 /
  <Stem  synCat>       =  15312
}
  <Stem morphoSyntax>    = <15356_0 morphoSyntax>
  <Stem synCat>          = <15356_0 envCat>   | allomorph
  <Stem exception>       = <15356_0 fromException>
  <Stem inflectionClass> = <15356_0 inflectionClass>
  <Full stemNameInfo morphoSyntax> = <15356_0 morphoSyntax>
  <Full stemNameInfo stemName>       = <Stem stemName>
				  | stem name logical constraint
 <Full stemNameInfo> == (
  ([stemName:17837] -> ([morphoSyntax:[ 16481:16483]] ))
				 & ( ([stemName:18510] -> ([morphoSyntax:[ 16489:16490 18512:18514]] ))
				 & ( ([stemName:18674] -> ([morphoSyntax:[16484 : [ 16469:16471] 16489:16490 18512:18515]]  / ([morphoSyntax:[ 16489:16491]] )))
				 & ( ([stemName:20027] -> ([morphoSyntax:[ 16489:16491]] ))
			& ( ([stemName:NotStemName17837StemName18510] -> ~([morphoSyntax:[ 16481:16483]] / ([morphoSyntax:[ 16489:16490 18512:18514]] )))
			& ( ([stemName:NotStemName18510StemName18674] -> ~([morphoSyntax:[ 16489:16490 18512:18514]] / ([morphoSyntax:[16484 : [ 16469:16471] 16489:16490 18512:18515]]  / ([morphoSyntax:[ 16489:16491]] ))))))))))
rule {Fully analyzed stem with a final inflectional template 15373}
  Full =  Stem 15374_0
														 | percolation
  <Full synCat>       = <Stem synCat>
  <Full morphoSyntax> = <Stem morphoSyntax>
  <Full inflected>    = +
  <Full requiresInflection> = -
						  | constraints
  <Stem blocksInflection> = - | prevent a non-final template from immediately being inflected without any intervening derivation or compounding
{
  <Stem  synCat>       = 261 /
  <Stem  synCat>       =  15311 /
  <Stem  synCat>       =  15312
}
  <Stem morphoSyntax>    = <15374_0 morphoSyntax>
  <Stem synCat>          = <15374_0 envCat>   | allomorph
  <Stem exception>       = <15374_0 fromException>
  <Stem inflectionClass> = <15374_0 inflectionClass>
  <Full stemNameInfo morphoSyntax> = <15374_0 morphoSyntax>
  <Full stemNameInfo stemName>       = <Stem stemName>
				  | stem name logical constraint
 <Full stemNameInfo> == (
  ([stemName:17837] -> ([morphoSyntax:[ 16481:16483]] ))
				 & ( ([stemName:18510] -> ([morphoSyntax:[ 16489:16490 18512:18514]] ))
				 & ( ([stemName:18674] -> ([morphoSyntax:[16484 : [ 16469:16471] 16489:16490 18512:18515]]  / ([morphoSyntax:[ 16489:16491]] )))
				 & ( ([stemName:20027] -> ([morphoSyntax:[ 16489:16491]] ))
			& ( ([stemName:NotStemName17837StemName18510] -> ~([morphoSyntax:[ 16481:16483]] / ([morphoSyntax:[ 16489:16490 18512:18514]] )))
			& ( ([stemName:NotStemName18510StemName18674] -> ~([morphoSyntax:[ 16489:16490 18512:18514]] / ([morphoSyntax:[16484 : [ 16469:16471] 16489:16490 18512:18515]]  / ([morphoSyntax:[ 16489:16491]] ))))))))))
rule {Fully analyzed stem with a final inflectional template 16372}
  Full =  Stem 16377_0
														 | percolation
  <Full synCat>       = <Stem synCat>
  <Full morphoSyntax> = <Stem morphoSyntax>
  <Full inflected>    = +
  <Full requiresInflection> = -
						  | constraints
  <Stem blocksInflection> = - | prevent a non-final template from immediately being inflected without any intervening derivation or compounding
  <Stem  synCat>       = 16362
  <Stem morphoSyntax>    = <16377_0 morphoSyntax>
  <Stem synCat>          = <16377_0 envCat>   | allomorph
  <Stem exception>       = <16377_0 fromException>
  <Stem inflectionClass> = <16377_0 inflectionClass>
  <Full stemNameInfo morphoSyntax> = <16377_0 morphoSyntax>
rule {Fully analyzed stem with a final inflectional template 16964}
  Full =  Stem 16965_0
														 | percolation
  <Full synCat>       = <Stem synCat>
  <Full morphoSyntax> = <Stem morphoSyntax>
  <Full inflected>    = +
  <Full requiresInflection> = -
						  | constraints
  <Stem blocksInflection> = - | prevent a non-final template from immediately being inflected without any intervening derivation or compounding
  <Stem  synCat>       = 16963
  <Stem morphoSyntax>    = <16965_0 morphoSyntax>
  <Stem synCat>          = <16965_0 envCat>   | allomorph
  <Stem exception>       = <16965_0 fromException>
  <Stem inflectionClass> = <16965_0 inflectionClass>
  <Full stemNameInfo morphoSyntax> = <16965_0 morphoSyntax>
rule {Fully analyzed stem with a final inflectional template 16374}
  Full =  Stem 16375_0
														 | percolation
  <Full synCat>       = <Stem synCat>
  <Full morphoSyntax> = <Stem morphoSyntax>
  <Full inflected>    = +
  <Full requiresInflection> = -
						  | constraints
  <Stem blocksInflection> = - | prevent a non-final template from immediately being inflected without any intervening derivation or compounding
  <Stem  synCat>       = 259
  <Stem morphoSyntax>    = <16375_0 morphoSyntax>
  <Stem synCat>          = <16375_0 envCat>   | allomorph
  <Stem exception>       = <16375_0 fromException>
  <Stem inflectionClass> = <16375_0 inflectionClass>
  <Full stemNameInfo morphoSyntax> = <16375_0 morphoSyntax>
rule {Fully analyzed stem with a final inflectional template 17079}
  Full =  Stem 17080_0
														 | percolation
  <Full synCat>       = <Stem synCat>
  <Full morphoSyntax> = <Stem morphoSyntax>
  <Full inflected>    = +
  <Full requiresInflection> = -
						  | constraints
  <Stem blocksInflection> = - | prevent a non-final template from immediately being inflected without any intervening derivation or compounding
  <Stem  synCat>       = 17069
  <Stem morphoSyntax>    = <17080_0 morphoSyntax>
  <Stem synCat>          = <17080_0 envCat>   | allomorph
  <Stem exception>       = <17080_0 fromException>
  <Stem inflectionClass> = <17080_0 inflectionClass>
  <Full stemNameInfo morphoSyntax> = <17080_0 morphoSyntax>
rule {Fully analyzed stem with a final inflectional template 18419}
  Full =  Stem 18420_0
														 | percolation
  <Full synCat>       = <Stem synCat>
  <Full morphoSyntax> = <Stem morphoSyntax>
  <Full inflected>    = +
  <Full requiresInflection> = -
						  | constraints
  <Stem blocksInflection> = - | prevent a non-final template from immediately being inflected without any intervening derivation or compounding
  <Stem  synCat>       = 18385
  <Stem morphoSyntax>    = <18420_0 morphoSyntax>
  <Stem synCat>          = <18420_0 envCat>   | allomorph
  <Stem exception>       = <18420_0 fromException>
  <Stem inflectionClass> = <18420_0 inflectionClass>
  <Full stemNameInfo morphoSyntax> = <18420_0 morphoSyntax>
| ------------------------------------------------------------
|                STEM
| ------------------------------------------------------------

rule {Stem consisting of a single root}
  Stem = root
					| percolation
		<Stem synCat>          = <root rootCat>
		<Stem morphoSyntax>    = <root morphoSyntax>
		<Stem inflectionClass> = <root inflectionClass>
		<Stem stratum>         = <root stratum>
		<Stem requiresInflection> = <root requiresInflection>
		<Stem stemName>   = <root stemName>
		<Stem exception>       = <root exception>
		<root> == ~[rootCat : unknown]  | root category has to be overt


rule {Stem with a derivational prefix}
  Stem_1 = derivPfx Stem_2
								| percolation
		<Stem_1 synCat>           = <Stem_2 synCat> | default to Stem 2 (in case deriv prefix has no category)
		<Stem_1 synCat>           <= <derivPfx toCat> | use priority union to override anything in Stem_2
		<Stem_1 morphoSyntax>     = <Stem_2 morphoSyntax>
		<Stem_1 stratum>          = <derivPfx stratum>
		<Stem_1 requiresInflection> = <Stem_2 requiresInflection> | default to stem 2 (in case deriv prefix has no to category)
		<Stem_1 requiresInflection> <= <derivPfx requiresInflection> | use deriv prefix when it has a category
		<Stem_1 exception>        = <Stem_2 exception>
		<Stem_1 stemName>         = <Stem_2 stemName>
		<Stem_1 morphoSyntax>    <= <derivPfx toMorphoSyntax>
		<Stem_1 inflectionClass> = <Stem_2 inflectionClass>
		<Stem_1 inflectionClass> <= <derivPfx toInflectionClass>
		<Stem_1 exception>       <= <derivPfx toException>
		<Stem_1 blocksInflection> = - | This stem can now be inflected
								| constraints
		<Stem_2 morphoSyntax>     = <derivPfx fromMorphoSyntax>
		<Stem_2 inflectionClass>  = <derivPfx fromInflectionClass>
		<Stem_2 stemName>         = <derivPfx stemName>
		<Stem_2 exception>        = <derivPfx fromException>
		{
		
		<Stem_2 synCat>           = <derivPfx fromCat>
		<Stem_2 synCat>           = <derivPfx envCat>
		/
		<derivPfx fromCat>        = 261
		<derivPfx envCat>         = 261
{
	  
		<Stem_2 synCat>           = 261 /
		<Stem_2 synCat>           = 15311 /
		<Stem_2 synCat>           = 15312
}

		/
		<derivPfx fromCat>        = 20974
		<derivPfx envCat>         = 20974
{
	  
		<Stem_2 synCat>           = 20974 /
		<Stem_2 synCat>           = 259
}

		/
		<derivPfx fromCat>        = 17021
		<derivPfx envCat>         = 17021
{
	  
		<Stem_2 synCat>           = 17021 /
		<Stem_2 synCat>           = 20975
}

	  }

rule {Stem with a derivational suffix}
  Stem_1 =          Stem_2 derivSfx
								| percolation
		<Stem_1 synCat>           = <Stem_2 synCat> | default to Stem 2 (in case deriv suffix has no to category)
		<Stem_1 synCat>           <= <derivSfx toCat> | use priority union to override anything in Stem_2
		<Stem_1 morphoSyntax>     = <Stem_2 morphoSyntax>
		<Stem_1 stratum>          = <derivSfx stratum>
		<Stem_1 requiresInflection> = <Stem_2 requiresInflection> | default to stem 2 (in case deriv suffix has no to category)
		<Stem_1 requiresInflection> <= <derivSfx requiresInflection> | use deriv suffix when it has a category
		<Stem_1 exception>        = <Stem_2 exception>
		<Stem_1 stemName>         = <Stem_2 stemName>
		<Stem_1 morphoSyntax>    <= <derivSfx toMorphoSyntax>
		<Stem_1 inflectionClass> = <Stem_2 inflectionClass>
		<Stem_1 inflectionClass> <= <derivSfx toInflectionClass>
		<Stem_1 exception>       <= <derivSfx toException>
		<Stem_1 blocksInflection> = - | This stem can now be inflected
								| constraints
		<Stem_2 morphoSyntax>     = <derivSfx fromMorphoSyntax>
		<Stem_2 inflectionClass>  = <derivSfx fromInflectionClass>
		<Stem_2 stemName>         = <derivSfx stemName>
		<Stem_2 exception>        = <derivSfx fromException>
		{
		
		<Stem_2 synCat>           = <derivSfx fromCat>
		<Stem_2 synCat>           = <derivSfx envCat>
		/
		<derivSfx fromCat>        = 261
		<derivSfx envCat>         = 261
{
	  
		<Stem_2 synCat>           = 261 /
		<Stem_2 synCat>           = 15311 /
		<Stem_2 synCat>           = 15312
}

		/
		<derivSfx fromCat>        = 20974
		<derivSfx envCat>         = 20974
{
	  
		<Stem_2 synCat>           = 20974 /
		<Stem_2 synCat>           = 259
}

		/
		<derivSfx fromCat>        = 17021
		<derivSfx envCat>         = 17021
{
	  
		<Stem_2 synCat>           = 17021 /
		<Stem_2 synCat>           = 20975
}

	  }
rule {Stem with a derivational circumfix}
		 Stem_1 = derivCircumPfx Stem_2 derivCircumSfx
		 | percolation
		 <Stem_1 synCat>           = <Stem_2 synCat> | default to Stem 2 (in case deriv circumfixes have no to category)
		 <Stem_1 synCat>           <= <derivCircumPfx toCat> | use priority union to override anything in Stem_2
		 <Stem_1 synCat>           <= <derivCircumSfx toCat>
		 <Stem_1 morphoSyntax>     = <Stem_2 morphoSyntax>
		 <Stem_1 stratum>          = <derivCircumPfx stratum>
		 <Stem_1 stratum>          = <derivCircumSfx stratum>
		 <Stem_1 requiresInflection> = <Stem_2 requiresInflection> | default to stem 2 (in case deriv prefix has no category)
		 <Stem_1 requiresInflection> <= <derivCircumPfx requiresInflection> | use deriv prefix when it has a category
		 <Stem_1 requiresInflection> <= <derivCircumSfx requiresInflection> | use deriv suffix when it has a category
		 <Stem_1 exception>        = <Stem_2 exception>
		 <Stem_1 stemName>         = <Stem_2 stemName>
		 <Stem_1 morphoSyntax>    <= <derivCircumPfx toMorphoSyntax>
		 <Stem_1 morphoSyntax>    <= <derivCircumSfx toMorphoSyntax>
		 <Stem_1 inflectionClass> = <Stem_2 inflectionClass>
		 <Stem_1 inflectionClass> <= <derivCircumPfx toInflectionClass>
		 <Stem_1 inflectionClass> <= <derivCircumSfx toInflectionClass>
		 <Stem_1 exception>       <= <derivCircumPfx toException>
		 <Stem_1 exception>       <= <derivCircumSfx toException>
		 <Stem_1 blocksInflection> = - | This stem can now be inflected
		 | constraints
		 <Stem_2 morphoSyntax>     = <derivCircumPfx fromMorphoSyntax>
		 <Stem_2 morphoSyntax>     = <derivCircumSfx fromMorphoSyntax>
		 <Stem_2 inflectionClass>  = <derivCircumPfx fromInflectionClass>
		 <Stem_2 inflectionClass>  = <derivCircumSfx fromInflectionClass>
		 <Stem_2 stemName>         = <derivCircumPfx stemName>
		 <Stem_2 stemName>         = <derivCircumSfx stemName>
		 <Stem_2 exception>        = <derivCircumPfx fromException>
		 <Stem_2 exception>        = <derivCircumSfx fromException>
	  {
	  
		<Stem_2 synCat>           = <derivCircumPfx fromCat>
		<Stem_2 synCat>           = <derivCircumPfx envCat>
		<Stem_2 synCat>           = <derivCircumSfx fromCat>
		<Stem_2 synCat>           = <derivCircumSfx envCat>
		/
		<derivCircumPfx fromCat>        = 261
		<derivCircumPfx envCat>         = 261
		<derivCircumSfx fromCat>        = 261
		<derivCircumSfx envCat>         = 261
{
	  
		<Stem_2 synCat>           = 261 /
		<Stem_2 synCat>           = 15311 /
		<Stem_2 synCat>           = 15312
}

		/
		<derivCircumPfx fromCat>        = 20974
		<derivCircumPfx envCat>         = 20974
		<derivCircumSfx fromCat>        = 20974
		<derivCircumSfx envCat>         = 20974
{
	  
		<Stem_2 synCat>           = 20974 /
		<Stem_2 synCat>           = 259
}

		/
		<derivCircumPfx fromCat>        = 17021
		<derivCircumPfx envCat>         = 17021
		<derivCircumSfx fromCat>        = 17021
		<derivCircumSfx envCat>         = 17021
{
	  
		<Stem_2 synCat>           = 17021 /
		<Stem_2 synCat>           = 20975
}

	  }
	  
rule {Stem with a derivational circumfix where the rightmost part is an infix (and so may end up as a prefix}
		 Stem_1 = derivCircumPfx_1 derivCircumPfx_2 Stem_2
		 | percolation
		 <Stem_1 synCat>           = <Stem_2 synCat> | default to Stem 2 (in case deriv circumfixes have no to category)
		 <Stem_1 synCat>           <= <derivCircumPfx_1 toCat> | use priority union to override anything in Stem_2
		 <Stem_1 synCat>           <= <derivCircumPfx_2 toCat>
		 <Stem_1 morphoSyntax>     = <Stem_2 morphoSyntax>
		 <Stem_1 stratum>          = <derivCircumPfx_1 stratum>
		 <Stem_1 stratum>          = <derivCircumPfx_2 stratum>
		 <Stem_1 requiresInflection> = <Stem_2 requiresInflection> | default to stem 2 (in case deriv prefix has no category)
		 <Stem_1 requiresInflection> <= <derivCircumPfx_1 requiresInflection> | use deriv prefix when it has a category
		 <Stem_1 requiresInflection> <= <derivCircumPfx_2 requiresInflection> | use deriv suffix when it has a category
		 <Stem_1 exception>        = <Stem_2 exception>
		 <Stem_1 stemName>         = <Stem_2 stemName>
		 <Stem_1 morphoSyntax>    <= <derivCircumPfx_1 toMorphoSyntax>
		 <Stem_1 morphoSyntax>    <= <derivCircumPfx_2 toMorphoSyntax>
		 <Stem_1 inflectionClass> = <Stem_2 inflectionClass>
		 <Stem_1 inflectionClass> <= <derivCircumPfx_1 toInflectionClass>
		 <Stem_1 inflectionClass> <= <derivCircumPfx_2 toInflectionClass>
		 <Stem_1 exception>       <= <derivCircumPfx_1 toException>
		 <Stem_1 exception>       <= <derivCircumPfx_2 toException>
		 <Stem_1 blocksInflection> = - | This stem can now be inflected
		 | constraints
		 <Stem_2 morphoSyntax>     = <derivCircumPfx_1 fromMorphoSyntax>
		 <Stem_2 morphoSyntax>     = <derivCircumPfx_2 fromMorphoSyntax>
		 <Stem_2 inflectionClass>  = <derivCircumPfx_1 fromInflectionClass>
		 <Stem_2 inflectionClass>  = <derivCircumPfx_2 fromInflectionClass>
		 <Stem_2 stemName>         = <derivCircumPfx_1 stemName>
		 <Stem_2 stemName>         = <derivCircumPfx_2 stemName>
		 <Stem_2 exception>        = <derivCircumPfx_1 fromException>
		 <Stem_2 exception>        = <derivCircumPfx_2 fromException>
		 | rightmost "prefix" must be an infix
		 <derivCircumPfx_2> == [morphType : infix]
	  {
	  
		<Stem_2 synCat>           = <derivCircumPfx_1 fromCat>
		<Stem_2 synCat>           = <derivCircumPfx_1 envCat>
		<Stem_2 synCat>           = <derivCircumPfx_2 fromCat>
		<Stem_2 synCat>           = <derivCircumPfx_2 envCat>
		/
		<derivCircumPfx_1 fromCat>        = 261
		<derivCircumPfx_1 envCat>         = 261
		<derivCircumPfx_2 fromCat>        = 261
		<derivCircumPfx_2 envCat>         = 261
{
	  
		<Stem_2 synCat>           = 261 /
		<Stem_2 synCat>           = 15311 /
		<Stem_2 synCat>           = 15312
}

		/
		<derivCircumPfx_1 fromCat>        = 20974
		<derivCircumPfx_1 envCat>         = 20974
		<derivCircumPfx_2 fromCat>        = 20974
		<derivCircumPfx_2 envCat>         = 20974
{
	  
		<Stem_2 synCat>           = 20974 /
		<Stem_2 synCat>           = 259
}

		/
		<derivCircumPfx_1 fromCat>        = 17021
		<derivCircumPfx_1 envCat>         = 17021
		<derivCircumPfx_2 fromCat>        = 17021
		<derivCircumPfx_2 envCat>         = 17021
{
	  
		<Stem_2 synCat>           = 17021 /
		<Stem_2 synCat>           = 20975
}

	  }
	  
| ------------------------------------------------------------
|                PARTIALLY ANALYZED WORD PORTION
| ------------------------------------------------------------

			  | an unmarked root
rule {A root unmarked for category is a partial analysis}
Partial = root
								| percolation
  <Partial synCat> = <root rootCat>
								| constraint
  <root rootCat> = unknown

			  | affixes on an unmarked root
rule {One or more prefixes and suffixes on an unmarked stem}
Partial_1 = Prefs Partial_2 Suffs
								| percolation
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraint
  <Partial_2 synCat> = unknown

			  | prefixes on an unmarked root
rule {One or more prefixes on an unmarked stem}
Partial_1 = Prefs Partial_2
								| percolation
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraint
  <Partial_2 synCat> = unknown

			  | suffixes on an unmarked root
rule {One or more suffixes on an unmarked stem}
Partial_1 = Partial_2 Suffs
								| percolation
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraint
  <Partial_2 synCat> = unknown

rule {Derivational circumfix on an unmarked stem}
Partial_1 = derivCircumPfx Partial_2 derivCircumSfx
								| percolation
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraint
  <Partial_2 synCat> = unknown
rule {Derivational circumfix on an unmarked stem where second is an infix}
Partial_1 = derivCircumPfx_1 derivCircumPfx_2 Partial_2
								 | percolation
  <Partial_1 synCat> = <Partial_2 synCat>
								 | constraint
  <Partial_2 synCat> = unknown
								 | rightmost "prefix" must be an infix
  <derivCircumPfx_2> == [morphType : infix]

rule {Unclassifed circumfix on an unmarked stem}
Partial_1 = circumPfx Partial_2 circumSfx
								| percolation
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraint
  <Partial_2 synCat> = unknown
  rule {Unclassifed circumfix on an unmarked stem where second is an infix}
  Partial_1 = circumPfx_1 circumPfx_2 Partial_2
								| percolation
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraint
  <Partial_2 synCat> = unknown
								| rightmost "prefix" must be an infix
  <circumPfx_2> == [morphType : infix]

rule {An unanalyzed prefix added to a sequence of prefixes; no compound rules}
  Prefs_1 = prefix (Prefs_2)
				| no percolation or constraints

rule {A derivational prefix added to a sequence of prefixes; the derivational prefix may be next to the stem}
  Prefs_1 = derivPfx (Prefs_2)
				| no percolation or constraints

rule {An unanalyzed suffix added to a sequence of suffixes; no compound rules}
  Suffs_1 = (Suffs_2) suffix
				| no percolation or constraints

rule {A derivational suffix added to a sequence of suffixes; the derivational suffix may be next to the stem}
  Suffs_1 = (Suffs_2) derivSfx
				| no percolation or constraints

			  | affixes on otherwise fully analyzed
			  | these never allow derivational affixes next to the stem
rule {One or more unanalyzed prefixes and suffixes on a fully analyzed stem}
  Partial = Prefixes Full Suffixes
								| percolation
  <Partial inflected> = <Full inflected>
  <Partial synCat> = <Full synCat>
								| constraints
  
  {
  
		<Full synCat>           = <Prefixes synCat>
		<Full synCat>           = <Prefixes envCat>
		<Full synCat>           = <Suffixes synCat>
		<Full synCat>           = <Suffixes envCat>
		/
		<Prefixes synCat>        = 261
		<Prefixes envCat>         = 261
		<Suffixes synCat>        = 261
		<Suffixes envCat>         = 261
{
	  
		<Full synCat>           = 261 /
		<Full synCat>           = 15311 /
		<Full synCat>           = 15312
}

		/
		<Prefixes synCat>        = 20974
		<Prefixes envCat>         = 20974
		<Suffixes synCat>        = 20974
		<Suffixes envCat>         = 20974
{
	  
		<Full synCat>           = 20974 /
		<Full synCat>           = 259
}

		/
		<Prefixes synCat>        = 17021
		<Prefixes envCat>         = 17021
		<Suffixes synCat>        = 17021
		<Suffixes envCat>         = 17021
{
	  
		<Full synCat>           = 17021 /
		<Full synCat>           = 20975
}

  }

rule {One or more unanalyzed prefixes on a fully analyzed stem}
  Partial = Prefixes Full
								| percolation
  <Partial inflected> = <Full inflected>
  <Partial synCat> = <Full synCat>
								| constraints
  
  {
  
		<Full synCat>           = <Prefixes synCat>
		<Full synCat>           = <Prefixes envCat>
		/
		<Prefixes synCat>        = 261
		<Prefixes envCat>         = 261
{
	  
		<Full synCat>           = 261 /
		<Full synCat>           = 15311 /
		<Full synCat>           = 15312
}

		/
		<Prefixes synCat>        = 20974
		<Prefixes envCat>         = 20974
{
	  
		<Full synCat>           = 20974 /
		<Full synCat>           = 259
}

		/
		<Prefixes synCat>        = 17021
		<Prefixes envCat>         = 17021
{
	  
		<Full synCat>           = 17021 /
		<Full synCat>           = 20975
}

  }

rule {One or more unanalyzed suffixes on a fully analyzed stem}
  Partial =          Full Suffixes
								| percolation
  <Partial inflected> = <Full inflected>
  <Partial synCat> = <Full synCat>
								| constraints
  
  {
  
		<Full synCat>           = <Suffixes synCat>
		<Full synCat>           = <Suffixes envCat>
		/
		<Suffixes synCat>        = 261
		<Suffixes envCat>         = 261
{
	  
		<Full synCat>           = 261 /
		<Full synCat>           = 15311 /
		<Full synCat>           = 15312
}

		/
		<Suffixes synCat>        = 20974
		<Suffixes envCat>         = 20974
{
	  
		<Full synCat>           = 20974 /
		<Full synCat>           = 259
}

		/
		<Suffixes synCat>        = 17021
		<Suffixes envCat>         = 17021
{
	  
		<Full synCat>           = 17021 /
		<Full synCat>           = 20975
}

  }

rule {Unanalyzed circumfix on a fully analyzed stem}
  Partial = circumPfx Full circumSfx
								| percolation
  <Partial inflected> = <Full inflected>
  <Partial synCat> = <Full synCat>
								| constraints
  
  {
  
		<Full synCat>           = <circumPfx synCat>
		<Full synCat>           = <circumPfx envCat>
		<Full synCat>           = <circumSfx synCat>
		<Full synCat>           = <circumSfx envCat>
		/
		<circumPfx synCat>        = 261
		<circumPfx envCat>         = 261
		<circumSfx synCat>        = 261
		<circumSfx envCat>         = 261
{
	  
		<Full synCat>           = 261 /
		<Full synCat>           = 15311 /
		<Full synCat>           = 15312
}

		/
		<circumPfx synCat>        = 20974
		<circumPfx envCat>         = 20974
		<circumSfx synCat>        = 20974
		<circumSfx envCat>         = 20974
{
	  
		<Full synCat>           = 20974 /
		<Full synCat>           = 259
}

		/
		<circumPfx synCat>        = 17021
		<circumPfx envCat>         = 17021
		<circumSfx synCat>        = 17021
		<circumSfx envCat>         = 17021
{
	  
		<Full synCat>           = 17021 /
		<Full synCat>           = 20975
}

  }
	| (Note: we do not allow for a derivational circumfix to attach to a Full in order to produce a partial - that would be an error.)
rule {Unanalyzed circumfix on a fully analyzed stem where second is an infix}
 Partial = circumPfx_1 circumPfx_2 Full
								 | percolation
	<Partial inflected> = <Full inflected>
	<Partial synCat> = <Full synCat>
								 | constraints
								 | rightmost "prefix" must be an infix
	<circumPfx_2> == [morphType : infix]
	  
	  {
	  
		<Full synCat>           = <circumPfx_1 synCat>
		<Full synCat>           = <circumPfx_1 envCat>
		<Full synCat>           = <circumPfx_2 synCat>
		<Full synCat>           = <circumPfx_2 envCat>
		/
		<circumPfx_1 synCat>        = 261
		<circumPfx_1 envCat>         = 261
		<circumPfx_2 synCat>        = 261
		<circumPfx_2 envCat>         = 261
{
	  
		<Full synCat>           = 261 /
		<Full synCat>           = 15311 /
		<Full synCat>           = 15312
}

		/
		<circumPfx_1 synCat>        = 20974
		<circumPfx_1 envCat>         = 20974
		<circumPfx_2 synCat>        = 20974
		<circumPfx_2 envCat>         = 20974
{
	  
		<Full synCat>           = 20974 /
		<Full synCat>           = 259
}

		/
		<circumPfx_1 synCat>        = 17021
		<circumPfx_1 envCat>         = 17021
		<circumPfx_2 synCat>        = 17021
		<circumPfx_2 envCat>         = 17021
{
	  
		<Full synCat>           = 17021 /
		<Full synCat>           = 20975
}

	  }
	  | (Note: we do not allow for a derivational circumfix to attach to a Full in order to produce a partial - that would be an error.)

			  | affixes on partial with non-final inflection
rule {One or more unanalyzed prefixes and suffixes on partial}
  Partial_1 = Prefs Partial_2 Suffs
								| percolation
  <Partial_1 inflected> = <Partial_2 inflected>
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraints
  <Partial_2> == ~[synCat:unknown]

rule {One or more unanalyzed prefixes on partial}
  Partial_1 = Prefs Partial_2
								| percolation
  <Partial_1 inflected> = <Partial_2 inflected>
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraints
  <Partial_2> == ~[synCat:unknown]

rule {One or more unanalyzed suffixes on partial}
  Partial_1 =          Partial_2 Suffs
								| percolation
  <Partial_1 inflected> = <Partial_2 inflected>
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraints
  <Partial_2> == ~[synCat:unknown]

rule {Unanalyzed circumfix on partial}
  Partial_1 = circumPfx Partial_2 circumSfx
								| percolation
  <Partial_1 inflected> = <Partial_2 inflected>
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraints
  <Partial_2> == ~[synCat:unknown]
rule {Unanalyzed circumfix on partial, where second part is an infix}
  Partial_1 = circumPfx_1 circumPfx_2 Partial_2
								| percolation
  <Partial_1 inflected> = <Partial_2 inflected>
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraints
  <Partial_2> == ~[synCat:unknown]
								| rightmost "prefix" must be an infix
  <circumPfx_2> == [morphType : infix]

rule {Derivational circumfix on partial}
  Partial_1 = derivCircumPfx Partial_2 derivCircumSfx
								| percolation
  <Partial_1 inflected> = <Partial_2 inflected>
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraints
  <Partial_2> == ~[synCat:unknown]
rule {Derivational circumfix on partial, where second part is an infix}
  Partial_1 = derivCircumPfx_1 derivCircumPfx_2 Partial_2
								| percolation
  <Partial_1 inflected> = <Partial_2 inflected>
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraints
  <Partial_2> == ~[synCat:unknown]
								| rightmost "prefix" must be an infix
   <derivCircumPfx_2> == [morphType : infix]

rule {An unanalyzed prefix added to a sequence of prefixes}
  Prefixes_1 = prefix (Prefixes_2)
								| percolation
  <Prefixes_1 synCat> = <prefix fromCat>  | keep the same category
								| constraints
  
  {
  
		<Prefixes_2 synCat>           = <prefix fromCat>
		/
		<prefix fromCat>        = 261
{
	  
		<Prefixes_2 synCat>           = 261 /
		<Prefixes_2 synCat>           = 15311 /
		<Prefixes_2 synCat>           = 15312
}

		/
		<prefix fromCat>        = 20974
{
	  
		<Prefixes_2 synCat>           = 20974 /
		<Prefixes_2 synCat>           = 259
}

		/
		<prefix fromCat>        = 17021
{
	  
		<Prefixes_2 synCat>           = 17021 /
		<Prefixes_2 synCat>           = 20975
}

  }

rule {A derivational prefix added to a sequence of prefixes; the derivational cannot be next to the stem}
  Prefixes_1 = derivPfx Prefixes_2
								| percolation
  <Prefixes_1 synCat> = <derivPfx toCat>
								| constraints
  {
  
		<Prefixes_2 synCat>           = <derivPfx fromCat>
		/
		<derivPfx fromCat>        = 261
{
	  
		<Prefixes_2 synCat>           = 261 /
		<Prefixes_2 synCat>           = 15311 /
		<Prefixes_2 synCat>           = 15312
}

		/
		<derivPfx fromCat>        = 20974
{
	  
		<Prefixes_2 synCat>           = 20974 /
		<Prefixes_2 synCat>           = 259
}

		/
		<derivPfx fromCat>        = 17021
{
	  
		<Prefixes_2 synCat>           = 17021 /
		<Prefixes_2 synCat>           = 20975
}

  }

rule {A derivational prefix added to a partial analysis}
Partial_1 = derivPfx Partial_2
								| percolation
<Partial_1 synCat> = <derivPfx toCat>
								| constraints
{
  
		<Partial_2 synCat>           = <derivPfx fromCat>
		<Partial_2 synCat>           = <derivPfx envCat>
		/
		<derivPfx fromCat>        = 261
		<derivPfx envCat>         = 261
{
	  
		<Partial_2 synCat>           = 261 /
		<Partial_2 synCat>           = 15311 /
		<Partial_2 synCat>           = 15312
}

		/
		<derivPfx fromCat>        = 20974
		<derivPfx envCat>         = 20974
{
	  
		<Partial_2 synCat>           = 20974 /
		<Partial_2 synCat>           = 259
}

		/
		<derivPfx fromCat>        = 17021
		<derivPfx envCat>         = 17021
{
	  
		<Partial_2 synCat>           = 17021 /
		<Partial_2 synCat>           = 20975
}

  }

rule {An unanalyzed suffix added to a sequence of suffixes}
  Suffixes_1 = (Suffixes_2) suffix
								| percolation
  <Suffixes_1 synCat> = <suffix fromCat>  | keep the same category
								| constraints
  
  {
  
		<Suffixes_2 synCat>           = <suffix fromCat>
		/
		<suffix fromCat>        = 261
{
	  
		<Suffixes_2 synCat>           = 261 /
		<Suffixes_2 synCat>           = 15311 /
		<Suffixes_2 synCat>           = 15312
}

		/
		<suffix fromCat>        = 20974
{
	  
		<Suffixes_2 synCat>           = 20974 /
		<Suffixes_2 synCat>           = 259
}

		/
		<suffix fromCat>        = 17021
{
	  
		<Suffixes_2 synCat>           = 17021 /
		<Suffixes_2 synCat>           = 20975
}

  }

rule {A derivational suffix added to a sequence of suffixes; the derivational cannot be next to the stem}
  Suffixes_1 = Suffixes_2 derivSfx
								| percolation
  <Suffixes_1 synCat> = <derivSfx toCat>
								| constraints
  {
  
		<Suffixes_2 synCat>           = <derivSfx fromCat>
		/
		<derivSfx fromCat>        = 261
{
	  
		<Suffixes_2 synCat>           = 261 /
		<Suffixes_2 synCat>           = 15311 /
		<Suffixes_2 synCat>           = 15312
}

		/
		<derivSfx fromCat>        = 20974
{
	  
		<Suffixes_2 synCat>           = 20974 /
		<Suffixes_2 synCat>           = 259
}

		/
		<derivSfx fromCat>        = 17021
{
	  
		<Suffixes_2 synCat>           = 17021 /
		<Suffixes_2 synCat>           = 20975
}

  }

rule {A derivational suffix added to a partial analysis}
Partial_1 = Partial_2 derivSfx
								| percolation
<Partial_1 synCat> = <derivSfx toCat>
								| constraints
{
  
		<Partial_2 synCat>           = <derivSfx fromCat>
		<Partial_2 synCat>           = <derivSfx envCat>
		/
		<derivSfx fromCat>        = 261
		<derivSfx envCat>         = 261
{
	  
		<Partial_2 synCat>           = 261 /
		<Partial_2 synCat>           = 15311 /
		<Partial_2 synCat>           = 15312
}

		/
		<derivSfx fromCat>        = 20974
		<derivSfx envCat>         = 20974
{
	  
		<Partial_2 synCat>           = 20974 /
		<Partial_2 synCat>           = 259
}

		/
		<derivSfx fromCat>        = 17021
		<derivSfx envCat>         = 17021
{
	  
		<Partial_2 synCat>           = 17021 /
		<Partial_2 synCat>           = 20975
}

  }


rule {Partially analyzed stem that's been inflected with empty template}
	Partial = PartialInflected
								| percolation
	<Partial synCat> = <PartialInflected synCat>
								| constraints
	<Partial synCat> = <PartialInflected synCat>
	<Partial morphoSyntax> = <PartialInflected morphoSyntax>

	<Partial inflected> = +
	<PartialInflected inflected> = +

	
rule {Partially analyzed stem with inflectional template  15313}
		Partial_1 =   Partial_2 15314_0 15315_1  :
														 | percolation
  <Partial_1 synCat>       = <Partial_2 synCat>
														 | constraints
{
  <Partial_2 synCat>       = 261 /
				  <Partial_2 synCat>       =  15311 /
				  <Partial_2 synCat>       =  15312
} 

  <Partial_1 morphoSyntax>    = <15314_0 morphoSyntax>
  <Partial_1 morphoSyntax>    = <15315_1 morphoSyntax>
														 | constraint
  <Partial_1 inflected> = +
  <Partial_2 inflected> = -
		
rule {Partially analyzed stem with inflectional template  15340}
		Partial_1 =   Partial_2 15341_0 15342_1  :
														 | percolation
  <Partial_1 synCat>       = <Partial_2 synCat>
														 | constraints
{
  <Partial_2 synCat>       = 261 /
				  <Partial_2 synCat>       =  15311 /
				  <Partial_2 synCat>       =  15312
} 

  <Partial_1 morphoSyntax>    = <15341_0 morphoSyntax>
  <Partial_1 morphoSyntax>    = <15342_1 morphoSyntax>
														 | constraint
  <Partial_1 inflected> = +
  <Partial_2 inflected> = -
		
rule {Partially analyzed stem with inflectional template  15355}
		Partial_1 =   Partial_2 15356_0  :
														 | percolation
  <Partial_1 synCat>       = <Partial_2 synCat>
														 | constraints
{
  <Partial_2 synCat>       = 261 /
				  <Partial_2 synCat>       =  15311 /
				  <Partial_2 synCat>       =  15312
} 

  <Partial_1 morphoSyntax>    = <15356_0 morphoSyntax>
														 | constraint
  <Partial_1 inflected> = +
  <Partial_2 inflected> = -
		
rule {Partially analyzed stem with inflectional template  15373}
		Partial_1 =   Partial_2 15374_0  :
														 | percolation
  <Partial_1 synCat>       = <Partial_2 synCat>
														 | constraints
{
  <Partial_2 synCat>       = 261 /
				  <Partial_2 synCat>       =  15311 /
				  <Partial_2 synCat>       =  15312
} 

  <Partial_1 morphoSyntax>    = <15374_0 morphoSyntax>
														 | constraint
  <Partial_1 inflected> = +
  <Partial_2 inflected> = -
		
rule {Partially analyzed stem with inflectional template  16372}
		Partial_1 =   Partial_2 16377_0  :
														 | percolation
  <Partial_1 synCat>       = <Partial_2 synCat>
														 | constraints
  <Partial_2 synCat>       = 16362 

  <Partial_1 morphoSyntax>    = <16377_0 morphoSyntax>
														 | constraint
  <Partial_1 inflected> = +
  <Partial_2 inflected> = -
		
rule {Partially analyzed stem with inflectional template  16964}
		Partial_1 =   Partial_2 16965_0  :
														 | percolation
  <Partial_1 synCat>       = <Partial_2 synCat>
														 | constraints
  <Partial_2 synCat>       = 16963 

  <Partial_1 morphoSyntax>    = <16965_0 morphoSyntax>
														 | constraint
  <Partial_1 inflected> = +
  <Partial_2 inflected> = -
		
rule {Partially analyzed stem with inflectional template  16374}
		Partial_1 =   Partial_2 16375_0  :
														 | percolation
  <Partial_1 synCat>       = <Partial_2 synCat>
														 | constraints
  <Partial_2 synCat>       = 259 

  <Partial_1 morphoSyntax>    = <16375_0 morphoSyntax>
														 | constraint
  <Partial_1 inflected> = +
  <Partial_2 inflected> = -
		
rule {Partially analyzed stem with inflectional template  17079}
		Partial_1 =   Partial_2 17080_0  :
														 | percolation
  <Partial_1 synCat>       = <Partial_2 synCat>
														 | constraints
  <Partial_2 synCat>       = 17069 

  <Partial_1 morphoSyntax>    = <17080_0 morphoSyntax>
														 | constraint
  <Partial_1 inflected> = +
  <Partial_2 inflected> = -
		
rule {Partially analyzed stem with inflectional template  18419}
		Partial_1 =   Partial_2 18420_0  :
														 | percolation
  <Partial_1 synCat>       = <Partial_2 synCat>
														 | constraints
  <Partial_2 synCat>       = 18385 

  <Partial_1 morphoSyntax>    = <18420_0 morphoSyntax>
														 | constraint
  <Partial_1 inflected> = +
  <Partial_2 inflected> = -
		
		| if there are no compound rules, use the remaining rules:
			| these allow derivational affixes next to the stem
rule {Totally unanalyzed form with one or more prefixes and suffixes; no compound rules}
  Partial = Prefs Roots Suffs
				| percolation
	<Partial synCat> = <Roots synCat>
	<Partial morphoSyntax> = <Roots morphoSyntax>
	<Partial inflectionClass> = <Roots inflectionClass>

rule {Totally unanalyzed form with one or more prefixes; no compound rules}
  Partial = Prefs Roots
				| percolation
	<Partial synCat> = <Roots synCat>
	<Partial morphoSyntax> = <Roots morphoSyntax>
	<Partial inflectionClass> = <Roots inflectionClass>

rule {Totally unanalyzed form with one or more suffixes; no compound rules}
  Partial =       Roots Suffs
				| percolation
	<Partial synCat> = <Roots synCat>
	<Partial morphoSyntax> = <Roots morphoSyntax>
	<Partial inflectionClass> = <Roots inflectionClass>


rule {Totally unanalyzed sequence of roots; no compound rules}
  Partial =       Roots
				| percolation
	<Partial synCat> = <Roots synCat>
	<Partial morphoSyntax> = <Roots morphoSyntax>
	<Partial inflectionClass> = <Roots inflectionClass>

rule {A root added to a sequence of roots; no compound rules}
  Roots_1 = Roots_2 root
				| percolation
	<Roots_1 synCat>      = <Roots_2 synCat>      | arbitrarily use 1st
	<Roots_1 morphoSyntax> = <Roots_2 morphoSyntax> | arbitrarily use 1st
	<Roots_1 inflectionClass> = <Roots_2 inflectionClass> | arbitrarily use 1st

rule {A sequence of two roots; no compound rules}
  Roots = root_1 root_2
				| percolation
	<Roots synCat>      = <root_1 rootCat>      | arbitrarily use 1st
	<Roots morphoSyntax> = <root_1 morphoSyntax> | arbitrarily use 1st
	<Roots inflectionClass> = <root_1 inflectionClass> | arbitrarily use 1st

rule {A sequence of two roots with one or more interfixes; no compound rules}
  Roots = root_1 Interfixes root_2
				| percolation
	<Roots synCat>      = <root_1 synCat>      | arbitrarily use 1st
	<Roots morphoSyntax> = <root_1 morphoSyntax> | arbitrarily use 1st
	<Roots inflectionClass> = <root_1 inflectionClass> | arbitrarily use 1st

rule {A sequence of two or more interfixes; no compound rules}
  Interfixes_1 = Interfixes_2 interfix

rule {An interfix; no compound rules}
  Interfixes = interfix
  
| ------------------------------------------------------------
|                TEMPLATES
| ------------------------------------------------------------
Let W be []
Let W/W be []
Let Prt be []
Let Linker be []
Let Proclitic be []
Let Enclitic be []
Let Bound be []

Let RootPOS0 be [rootCat:unknown] 
Let CliticPOS0 be [rootCat:unknown] 
Let RootPOS258 be [rootCat:258
	requiresInflection : -]
Let MSEnvPOS258 be {[envCat:258]}
Let FromPOS258 be [fromCat:258]

Let ToPOS258 be [toCat:258
	requiresInflection : -]
Let CliticPOS258 be {[rootCat:258]}
Let CFP258 be {[fromCat:258]}
Let RootPOS260 be [rootCat:260
	requiresInflection : -]
Let MSEnvPOS260 be {[envCat:260]}
Let FromPOS260 be [fromCat:260]

Let ToPOS260 be [toCat:260
	requiresInflection : -]
Let CliticPOS260 be {[rootCat:260]}
Let CFP260 be {[fromCat:260]}
Let RootPOS261 be [rootCat:261
	requiresInflection : +]
Let MSEnvPOS261 be {[envCat:261][envCat:15311][envCat:15312]}
Let FromPOS261 be [fromCat:261]

Let ToPOS261 be [toCat:261
	requiresInflection : +]
Let CliticPOS261 be {[rootCat:261][rootCat:15311][rootCat:15312]}
Let CFP261 be {[fromCat:261][fromCat:15311][fromCat:15312]}
Let StemName17837 be [stemName:17837]
Let StemNameAffix17837 be []
Let StemName18510 be [stemName:18510]
Let StemNameAffix18510 be []
Let StemName18674 be [stemName:18674]
Let StemNameAffix18674 be []
Let StemName20027 be [stemName:20027]
Let StemNameAffix20027 be []
Let RootPOS15311 be [rootCat:15311
	requiresInflection : +]
Let MSEnvPOS15311 be {[envCat:15311]}
Let FromPOS15311 be [fromCat:15311]

Let ToPOS15311 be [toCat:15311
	requiresInflection : +]
Let CliticPOS15311 be {[rootCat:15311]}
Let CFP15311 be {[fromCat:15311]}
Let RootPOS15312 be [rootCat:15312
	requiresInflection : +]
Let MSEnvPOS15312 be {[envCat:15312]}
Let FromPOS15312 be [fromCat:15312]

Let ToPOS15312 be [toCat:15312
	requiresInflection : +]
Let CliticPOS15312 be {[rootCat:15312]}
Let CFP15312 be {[fromCat:15312]}
Let RootPOS16362 be [rootCat:16362
	requiresInflection : +]
Let MSEnvPOS16362 be {[envCat:16362]}
Let FromPOS16362 be [fromCat:16362]

Let ToPOS16362 be [toCat:16362
	requiresInflection : +]
Let CliticPOS16362 be {[rootCat:16362]}
Let CFP16362 be {[fromCat:16362]}
Let RootPOS16963 be [rootCat:16963
	requiresInflection : +]
Let MSEnvPOS16963 be {[envCat:16963]}
Let FromPOS16963 be [fromCat:16963]

Let ToPOS16963 be [toCat:16963
	requiresInflection : +]
Let CliticPOS16963 be {[rootCat:16963]}
Let CFP16963 be {[fromCat:16963]}
Let RootPOS20974 be [rootCat:20974
	requiresInflection : -]
Let MSEnvPOS20974 be {[envCat:20974][envCat:259]}
Let FromPOS20974 be [fromCat:20974]

Let ToPOS20974 be [toCat:20974
	requiresInflection : -]
Let CliticPOS20974 be {[rootCat:20974][rootCat:259]}
Let CFP20974 be {[fromCat:20974][fromCat:259]}
Let RootPOS259 be [rootCat:259
	requiresInflection : +]
Let MSEnvPOS259 be {[envCat:259]}
Let FromPOS259 be [fromCat:259]

Let ToPOS259 be [toCat:259
	requiresInflection : +]
Let CliticPOS259 be {[rootCat:259]}
Let CFP259 be {[fromCat:259]}
Let RootPOS17021 be [rootCat:17021
	requiresInflection : -]
Let MSEnvPOS17021 be {[envCat:17021][envCat:20975]}
Let FromPOS17021 be [fromCat:17021]

Let ToPOS17021 be [toCat:17021
	requiresInflection : -]
Let CliticPOS17021 be {[rootCat:17021][rootCat:20975]}
Let CFP17021 be {[fromCat:17021][fromCat:20975]}
Let RootPOS20975 be [rootCat:20975
	requiresInflection : -]
Let MSEnvPOS20975 be {[envCat:20975]}
Let FromPOS20975 be [fromCat:20975]

Let ToPOS20975 be [toCat:20975
	requiresInflection : -]
Let CliticPOS20975 be {[rootCat:20975]}
Let CFP20975 be {[fromCat:20975]}
Let RootPOS17069 be [rootCat:17069
	requiresInflection : +]
Let MSEnvPOS17069 be {[envCat:17069]}
Let FromPOS17069 be [fromCat:17069]

Let ToPOS17069 be [toCat:17069
	requiresInflection : +]
Let CliticPOS17069 be {[rootCat:17069]}
Let CFP17069 be {[fromCat:17069]}
Let RootPOS17107 be [rootCat:17107
	requiresInflection : -]
Let MSEnvPOS17107 be {[envCat:17107]}
Let FromPOS17107 be [fromCat:17107]

Let ToPOS17107 be [toCat:17107
	requiresInflection : -]
Let CliticPOS17107 be {[rootCat:17107]}
Let CFP17107 be {[fromCat:17107]}
Let RootPOS17217 be [rootCat:17217
	requiresInflection : -]
Let MSEnvPOS17217 be {[envCat:17217]}
Let FromPOS17217 be [fromCat:17217]

Let ToPOS17217 be [toCat:17217
	requiresInflection : -]
Let CliticPOS17217 be {[rootCat:17217]}
Let CFP17217 be {[fromCat:17217]}
Let RootPOS17242 be [rootCat:17242
	requiresInflection : -]
Let MSEnvPOS17242 be {[envCat:17242]}
Let FromPOS17242 be [fromCat:17242]

Let ToPOS17242 be [toCat:17242
	requiresInflection : -]
Let CliticPOS17242 be {[rootCat:17242]}
Let CFP17242 be {[fromCat:17242]}
Let RootPOS17678 be [rootCat:17678
	requiresInflection : -]
Let MSEnvPOS17678 be {[envCat:17678]}
Let FromPOS17678 be [fromCat:17678]

Let ToPOS17678 be [toCat:17678
	requiresInflection : -]
Let CliticPOS17678 be {[rootCat:17678]}
Let CFP17678 be {[fromCat:17678]}
Let RootPOS18385 be [rootCat:18385
	requiresInflection : +]
Let MSEnvPOS18385 be {[envCat:18385]}
Let FromPOS18385 be [fromCat:18385]

Let ToPOS18385 be [toCat:18385
	requiresInflection : +]
Let CliticPOS18385 be {[rootCat:18385]}
Let CFP18385 be {[fromCat:18385]}
Let RootPOS19942 be [rootCat:19942
	requiresInflection : -]
Let MSEnvPOS19942 be {[envCat:19942]}
Let FromPOS19942 be [fromCat:19942]

Let ToPOS19942 be [toCat:19942
	requiresInflection : -]
Let CliticPOS19942 be {[rootCat:19942]}
Let CFP19942 be {[fromCat:19942]}
Let StemName20024 be [stemName:20024]
Let StemNameAffix20024 be []
Let NotStemName17837StemName18510 be [stemName:NotStemName17837StemName18510]
Let NotStemName18510StemName18674 be [stemName:NotStemName18510StemName18674]
Let MSFS16494 be [ morphoSyntax : [ 16466:16467] ]
Let MSFS17292 be [ morphoSyntax : [ 16466:16468] ]
Let MSFS17300 be [ morphoSyntax : [ 16466:16467] ]
Let MSFS17288 be [ morphoSyntax : [ 16466:16468] ]
Let MSFS17298 be [ morphoSyntax : [ 16466:16467] ]
Let MSFS17290 be [ morphoSyntax : [ 16466:16468] ]
Let MSFS17282 be [ morphoSyntax : [ 16466:16468] ]
Let MSFS17286 be [ morphoSyntax : [ 16466:16468] ]
Let MSFS17296 be [ morphoSyntax : [ 16466:16467] ]
Let MSFS17284 be [ morphoSyntax : [ 16466:16468] ]
Let MSFS17294 be [ morphoSyntax : [ 16466:16467] ]
Let InflectionFS18602 be [ morphoSyntax : [16484 : [ 16466:16468]] ]
Let InflectionFS18583 be [ morphoSyntax : [ 16466:16467 16469:16470] ]
Let InflectionFS18600 be [ morphoSyntax : [ 16466:16468] ]
Let InflectionFS18591 be [ morphoSyntax : [ 17303:17305 16466:16467 16469:16470] ]
Let InflectionFS18580 be [ morphoSyntax : [ 17303:17305 16466:16467 16469:16471] ]
Let InflectionFS18597 be [ morphoSyntax : [ 16466:16468] ]
Let InflectionFS18575 be [ morphoSyntax : [ 16466:16467] ]
Let InflectionFS18586 be [ morphoSyntax : [16484 : [ 16466:16467 16469:16470]] ]
Let InflectionFS18612 be [ morphoSyntax : [16484 : [ 16466:16468 16469:16470]] ]
Let InflectionFS18607 be [ morphoSyntax : [16484 : [ 16466:16468 16469:16471]] ]
Let InflectionFS18617 be [ morphoSyntax : [ 16481:16482] ]
Let InflectionFS16893 be [ morphoSyntax : [ 17303:17306 16466:16467 16469:16472] ]
Let InflectionFS16589 be [ morphoSyntax : [16484 : [ 16466:16467 16469:16470]] ]
Let InflectionFS16567 be [ morphoSyntax : [16484 : [ 16466:16467 16469:16471]] ]
Let InflectionFS16547 be [ morphoSyntax : [16484 : [ 16466:16468 16469:16470]] ]
Let InflectionFS16530 be [ morphoSyntax : [16484 : [ 16466:16468 16469:16471]] ]
Let InflectionFS16519 be [ morphoSyntax : [16484 : [ 16466:16468]] ]
Let InflectionFS16604 be [ morphoSyntax : [ 16481:16483] ]
Let InflectionFS16606 be [ morphoSyntax : [16484 : [ 16469:16472 16485:16486] 16489:16491] ]
Let InflectionFS16608 be [ morphoSyntax : [16484 : [ 16469:16471 16485:16487] 16489:16491] ]
Let InflectionFS16625 be [ morphoSyntax : [16484 : [ 16469:16470 16485:16488] 16489:16491] ]
Let InflectionFS16619 be [ morphoSyntax : [16484 : [ 16469:16471 16485:16488] 16489:16491] ]
Let InflectionFS16640 be [ morphoSyntax : [16484 : [ 16469:16470] 16489:16490 18512:18515] ]
Let InflectionFS16633 be [ morphoSyntax : [16484 : [ 16469:16471] 16489:16490 18512:18515] ]
Let InflectionFS16638 be [ morphoSyntax : [ 16489:16490 18512:18514] ]
Let InflectionFS16558 be [ morphoSyntax : [16484 : [ 16466:16467 16469:16471]] ]
Let InflectionFS16584 be [ morphoSyntax : [16484 : [ 16466:16467 16469:16470]] ]
Let InflectionFS16594 be [ morphoSyntax : [ 17303:17305 16466:16467 16469:16470] ]
Let InflectionFS16563 be [ morphoSyntax : [ 17303:17305 16466:16467 16469:16471] ]
Let InflectionFS16515 be [ morphoSyntax : [ 16466:16468] ]
Let InflectionFS16578 be [ morphoSyntax : [ 17303:17305 16466:16467 16469:16470] ]
Let InflectionFS16552 be [ morphoSyntax : [ 17303:17305 16466:16467 16469:16471] ]
Let InflectionFS16541 be [ morphoSyntax : [ 16466:16468 16469:16470] ]
Let InflectionFS16524 be [ morphoSyntax : [ 17303:17305 16466:16468 16469:16471] ]
Let InflectionFS16598 be [ morphoSyntax : [ 17303:17306 16466:16467 16469:16470] ]
Let InflectionFS16572 be [ morphoSyntax : [ 17303:17306 16466:16467 16469:16471] ]
Let InflectionFS16535 be [ morphoSyntax : [ 17303:17306 16466:16468 16469:16471] ]
Let InflClass18509 be [inflectionClass:18509]
Let FromInflClass18509 be [fromInflectionClass:18509]
Let ToInflClass18509 be [toInflectionClass:18509]
Let ICA18509 be [inflectionClass:18509]
		 
Let InflClass18663 be [inflectionClass:18663]
Let FromInflClass18663 be [fromInflectionClass:18663]
Let ToInflClass18663 be [toInflectionClass:18663]
Let ICA18663 be [inflectionClass:18663]
		 
Let InflClass18664 be [inflectionClass:18664]
Let FromInflClass18664 be [fromInflectionClass:18664]
Let ToInflClass18664 be [toInflectionClass:18664]
Let ICA18664 be [inflectionClass:18664]
		  
 
 
 

Let Infix be [morphType:infix]
Let prefixinginterfix be {[cat:prefix]
						  [cat:interfix]}
Let suffixinginterfix be {[cat:suffix]
						  [cat:interfix]}
